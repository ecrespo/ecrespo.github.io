<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Página de Seraph - XML-RPC,Python</title><link href="https://ecrespo.github.io/" rel="alternate"></link><link href="https://ecrespo.github.io/feeds/xml-rpcpython.atom.xml" rel="self"></link><id>https://ecrespo.github.io/</id><updated>2008-03-23T10:50:00-05:30</updated><subtitle>Data Scientist </subtitle><entry><title>Ejemplo XML-RPC en python</title><link href="https://ecrespo.github.io/ejemplo-xml-rpc-en-python.html" rel="alternate"></link><published>2008-03-23T10:50:00-05:30</published><updated>2008-03-23T10:50:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2008-03-23:/ejemplo-xml-rpc-en-python.html</id><summary type="html">&lt;p&gt;XML-RPC permite crear un webservice que recibe unos par&amp;aacute;metros 
y devuelve un resultado. Es como una funci&amp;oacute;n pero los datos 
viajan a trav&amp;eacute;s de la red.&lt;/p&gt;
&lt;p&gt;El ejemplo es un webservice que recibe un valor y devuelve el doble 
de ese valor. Algo sencillo.&lt;/p&gt;
&lt;p&gt;El servidor:&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="se importa el modulo xmlrpc"&gt;Se importa el m&amp;oacute;dulo …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;XML-RPC permite crear un webservice que recibe unos par&amp;aacute;metros 
y devuelve un resultado. Es como una funci&amp;oacute;n pero los datos 
viajan a trav&amp;eacute;s de la red.&lt;/p&gt;
&lt;p&gt;El ejemplo es un webservice que recibe un valor y devuelve el doble 
de ese valor. Algo sencillo.&lt;/p&gt;
&lt;p&gt;El servidor:&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="se importa el modulo xmlrpc"&gt;Se importa el m&amp;oacute;dulo XMLRPC&lt;/h1&gt;
&lt;p&gt;from SimpleXMLRPCServer import SimpleXMLRPCServer&lt;/p&gt;
&lt;h1 id="se asocia a un puerto en este caso 4242"&gt;Se asocia a un puerto en este caso 4242&lt;/h1&gt;
&lt;p&gt;s = SimpleXMLRPCServer(("", 4242))&lt;/p&gt;
&lt;h1 id="la funcion que toma x y devuelve el doble de x."&gt;La funci&amp;oacute;n que toma x y devuelve el doble de x.&lt;/h1&gt;
&lt;p&gt;def twice(x):
return x*2&lt;/p&gt;
&lt;h1 id="se registra la funcion"&gt;se registra la funci&amp;oacute;n&lt;/h1&gt;
&lt;p&gt;s.register_function(twice)&lt;/p&gt;
&lt;h1 id="se inicia el servidor"&gt;se inicia el servidor&lt;/h1&gt;
&lt;p&gt;s.serve_forever()
```&lt;/p&gt;
&lt;p&gt;El cliente:
```&lt;/p&gt;
&lt;h1 id="se importa el modulo serverproxy de xmlrpclib."&gt;Se importa el m&amp;oacute;dulo ServerProxy de xmlrpclib.&lt;/h1&gt;
&lt;p&gt;from xmlrpclib import ServerProxy&lt;/p&gt;
&lt;h1 id="se conecta al equipo por el puerto 4242"&gt;Se conecta al equipo por el puerto 4242&lt;/h1&gt;
&lt;p&gt;s = ServerProxy('http://localhost:4242')&lt;/p&gt;
&lt;h1 id="se llama a la funcion pasandole x y devuelve el doble de x"&gt;Se llama a la funci&amp;oacute;n pasandole x y devuelve el doble de x&lt;/h1&gt;
&lt;p&gt;s.twice(2)
4
s.twice(3)
6
s.twice(15)
30
```&lt;/p&gt;
&lt;p&gt;En el servidor se muestra los siguientes mensajes:
&lt;code&gt;localhost - - [24/Mar/2008 00:13:38] "POST /RPC2 HTTP/1.0" 200 -
localhost - - [24/Mar/2008 00:14:23] "POST /RPC2 HTTP/1.0" 200 -
localhost - - [24/Mar/2008 00:14:36] "POST /RPC2 HTTP/1.0" 200 -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Son las respuestas a la conexiones del cliente.
Este programa se puede mejorar evaluando el tipo de datos que envia el 
cliente para as&amp;iacute; evitar errores al mandar un string en vez de un n&amp;uacute;mero.&lt;/p&gt;</content></entry></feed>