<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Página de Seraph - Tutorial de Python y PyQt</title><link href="https://ecrespo.github.io/" rel="alternate"></link><link href="https://ecrespo.github.io/feeds/tutorial-de-python-y-pyqt.atom.xml" rel="self"></link><id>https://ecrespo.github.io/</id><updated>2011-08-14T09:00:00-05:30</updated><subtitle>Data Scientist </subtitle><entry><title>Tutorial de PyQt. Editor de archivos sencillo. Parte 10.</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-editor-de-archivos-sencillo-parte-10.html" rel="alternate"></link><published>2011-08-14T09:00:00-05:30</published><updated>2011-08-14T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-08-14:/tutorial-de-pyqt-editor-de-archivos-sencillo-parte-10.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se explica como crear un editor de texto sencillo. &lt;/p&gt;
&lt;p&gt;Se tendr&amp;aacute; una barra de men&amp;uacute; con la opci&amp;oacute;n Archivo, dentro de ella se despliega la opci&amp;oacute;n abrir y cerrar aplicaci&amp;oacute;n; al abrir la aplicaci&amp;oacute;n en la ventana del editor aparecer&amp;aacute; el nombre del archivo.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute;n las …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se explica como crear un editor de texto sencillo. &lt;/p&gt;
&lt;p&gt;Se tendr&amp;aacute; una barra de men&amp;uacute; con la opci&amp;oacute;n Archivo, dentro de ella se despliega la opci&amp;oacute;n abrir y cerrar aplicaci&amp;oacute;n; al abrir la aplicaci&amp;oacute;n en la ventana del editor aparecer&amp;aacute; el nombre del archivo.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute;n las siguientes clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QTextEdit: Define el editor de textos.&lt;/li&gt;
&lt;li&gt;QAction: Permite definir acciones en el men&amp;uacute;.&lt;/li&gt;
&lt;li&gt;menuBar: Se define la barra de men&amp;uacute;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;import sys
from PyQt4 import QtGui
from PyQt4 import QtCore&lt;/p&gt;
&lt;p&gt;class App(QtGui.QMainWindow):
    def &lt;strong&gt;init&lt;/strong&gt;(self,parent=None):
        QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
        #Se define el tamano de la ventana
        self.setGeometry(0, 50, 600, 400)
        #Se le coloca un titulo a la ventana y se asocia un icono.
        self.setWindowTitle('Editor de Texto:')
        self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se define el widget de edicion de texto
    self.textEdit = QtGui.QTextEdit()
    #Se coloca en el centro
    self.setCentralWidget(self.textEdit)
    #Se define la barra de estatus y se le asigna foco
    self.statusBar()
    self.setFocus()
    #Se define la accion abrir archivo, con
    #evento de teclado y mensaje
    openFile = QtGui.QAction('Abrir', self)
    openFile.setShortcut('Ctrl+a')
    openFile.setStatusTip('Abrir archivo nuevo')
    #Se define la accion cerrar aplicacion
    #con evento de teclado y mensaje
    closeApp = QtGui.QAction('Cerrar',self)
    closeApp.setShortcut('Ctrl+w')
    closeApp.setStatusTip('Cerrar aplicacion')

    #Se define la barra de menu
    menubar = self.menuBar()
    #Nombre archivo y se agrega abrir y cerrar aplicacion
    fileMenu = menubar.addMenu('&amp;amp;Archivo')
    fileMenu.addAction(openFile)
    fileMenu.addAction(closeApp)

    #se asocia los eventos a la accion abrir archivo y cerrar aplicacion. 
    self.connect(closeApp, QtCore.SIGNAL('triggered()'),QtGui.qApp, QtCore.SLOT('quit()'))
    self.connect(openFile, QtCore.SIGNAL('triggered()'), self.showDialog)



def showDialog(self):
    #Se captura el nombre del archivo a abrir
    filename = QtGui.QFileDialog.getOpenFileName(self, 'Abrir archivo',
                '/home')
    #Se define un neuvo titulo a la ventan de la aplicacion
    self.setWindowTitle('Editor de Texto:%s' %filename)
    #Se abre el archivo y se
    #desplega la informacion en el widget de
    #edicion de texto
    fname = open(filename)
    data = fname.read()
    self.textEdit.setText(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la aplicaci&amp;oacute;n al inicio.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editor de archivos - pyqt" src="./images/pyqt10-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra las opciones de la barra de men&amp;uacute;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editor de archivos, opciones del men&amp;uacute; - pyqt" src="./images/pyqt10-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la ventana de dialogo de abrir archivo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editor de archivos, abrir archivo - pyqt" src="./images/pyqt10-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;La &amp;uacute;ltima figura muestra ya la informaci&amp;oacute;n del archivo en el editor de texto:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editor de archivos, editando archivo - pyqt" src="./images/pyqt10-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;
*&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Tutorial de PyQt. Barra de progreso. Parte 9.</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-barra-de-progreso-parte-9.html" rel="alternate"></link><published>2011-08-13T09:00:00-05:30</published><updated>2011-08-13T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-08-13:/tutorial-de-pyqt-barra-de-progreso-parte-9.html</id><summary type="html">&lt;p&gt;Continuando con la serie de art&amp;iacute;culos sobre PyQt en este caso se tratar&amp;aacute; sobre el widget de la barra de progreso.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute;n los siguientes widgets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qbutton: Bot&amp;oacute;n de iniciar y detener la barra de progreso y el bot&amp;oacute;n salir.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/qprogressbar.html"&gt;QProgressBar&lt;/a&gt;: Es el widget de la barra de progreso.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/qtimer.html"&gt;QTimer …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Continuando con la serie de art&amp;iacute;culos sobre PyQt en este caso se tratar&amp;aacute; sobre el widget de la barra de progreso.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute;n los siguientes widgets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qbutton: Bot&amp;oacute;n de iniciar y detener la barra de progreso y el bot&amp;oacute;n salir.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/qprogressbar.html"&gt;QProgressBar&lt;/a&gt;: Es el widget de la barra de progreso.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/qtimer.html"&gt;QTimer&lt;/a&gt;: Provee un timer que es quien maneja el progreso de la barra.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se tiene la barra de progreso que se inicia cuando se le da clip al bot&amp;oacute;n, se incrementa la barra hasta llegar a 100, el bot&amp;oacute;n que inicia la barra sirve tambi&amp;eacute;n para detenerlo, volver a arrancar el progreso, cuando se llega a 100 el bot&amp;oacute;n se coloca otra vez para iniciar la barra, colocando el contador en cero para poder iniciar de cero el incremento. Se tiene un bot&amp;oacute;n para salir de la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;import sys
from PyQt4 import QtGui
from PyQt4 import QtCore&lt;/p&gt;
&lt;p&gt;class App(QtGui.QWidget):
    def &lt;strong&gt;init&lt;/strong&gt;(self,parent=None):
        QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
        #Se define el tamano de la ventana
        self.setGeometry(400, 400, 250, 150)
        #Se le coloca un titulo a la ventana y se asocia un icono.
        self.setWindowTitle('Barra de progreso')
        self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se definen los widgets a utilizar en la ventana.
    #Se crea la instancia de la barra de progreso.
    self.pbar = QtGui.QProgressBar(self)
    #Se crea el boton que inicia/detiene la barra de progreso
    self.button = QtGui.QPushButton('Iniciar', self)
    #Se define una politica al boton de no foco
    self.button.setFocusPolicy(QtCore.Qt.NoFocus)
    #Se define el boton salir.
    self.quit = QtGui.QPushButton('Salir', self)

    #Se crea la instancia timer con el contador en cero
    self.timer = QtCore.QBasicTimer()
    self.step = 0

    #se asocia los eventos de los 2 botones. 
    self.connect(self.button, QtCore.SIGNAL('clicked()'),self.Accion)
    self.connect(self.quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))

    #Se define como empaquetar los widgets.
    #En este caso se usa grilla.
    #Se crea la instancia
    grid = QtGui.QGridLayout()
    grid.setSpacing(10)
    #Se agrupan los widgets pasando el
    #objeto luego el orden en vertical, el orden en
    #horizontal.
    grid.addWidget(self.pbar, 1, 0)
    grid.addWidget(self.button, 2, 0)
    grid.addWidget(self.quit, 3, 1)
    #Se define el layout pasando la grilla
    self.setLayout(grid)



def timerEvent(self, event):
    #funcion asociada al timer.
    #Si el contador llega a 100
    #Se detiene el timer, se cambia el titulo
    #del boton, se coloca el contador en cero
    #y se sale de la funcion.
    #Si no llega a 100, se incrementa en 1 el contador y
    #se le asigna un nuevo valor a la barra de progreso.
    if self.step &amp;gt;= 100:
        self.timer.stop()
        self.button.setText('Iniciar')
        self.step = 0
        return
    self.step = self.step + 1
    self.pbar.setValue(self.step)

def Accion(self):
    #Si el timer esta activo se detiene y se
    #le cambia el titulo al boton con Iniciar.
    if self.timer.isActive():
        self.timer.stop()
        self.button.setText('Iniciar')
    else:
        #Si no esta activo el timer, se inicia con valor de 100
        #se coloca el titulo detener al boton.
        self.timer.start(100, self)
        self.button.setText('Detener')
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;
*&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Tutorial de PyQt. checkbutton, pixmap, QFileDialog y Código QR. Parte 8.</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-checkbutton-pixmap-qfiledialog-y-codigo-qr-parte-8.html" rel="alternate"></link><published>2011-07-23T09:00:00-05:30</published><updated>2011-07-23T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-07-23:/tutorial-de-pyqt-checkbutton-pixmap-qfiledialog-y-codigo-qr-parte-8.html</id><summary type="html">&lt;p&gt;Este post trata de un formulario en PyQt que se ingresa los datos, una foto, los d&amp;iacute;as que desea por ejemplo apoyar en un evento y genera un c&amp;oacute;digo QR con dicha informaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Los widgets nuevos que se utilizar&amp;aacute;n son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QCheckButton: Permite crear botones check, se pueden seleccionar varios opciones …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Este post trata de un formulario en PyQt que se ingresa los datos, una foto, los d&amp;iacute;as que desea por ejemplo apoyar en un evento y genera un c&amp;oacute;digo QR con dicha informaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Los widgets nuevos que se utilizar&amp;aacute;n son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QCheckButton: Permite crear botones check, se pueden seleccionar varios opciones.&lt;/li&gt;
&lt;li&gt;QPixmap: Permite agregar una imagen a una etiqueta.&lt;/li&gt;
&lt;li&gt;QFileDialog: Abre una ventana de dialogo para abrir o salvar  un archivo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="modulo qrencode"&gt;modulo qrencode&lt;/h1&gt;
&lt;p&gt;from qrencode import encode&lt;/p&gt;
&lt;h1 id="se importa el modulo sys"&gt;Se importa el modulo sys&lt;/h1&gt;
&lt;p&gt;import sys &lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui y qtcore"&gt;De PyQt4 importar QtGui y QtCore&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui, QtCore&lt;/p&gt;
&lt;h1 id="import os"&gt;Import os&lt;/h1&gt;
&lt;p&gt;import os &lt;/p&gt;
&lt;p&gt;class App(QtGui.QWidget):
    def &lt;strong&gt;init&lt;/strong&gt;(self, parent=None):
        QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
        #Se define el tamagno y posicion de la ventana
        self.setGeometry(0, 50, 600, 400)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se le coloca un titulo a la ventana y se asocia un icono.
    self.setWindowTitle('Generacion de codigo QR')
    self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))

    #Se crea la etiqueta para la foto
    foto = QtGui.QLabel("Foto: ")
    self.imagen = QtGui.QLabel("")

    #Se crea el boton para cargar la foton
    cargar = QtGui.QPushButton("Cargar Foto",self)

    #Etiqueta nombre
    self.nombre = QtGui.QLabel('Nombre: ')
    #Entrada de datos del nombre
    self.nombreEdit = QtGui.QLineEdit()

    #Se crea la etiqueta y etrada de datos de la cedula        
    self.etiquetaCedula = QtGui.QLabel("Cedula")
    self.cedula = QtGui.QLineEdit()

    #Se crea la etiqueta y el widget para la fecha
    #de nacimiento        
    fechaEtiqueta = QtGui.QLabel("Fecha de Nacimiento")
    self.fecha = QtGui.QDateEdit(self)
    #Se define el formato dia/mes/agno
    self.fecha.setDisplayFormat("dd/MM/yyyy")
    #Se fija la fecha inicial a la fecha actual
    self.fecha.setDate(QtCore.QDate.currentDate())

    #Se define la etiqueta que pregunta por el sexo
    etiquetaSexo = QtGui.QLabel("Sexo:")
    #Se definen los botones de radio para masculino y femenino
    self.botonradio1 = QtGui.QRadioButton("&amp;amp;Masculino",self)
    self.botonradio2 = QtGui.QRadioButton("&amp;amp;Femenino",self)

    #Etiqueta ciudad.
    self.ciudadEtiqueta = QtGui.QLabel("Ciudad de Nacimiento:")
    #Se define el comboBox con las ciudades
    self.combo = QtGui.QComboBox(self)
    ciudades = ["Maracaibo",
    "Valencia","Maracay","Barquisimeto","Merida","Caracas",
    "San Cristobal","Barinas","El vigia","Ciudad Bolivar",
    "Puerto Ordaz","Coro","Puerto Cabello","Margarita"]
    for ciudad in ciudades:
        self.combo.addItem(ciudad)

    #Se crea la etiqueta de dia de la semana
    diasemana = QtGui.QLabel("Dia semana")
    #Se define los botones de check para los dias de la semana
    self.lunes = QtGui.QCheckBox("Lunes",self)
    self.martes = QtGui.QCheckBox("Martes",self)
    self.miercoles = QtGui.QCheckBox("Miercoles",self)
    self.jueves = QtGui.QCheckBox("Jueves",self)
    self.viernes = QtGui.QCheckBox("Viernes",self)

    #Se define el boton salir
    quit = QtGui.QPushButton('Salir', self)

    #Se define el boton procesar la informacion
    okButton = QtGui.QPushButton("Procesar",self)

    #Se crea la etiqueta que mostrara el codigo QR
    self.label = QtGui.QLabel(self)

    #Se define un timer
    self.timer = QtCore.QBasicTimer()
    self.step = 0

    #Se empaquetan los widgets en la ventana.
    grid = QtGui.QGridLayout()
    grid.setSpacing(10)
    grid.addWidget(foto,1,0)
    grid.addWidget(self.imagen,1,1)
    grid.addWidget(cargar,1,2)
    grid.addWidget(self.nombre, 2, 0)
    grid.addWidget(self.nombreEdit, 2, 1)
    grid.addWidget(etiquetaSexo,3,0)
    grid.addWidget(self.botonradio1,3,1)
    grid.addWidget(self.botonradio2,3,2)
    grid.addWidget(self.etiquetaCedula,4,0)
    grid.addWidget(self.cedula,4,1)
    grid.addWidget(fechaEtiqueta,5,0)
    grid.addWidget(self.fecha,5,1)
    grid.addWidget(self.ciudadEtiqueta,6,0)
    grid.addWidget(self.combo,6,1)
    grid.addWidget(diasemana,7,0)
    grid.addWidget(self.lunes,7,1)
    grid.addWidget(self.martes,7,2)
    grid.addWidget(self.miercoles,7,3)
    grid.addWidget(self.jueves,7,4)
    grid.addWidget(self.viernes,7,5)
    grid.addWidget(okButton, 8, 0)
    grid.addWidget(self.label,9,1)
    grid.addWidget(quit, 10, 1)
    self.setLayout(grid)

    #Se definen las segnales de los widgets.
    #boton salir, procesar y cargar foto
    self.connect(quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))
    self.connect(okButton,QtCore.SIGNAL('clicked()'),self.Procesar)
    self.connect(cargar, QtCore.SIGNAL('clicked()'), self.showDialog)


def showDialog(self):
    #Muestra una ventana de dialogo para abrir un archivo
    #guarda la ruta del archivo.
    self.filename = QtGui.QFileDialog.getOpenFileName(self, 'Open file',
                '/home')

    #Se define la imagen en la etiqueta
    pixmap = QtGui.QPixmap("%s" %self.filename)
    self.imagen.setPixmap(pixmap)



def Procesar(self):
    #Captura la informacion y genera el codigo QR

    #Define el resultado de los botones de radio
    if self.botonradio1.isChecked() == True:
        sexo = "Masculino"
    elif self.botonradio2.isChecked() == True:
        sexo = "Femenino"

    #Se procesa la informacion de los botones de check
    lista = {}
    dias = ("Lunes","Martes","Miercoles","Jueves","Viernes")
    lista["Lunes"] = self.lunes.isChecked()
    lista["Martes"] = self.martes.isChecked()
    lista["Miercoles"] = self.miercoles.isChecked()
    lista["Jueves"] = self.jueves.isChecked()
    lista["Viernes"] = self.viernes.isChecked()
    resultado = ""
    flag = 0
    for dia in lista.keys():
        for i in dias:
            if dia == i:
                if lista[dia] == True:
                    if flag == 0:
                        resultado = dia
                        flag = 1
                    elif flag == 1:
                        resultado = resultado + ",%s" %dia

    #Se le da formato a la informacion recabada para generar el codigo QR
    texto = """
    Nombre:%s\n
    Cedula: %s\n
    Fecha Nacimiento: %s\n
    Sexo: %s\n
    Foto: %s\n
    Dia de participacion: %s\n

    """ %(self.nombreEdit.text(),
        self.cedula.text(),
        self.fecha.textFromDateTime(self.fecha.dateTime()),
        sexo,
        self.filename,
        resultado)

    #Se verifica si el archivo del codigo qr no existe, si no se borra
    if os.path.isfile("./archivosalida.png"):
        remove("./archivosalida.png")

    #Se crea la imagen del codigo qr
    imagen = encode(texto)[2]
    #Se salva la imagen en un archivo.
    imagen.save("./archivosalida.png")

    #Se muestra la imagen en la etiqueta
    pixmap = QtGui.QPixmap("./archivosalida.png")
    self.label.setPixmap(pixmap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la aplicaci&amp;oacute;n al iniciarse:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyQt 8" src="./images/pyqt8-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente imagen muestra la ventana de dialogo para subir la foto:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyQt 8" src="./images/pyqt8-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente imagen muestra el formulario con los datos sin generar el c&amp;oacute;digo QR:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyQt 8" src="./images/pyqt8-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente imagen muestra la ventana con la informaci&amp;oacute;n ya procesada y con el c&amp;oacute;digo QR generado:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyQt 8" src="./images/pyqt8-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;Por &amp;uacute;ltimo se muestra la imagen de un celular con Android donde se proceso el c&amp;oacute;digo QR y muestra la informaci&amp;oacute;n del mismo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyQt 8" src="./images/pyqt8-5.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Creación de Código QR desde Python</title><link href="https://ecrespo.github.io/creacion-de-codigo-qr-desde-python.html" rel="alternate"></link><published>2011-07-20T09:00:00-05:30</published><updated>2011-07-20T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-07-20:/creacion-de-codigo-qr-desde-python.html</id><summary type="html">&lt;p&gt;En los art&amp;iacute;culos que he escrito sobre script en python para Android siempre he dejado una imagen que contiene una especie de c&amp;oacute;digo de barras pero en 2 dimensiones, este c&amp;oacute;digo se llama C&amp;oacute;digo QR (Quick Response Barcode), m&amp;aacute;s informaci&amp;oacute;n sobre est&amp;eacute; c&amp;oacute;digo lo pueden leer en &lt;a href="http://es.wikipedia.org/wiki/Codigo_QR"&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En los art&amp;iacute;culos que he escrito sobre script en python para Android siempre he dejado una imagen que contiene una especie de c&amp;oacute;digo de barras pero en 2 dimensiones, este c&amp;oacute;digo se llama C&amp;oacute;digo QR (Quick Response Barcode), m&amp;aacute;s informaci&amp;oacute;n sobre est&amp;eacute; c&amp;oacute;digo lo pueden leer en &lt;a href="http://es.wikipedia.org/wiki/Codigo_QR"&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En el art&amp;iacute;culo de como compartir script en Android hay un &lt;a href="https://www.seraph.to/compartir-scripts-para-android.html"&gt;enlace&lt;/a&gt; de una p&amp;aacute;gina que permite generar el c&amp;oacute;digo QR a partir de una informaci&amp;oacute;n dada.&lt;/p&gt;
&lt;p&gt;La idea es crear el c&amp;oacute;digo desde Linux y el programa que permite hacerlo se llama qrencode.&lt;/p&gt;
&lt;p&gt;Para instalarlo en Debian simplemente se ejecuta aptitude:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aptitude install qrencode&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El comando para generar un archivo con la imagen del c&amp;oacute;digo QR se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qrencode -o output.png 'Hola mundo!'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Este ejemplo genera un archivo png llamado output con el c&amp;oacute;digo QR de "Hola Mundo!"&lt;/p&gt;
&lt;p&gt;Tambi&amp;eacute;n existe un m&amp;oacute;dulo para python que permite generar c&amp;oacute;digo directamente, este paquete en Debian se llama python-qrencode, para instalarlo se ejecuta aptitude:&lt;/p&gt;
&lt;p&gt;```
aptitude install python-qrencode&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La p&amp;aacute;gina del proyecto python-qrencode se encuentra en github en este &lt;a href="https://github.com/Arachnid/pyqrencode"&gt;enlace&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;De este m&amp;oacute;dulo se usar&amp;aacute; la funci&amp;oacute;n encode, se le pasa un string como dato y devuelve una tupla con 3 valores, la versi&amp;oacute;n, tama&amp;ntilde;o de la imagen y la imagen.&lt;/p&gt;
&lt;p&gt;Est&amp;aacute; imagen es un objeto de Imagen, se puede salvar dicha imagen en un archivo.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de ejemplo del uso de python-qrencode se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="modulo qrencode"&gt;modulo qrencode&lt;/h1&gt;
&lt;p&gt;from qrencode import encode&lt;/p&gt;
&lt;h1 id="el texto a convertir en codigo qr"&gt;El texto a convertir en codigo QR&lt;/h1&gt;
&lt;p&gt;texto = """Esta es uan prueba de generacion de codigo QR\n
desde python usando el modulo qrencode."""&lt;/p&gt;
&lt;h1 id="se crea el codigo qr del texto,la funcion encode"&gt;Se crea el codigo QR del texto,la funcion encode&lt;/h1&gt;
&lt;h1 id="genera una tupla donde el ultimo elemento es un"&gt;genera una tupla donde el ultimo elemento es un&lt;/h1&gt;
&lt;h1 id="objeto imagen."&gt;objeto Imagen.&lt;/h1&gt;
&lt;p&gt;imagen = encode(texto)[2]&lt;/p&gt;
&lt;h1 id="se salva la imagen en el archivo"&gt;Se salva la imagen en el archivo&lt;/h1&gt;
&lt;h1 id="archivoprueba.png"&gt;archivoprueba.png&lt;/h1&gt;
&lt;p&gt;imagen.save("/home/ernesto/archivoprueba.png")
```&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Código QR"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Tutorial de PyQt. RadioButton. Parte 7.</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-radiobutton-parte-7.html" rel="alternate"></link><published>2011-07-13T09:00:00-05:30</published><updated>2011-07-13T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-07-13:/tutorial-de-pyqt-radiobutton-parte-7.html</id><summary type="html">&lt;p&gt;Este post explicar&amp;aacute; como usar los botones de radio en PyQt.&lt;/p&gt;
&lt;p&gt;La idea es que el usuario seleccione uno de las opciones presentadas en este caso se le pregunta el sexo; al darle clip con el rat&amp;oacute;n o presionar alt+f para femenino o alt+m para masculino el resultado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este post explicar&amp;aacute; como usar los botones de radio en PyQt.&lt;/p&gt;
&lt;p&gt;La idea es que el usuario seleccione uno de las opciones presentadas en este caso se le pregunta el sexo; al darle clip con el rat&amp;oacute;n o presionar alt+f para femenino o alt+m para masculino el resultado se muestre en una etiqueta autom&amp;aacute;ticamente. Se tiene un bot&amp;oacute;n para salir del programa.&lt;/p&gt;
&lt;p&gt;El widget nuevo en la continuaci&amp;oacute;n de estos tutoriales de PyQt es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QRadioButton : Crea la instancia de un widget RadioButton.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como est&amp;eacute; widget hereda del widget Button se puede usar la se&amp;ntilde;al clicked para capturar el momento de seleccionar una de las opciones.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo que muestra el programa se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo sys"&gt;Se importa el modulo sys&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui y qtcore."&gt;De PyQt4 importar QtGui y QtCore.&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui
from PyQt4 import QtCore&lt;/p&gt;
&lt;p&gt;class App(QtGui.QWidget):
    def &lt;strong&gt;init&lt;/strong&gt;(self,parent=None):
        QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
        #Se define el tamano de la ventana
        self.setGeometry(0, 50, 350, 250)
        #Se le coloca un titulo a la ventana y se asocia un icono.
        self.setWindowTitle('Prueba')
        self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se define la etiqueta donde se pregunta por el sexo.
    etiqueta = QtGui.QLabel("Sexo:")
    #Se define la etiqueta que muestra la palabra resultado.
    resultado = QtGui.QLabel("Resultado:")
    #Se define la etiqueta donde se mostrara la informacion
    #seleccionada del boton de radio
    self.texto = QtGui.QLabel("")

    #Se crea los botones de radio para seleccionar masculino o femenino.
    #Se define ahi el uso del alt+m y alt+f para seleccionar
    #un boton.
    self.botonradio1 = QtGui.QRadioButton("&amp;amp;Masculino",self)
    self.botonradio2 = QtGui.QRadioButton("&amp;amp;Femenino",self)

    #Se crea el boton para salir del programa
    quit = QtGui.QPushButton('Salir', self)

    #Empaquetamiento de los widgets en una cuadricula.
    grid = QtGui.QGridLayout()
    grid.setSpacing(10)
    #Se agrega los widgets de etiquetas,radiobuttons y
    #el boton salir
    grid.addWidget(etiqueta, 0, 0)
    grid.addWidget(self.botonradio1,0,1)
    grid.addWidget(self.botonradio2,0,3)
    grid.addWidget(resultado,2,0)
    grid.addWidget(self.texto,2,1)
    grid.addWidget(quit,3,0)
    self.setLayout(grid)

    #Se conecta la segnal con los 2 botones de radio y el boton para
    #salir del programa, se asocian a los metodos respectivos.
    self.connect(quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))
    self.connect(self.botonradio1,QtCore.SIGNAL('clicked()'),self.Mostrar1)
    self.connect(self.botonradio2,QtCore.SIGNAL('clicked()'),self.Mostrar2)

def Mostrar1(self):
    #Se muestra el resultado seleccionado
    self.texto.setText("Masculino")

def Mostrar2(self):
    #Se muestra el resultado seleccionado
    self.texto.setText("Femenino")
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la figura del programa iniciando:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Radio button - Inicio" src="./images/pyqt7-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado de darle clip al bot&amp;oacute;n de radio Masculino:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Radio button - Seleccionado radio button " src="./images/pyqt7-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado de presionar alt+f para seleccionar el bot&amp;oacute;n de radio para Femenino:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Radio button - Seleccionado radio button " src="./images/pyqt7-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;Noten que la informaci&amp;oacute;n a mostrar cambia al seleccionar uno de los botones de radio.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Tutorial de PyQt, crear un navegador web. Parte 6</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-crear-un-navegador-web-parte-6.html" rel="alternate"></link><published>2011-07-09T09:00:00-05:30</published><updated>2011-07-09T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-07-09:/tutorial-de-pyqt-crear-un-navegador-web-parte-6.html</id><summary type="html">&lt;p&gt;Continuando con los tutoriales de PyQt, ahora toca explicar como crear un navegador web.&lt;/p&gt;
&lt;p&gt;La idea es tener una ventana de entrada de datos donde se escribe el url a navegar, a su lado se tiene un bot&amp;oacute;n que ejecuta la navegaci&amp;oacute;n al url dado, luego abajo se tiene el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los tutoriales de PyQt, ahora toca explicar como crear un navegador web.&lt;/p&gt;
&lt;p&gt;La idea es tener una ventana de entrada de datos donde se escribe el url a navegar, a su lado se tiene un bot&amp;oacute;n que ejecuta la navegaci&amp;oacute;n al url dado, luego abajo se tiene el widget de navegaci&amp;oacute;n y por &amp;uacute;ltimo abajo se tiene un bot&amp;oacute;n de salir. Se puede navegar tambi&amp;eacute;n dando enter en el campo del url.&lt;/p&gt;
&lt;p&gt;El widget nuevo que se est&amp;aacute; usando es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QWebView: Permite crear una vista de navegaci&amp;oacute;n web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El c&amp;oacute;digo del programa se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo sys"&gt;Se importa el modulo sys&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui,qtcore y qtwebkit."&gt;De PyQt4 importar QtGui,QtCore y QtWebkit.&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui
from PyQt4 import QtCore
from PyQt4 import QtWebKit&lt;/p&gt;
&lt;p&gt;class App(QtGui.QWidget):
    def &lt;strong&gt;init&lt;/strong&gt;(self,parent=None):
        QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
        #Se define el tamano de la ventana
        # posicion en x,y, ancho y alto
        self.setGeometry(0, 50, 1024, 550)
        #Se le coloca un titulo a la ventana y se asocia un icono.
        self.setWindowTitle('Navegador')
        self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se crea una entrada de datos donde se pasa el url a navegar
    self.entradaUrl = QtGui.QLineEdit("http://www.debian.org.ve")
    #Se crea el boton para ir a una pagina web
    navegar = QtGui.QPushButton("Ir",self)
    #Se crea el boton salir
    quit = QtGui.QPushButton("Salir",self)
    #Se crea el widget donde se mostrara la pagina web
    self.web = QtWebKit.QWebView()
    #Se habilita el atributo de plugins
    self.web.settings().setAttribute(QtWebKit.QWebSettings.PluginsEnabled,True)
    #Se carga la pagina de debian venezuela al inicio
    self.web.load(QtCore.QUrl("http://www.debian.org.ve"))


    #Empaquetamiento de los widgets en una cuadricula.
    grid = QtGui.QGridLayout()
    grid.setSpacing(10)
    #Se agrega la entrada de datos
    grid.addWidget(self.entradaUrl, 1, 0)
    #Se agrega el boton navegar al lado de la
    #entrada de datos
    grid.addWidget(navegar,1,1)
    #Se agrega el widget web
    grid.addWidget(self.web,2,0)
    #Se agrega el boton salir
    grid.addWidget(quit,3,0)

    #Se define el layout pasando la grilla
    self.setLayout(grid)

    #Se define la asociacion de segnales:
    #Se define la segnal del boton quit, salir del programa
    self.connect(quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))
    #Se define la segnal del boton navegar, al darle clip se ejecuta el metodo navegar
    self.connect(navegar,QtCore.SIGNAL('clicked()'),self.navegar)
    #Se define la segnal de la entrada de datos
    #Al darle enter se ejecuta el metodo navegar
    self.connect(self.entradaUrl,QtCore.SIGNAL('returnPressed()'),self.navegar)


def navegar(self):
    #Navegar captura el texto de la entrada de datos
    #Y se carga la nueva pagina.
    url = self.entradaUrl.text()
    self.web.load(QtCore.QUrl("%s" %url))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la ventana del navegador al ejecutar el programa:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navegador web con PyQt - p&amp;aacute;gina www.debian.org" src="./images/pyqt6-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra que se escribe un url nuevo y se puede darle clip al bot&amp;oacute;n ir o darle enter a la entrada de datos:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navegador web con PyQt - p&amp;aacute;gina www.google.com" src="./images/pyqt6-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Manejo de Fecha y Hora con PyQt. Parte 5</title><link href="https://ecrespo.github.io/manejo-de-fecha-y-hora-con-pyqt-parte-5.html" rel="alternate"></link><published>2011-07-07T09:00:00-05:30</published><updated>2011-07-07T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-07-07:/manejo-de-fecha-y-hora-con-pyqt-parte-5.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se crear&amp;aacute; una ventana con 2 pesta&amp;ntilde;as, 2 botones, y una etiqueta; el primer bot&amp;oacute;n capturar&amp;aacute; le fecha o fecha y hora seg&amp;uacute;n la pesta&amp;ntilde;a seleccionada y lo presentar&amp;aacute; en la etiqueta, el otro bot&amp;oacute;n es para salir de la aplicaci&amp;oacute;n; en la primera pesta&amp;ntilde;a se muestra …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se crear&amp;aacute; una ventana con 2 pesta&amp;ntilde;as, 2 botones, y una etiqueta; el primer bot&amp;oacute;n capturar&amp;aacute; le fecha o fecha y hora seg&amp;uacute;n la pesta&amp;ntilde;a seleccionada y lo presentar&amp;aacute; en la etiqueta, el otro bot&amp;oacute;n es para salir de la aplicaci&amp;oacute;n; en la primera pesta&amp;ntilde;a se muestra el widget de fecha y en la segunda se muestra el widget de fecha y hora.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute;n los siguientes widgets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QtGui.QTabWidget: Permite crear pesta&amp;ntilde;as.&lt;/li&gt;
&lt;li&gt;QtGui.QDateEdit: Permite crear el widget incremental o decremental de la fecha.&lt;/li&gt;
&lt;li&gt;QtGui.QDateTimeEdit: Permite crear el widget incremental o decremental de la fecha y hora.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como se tiene un solo bot&amp;oacute;n para capturar la fecha para ambas pesta&amp;ntilde;as es necesario capturar el identificador de cada pesta&amp;ntilde;a para as&amp;iacute; dependiendo del caso generar el resultado de la fecha u fecha y hora.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo sys"&gt;Se importa el modulo sys&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui y qtcore"&gt;De PyQt4 importar QtGui y QtCore&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui
from PyQt4 import QtCore&lt;/p&gt;
&lt;p&gt;class App(QtGui.QWidget):
    def &lt;strong&gt;init&lt;/strong&gt;(self,parent=None):
        QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
        #Se define el tamano de la ventana
        self.setGeometry(500, 500, 350, 250)
        #Se le coloca un titulo a la ventana y se asocia un icono.
        self.setWindowTitle('Fecha y Hora')
        self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se crea la instancia del widget de la fecha
    #Se define el formato de la fecha
    #Se le asigna al widget la fecha actual.
    self.fecha = QtGui.QDateEdit(self)
    self.fecha.setDisplayFormat("dd/MM/yyyy")
    self.fecha.setDate(QtCore.QDate.currentDate())



    #Se crea la instancia del widget de la fecha y hora.
    #Se le da formato a la fecha y hora.
    #Se le asigna la fecha y hora actual al widget.
    self.fechayhora = QtGui.QDateTimeEdit(self)
    self.fechayhora.setDisplayFormat("dd/MM/yyyy HH:mm:ss")
    self.fechayhora.setDateTime(QtCore.QDateTime.currentDateTime())

    #Se crea el boton que captura la fecha u hora
    captura1 = QtGui.QPushButton("Captura",self)
    #Se crea el boton para salir de la aplicacion
    quit = QtGui.QPushButton('Salir', self)

    #Se crea la etiqueta donde se muestra la fecha u hora
    self.etiqueta = QtGui.QLabel("Fecha:")

    #Se crea la instancia del widget pestagna
    #Se define que no se puede cerrar las pestagnas
    self.tab = QtGui.QTabWidget(self)
    self.tab.setTabsClosable(False)

    #Se agrega a la 1era pestagna el widget de la fecha
    self.tab.addTab(self.fecha,"Fecha")
    #Se agrega a la 2da pestagna el widget de la fecha y hora
    self.tab.addTab(self.fechayhora,"Fecha y Hora")


    #Empaquetamiento de los widgets en una cuadricula.
    grid = QtGui.QGridLayout()
    grid.setSpacing(10)
    #Se agrega el widget pestagna, boton de captura,
    #etiqueta y boton de salida.
    grid.addWidget(self.tab, 1, 0)
    grid.addWidget(captura1,2,0)
    grid.addWidget(self.etiqueta, 3, 0)
    grid.addWidget(quit,4,0)
    self.setLayout(grid)

    #Se conecta la segnal del boton captura con el evento clicked al
    #metodo mostrarIndice.
    self.connect(captura1,QtCore.SIGNAL('clicked()'),self.mostrarFechayHora)
    #Se asocia ala segnal del boton quit al evento clicked y se ejecuta la
    #salida del programa.
    self.connect(quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))


def mostrarFechayHora(self):
    #Captura el indice de la pestagna para mostrar
    #la informacion de la fecha u fecha y hora.
    if self.tab.currentIndex() == 0:
        #Se presenta en la etiqueta la fecha con el
        #formato dia/mes/agno.
        #se toma la informacion de la funcion date del widget
        #este devuelve una fecha y se captura el dia, mes y agno.
        self.etiqueta.setText("Fecha: %s/%s/%s"
                              %(self.fecha.date().day(),
                                self.fecha.date().month(),
                                self.fecha.date().year()) )

    else:
        #Se presenta en la etiqueta la informacion de la fecha y hora.
        #con el formato dia/mes/agno hora:minutos:segundos.
        #Se utiliza el metodo textFromDateTime que devuelve un string
        #pasandole una fecha y hora 
        self.etiqueta.setText("Fecha y Hora: %s"
                              %self.fechayhora.textFromDateTime(self.fechayhora.dateTime()))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;La figura muestra el programa al iniciarse:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fecha y hora" src="./images/pyqt5-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra que se modifico la fecha con los botones de incrementar o decrementar y luego se presion&amp;oacute; al bot&amp;oacute;n captura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fecha y hora" src="./images/pyqt5-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra cuando se selecciona la segunda pesta&amp;ntilde;a:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fecha y hora" src="./images/pyqt5-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;La &amp;uacute;ltima figura muestra que se modifico la fecha y la hora con los botones incrementales o decrementales y luego se presion&amp;oacute; al bot&amp;oacute;n captura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fecha y hora" src="./images/pyqt5-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry><entry><title>Tutorial de PyQt (calendario). Parte 4</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-calendario-parte-4.html" rel="alternate"></link><published>2011-07-04T09:00:00-05:30</published><updated>2011-07-04T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-07-04:/tutorial-de-pyqt-calendario-parte-4.html</id><summary type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre PyQt, ahora explicare como usar un calendario y capturar la selecci&amp;oacute;n de una fecha dada, la fecha seleccionada se muestra en una etiqueta de forma din&amp;aacute;mica y al final se agrega un bot&amp;oacute;n de salir.&lt;/p&gt;
&lt;p&gt;Basicamente se usar&amp;aacute; QtGui.QCalendarWidget usando con una cuadricula con …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre PyQt, ahora explicare como usar un calendario y capturar la selecci&amp;oacute;n de una fecha dada, la fecha seleccionada se muestra en una etiqueta de forma din&amp;aacute;mica y al final se agrega un bot&amp;oacute;n de salir.&lt;/p&gt;
&lt;p&gt;Basicamente se usar&amp;aacute; QtGui.QCalendarWidget usando con una cuadricula con el m&amp;eacute;todo setGridVisible que tiene dos opciones True o False.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo del programa:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo sys"&gt;Se importa el modulo sys&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui y qtcore"&gt;De PyQt4 importar QtGui y QtCore&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui
from PyQt4 import QtCore&lt;/p&gt;
&lt;p&gt;class App(QtGui.QWidget):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self, parent=None):
    QtGui.QWidget.__init__(self, parent)
    #Se define el tamano de la ventana
    self.setGeometry(400, 400, 250, 150)
    #Se le coloca un titulo a la ventana y se asocia un icono.
    self.setWindowTitle('Calendario')
    self.setWindowIcon(QtGui.QIcon('./openlogo-50.png'))

    #Define el calendario en una ventana
    self.cal = QtGui.QCalendarWidget(self)
    #Se define una cuadricula al calendario
    self.cal.setGridVisible(True)
    #Se define una etiqueta donde se mostrara
    #La fecha seleccionada
    self.etiqueta = QtGui.QLabel(self)

    #Se captura la fecha y se muestra en la etiqueta
    self.fecha = self.cal.selectedDate()
    self.etiqueta.setText(str(self.fecha.toPyDate()))

    #Se define el boton para salir

    quit = QtGui.QPushButton('Salir', self)
    #Se define como empaquetar los widgets.
    #En este caso se usa grilla.
    #Se crea la instancia
    grid = QtGui.QGridLayout()
    grid.setSpacing(10)

    grid.addWidget(self.cal, 1, 0)
    grid.addWidget(self.etiqueta, 2, 0)

    grid.addWidget(quit,3,0)
    #Se define el layout pasando la grilla
    self.setLayout(grid)

    self.connect(quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))
    self.connect(self.cal, QtCore.SIGNAL('selectionChanged()'), 
        self.mostrarFecha)

def mostrarFecha(self):
    self.fecha = self.cal.selectedDate()
    self.etiqueta.setText(str(self.fecha.toPyDate()))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = App()  &lt;br/&gt;
   #Se muestra la aplicacion  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicacion  &lt;br/&gt;
   sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;La figura muestra el programa en funcionamiento:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyQt - Calendario" src="./images/pyqt-calendario.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Debian"></category><category term="Python"></category><category term="PyQt"></category></entry></feed>