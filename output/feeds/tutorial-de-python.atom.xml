<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Página de Seraph - Tutorial de Python</title><link href="https://ecrespo.github.io/" rel="alternate"></link><link href="https://ecrespo.github.io/feeds/tutorial-de-python.atom.xml" rel="self"></link><id>https://ecrespo.github.io/</id><updated>2019-06-08T19:33:00-04:00</updated><subtitle>Data Scientist </subtitle><entry><title>Validando un API rest asíncrono con Cerberus</title><link href="https://ecrespo.github.io/apirest-aiohttp-cerberus-2019.html" rel="alternate"></link><published>2019-06-08T19:33:00-04:00</published><updated>2019-06-08T19:33:00-04:00</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2019-06-08:/apirest-aiohttp-cerberus-2019.html</id><summary type="html">&lt;p&gt;Se creará un API rest asíncrono (usando aiohttp), donde se valida la entrada con cerberus&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se mostrar&amp;aacute; como crear un API rest asincrono usando aiohttp, se usar&amp;aacute; un script para acceder a la base de datos NoSQL RethinkDB de manera as&amp;iacute;ncrona,
y 2 formas de validar la entrada de datos del API, la primera evaluando cada variable, la segunda se usar&amp;aacute; cerberus donde se tiene un esquema de la entrada de datos y
por &amp;uacute;ltimo la tercera, usar&amp;aacute; cerberus pero el esquema estar&amp;aacute; guardado en rethinkdb.&lt;/p&gt;
&lt;p&gt;El repositorio del c&amp;oacute;digo completo de este tutorial se encuentra en &lt;a href="https://gitlab.com/ecrespo/async-api-rest-example/tree/master"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo &lt;a href="https://www.ecalamia.com/blog/data-validation-robust-apis/"&gt;Using Data Validation for Robust APIs&lt;/a&gt; y en el
art&amp;iacute;culo &lt;a href="https://blog.apcelent.com/create-rest-api-using-aiohttp.html"&gt;How to create REST API using aiohttp&lt;/a&gt;, donde se explica como hacer un API rest sincr&amp;oacute;nico con aiohttp.&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n de cerberus la pueden ver en el siguiente &lt;a href="https://cerberus-sanhe.readthedocs.io/usage.html"&gt;cerberus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se tiene la siguiente estructura de directorios y archivos del API rest:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async-api-rest-example
├── app.py
├── README.md
├── resources
│&amp;nbsp;&amp;nbsp; ├── api_resources.py
│&amp;nbsp;&amp;nbsp; ├── home.py
│&amp;nbsp;&amp;nbsp; ├── __init__.py
│&amp;nbsp;&amp;nbsp; └── rethink_async.py
└── run.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Descripci&amp;oacute;n de los archivos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app.py: Se definen las rutas de los endpoint del API rest.&lt;/li&gt;
&lt;li&gt;run.py: Script que permite correr el API rest.&lt;/li&gt;
&lt;li&gt;resources/rethin_async.py: M&amp;oacute;dulo que permite acceder de manera as&amp;iacute;ncrona a rethinkdb.&lt;/li&gt;
&lt;li&gt;resources/home.py: P&amp;aacute;gina de inicio del API rest.&lt;/li&gt;
&lt;li&gt;resources/api_resources.py: Donde se define los m&amp;eacute;todos HTTP del API rest.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="script run.py"&gt;Script run.py&lt;/h3&gt;
&lt;p&gt;Este script permite iniciar el API rest, a continuaci&amp;oacute;n el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python3_1"&gt;!/usr/bin/env python3&lt;/h1&gt;
&lt;h1 id="se importa aiohttp"&gt;Se importa aiohttp&lt;/h1&gt;
&lt;p&gt;from aiohttp import web&lt;/p&gt;
&lt;h1 id="se importa las rutas de los endpoint"&gt;Se importa las rutas de los endpoint&lt;/h1&gt;
&lt;p&gt;from app import setup_routes&lt;/p&gt;
&lt;p&gt;async def init_app():
    #Se instancia la aplicaci&amp;oacute;n
    app = web.Application()
    #A la aplicaci&amp;oacute;n se le pasa las rutas
    setup_routes(app)
    #Se retorna la aplicaci&amp;oacute;n
    return app&lt;/p&gt;
&lt;p&gt;def main():
    #Se define la direcci&amp;oacute;n del host, el puerto y se corre la Ap en dicha IP y puerto
    host = '0.0.0.0'
    port = 5000
    app = init_app()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web.run_app(app,host=host, port=port)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3 id="script app.py"&gt;Script app.py&lt;/h3&gt;
&lt;p&gt;Este script define las rutas y URLs de los endpoint del API rest. A continuaci&amp;oacute;n el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="se importa los recursos del api rest y el home ._1"&gt;Se importa los recursos del api rest y el home .&lt;/h1&gt;
&lt;p&gt;from resources.api_resources import Student
from resources.home import getIndex&lt;/p&gt;
&lt;p&gt;def setup_routes(app):
    student = Student()
    #Se tiene 3 endpoints, el primero validaci&amp;oacute;n cl&amp;aacute;sica,
    # el segundo validando con cerberus, y el 3ero con cerberus
    #pero guardando el esquema de validaci&amp;oacute;n en una base de datos
    app.router.add_post('/api/v1/student1',student.getData1)
    app.router.add_post('/api/v1/student2',student.getData2)
    app.router.add_post('/api/v1/student3',student.getData3)
    #Por seguridad no se permite ingresar a la raiz del API rest
    app.router.add_get('/api/v1/', getIndex)
    app.router.add_get('/', getIndex)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3 id="script rethink_async.py"&gt;Script rethink_async.py&lt;/h3&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python3_3"&gt;!/usr/bin/env python3&lt;/h1&gt;
&lt;p&gt;import rethinkdb as r
import asyncio
from datetime import datetime&lt;/p&gt;
&lt;p&gt;r.set_loop_type("asyncio")&lt;/p&gt;
&lt;p&gt;async def createDB(server,port,database):
    """
    Create DB to database server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to create

"""
conn = await r.connect(server, port)
if database not in await r.db_list().run(conn):
    return await r.db_create(database).run(conn)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def createTable(server,port,database,table):
    """
    Create Table in database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to connect
"""
conn = await r.connect(server, port)
return await r.db(database).table_create(table).run(conn)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def listdb(server,port):
    """
    List all database in database server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
"""
conn = await r.connect(server, port)
return await r.db_list(conn)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def listtables(server,port,database):
    """
    Lista tables from database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to list tables
"""
conn = await r.connect(server, port)
return await r.db(database).table_list().run(conn)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def insert(server,port,database,table,data):
    """
    Insert dictionary  in table.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to connect
table: table to insert Dictionary
data: Dictionary data to insert
"""
conn = await r.connect(server, port)
result = await r.db(database).table(table).insert(data).run(conn)
await conn.close()
return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def getAll(server,port,database,table,pattern=None):
    """
    Get All documents from pattern search&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to connect
table: table name to search
pattern: Dictionary with pattern search
"""
conn = await r.connect(server, port)
if pattern == None:
    cursor = await r.db(database).table(table).run(conn)
else:
    cursor = await r.db(database).table(table).filter(pattern).run(conn)
elements = list()

while (await cursor.fetch_next()):
    item = await cursor.next()
    elements.append(item)

await conn.close()

return elements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def getFirst(server, port, database, table, pattern = None):
    """
    Get first document from pattern search&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to connect
table: table name to search
pattern: Dictionary with pattern search
"""
conn = await r.connect(server, port)
if pattern == None:
    cursor = await r.db(database).table(table).run(conn)
else:
    cursor = await  r.db(database).table(table).filter(pattern).run(conn)
elements = list()

while (await  cursor.fetch_next()):
    item = await cursor.next()
    elements.append(item)
    break
await conn.close()
return elements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def delete(server,port,database,table,pattern):
    """
    Delete a  document from pattern search&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to connect
table: table name to search
pattern: Dictionary with pattern search
"""
conn = await r.connect(server, port)
result =  await r.db(database).table(table).filter(pattern).delete().run(conn)
await conn.close()
return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async def update(server,port,database,table,data,pattern=None):
    """
    Update a document from pattern search&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
server: IP server to connect
port: Port server to connect
database: Database name to connect
table: table name to search
pattern: Dictionary with pattern search
"""
conn = await r.connect(server, port)
if (type(data) == type(dict())):
    if pattern == None :
        result = await r.db(database).table(table).update(data).run(conn)
        await conn.close()
        return result
    else:
        result =  await r.db(database).table(table).filter(pattern).update(data).run(conn)
        await conn.close()
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3 id="script api_resouces.py"&gt;Script api_resouces.py&lt;/h3&gt;
&lt;p&gt;En el script se tienen 3 m&amp;eacute;todos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getData1: Este m&amp;eacute;todo v&amp;aacute;lida cada una de las entrada de datos.&lt;/li&gt;
&lt;li&gt;getData2: Este m&amp;eacute;todo v&amp;aacute;lida la entrada de datos con un esquema validando con cerberus.&lt;/li&gt;
&lt;li&gt;getData3: Este m&amp;eacute;todo vuelve a usar cerberus pero ahora tomando el esquema a validar usando rethinkdb.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;import json
from aiohttp import web
from cerberus import Validator
import rethinkdb as r&lt;/p&gt;
&lt;p&gt;from .rethink_async import *&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt; = '0.0.1'&lt;/p&gt;
&lt;p&gt;student_schema = {
    'uid': {
        'required': True,
        'type': 'integer',
    },
    'age': {
        'required': True,
        'type': 'integer',
        'min': 18,
        'max': 35,
    },
    'name': {
        'required': True,
        'type': 'string',
        'maxlength': 50,
    },
    'grade': {
        'required': False,
        'type': 'string',
        'allowed': ['A', 'B', 'C'],
    }
}&lt;/p&gt;
&lt;p&gt;class Student(object):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self):
    pass

async def getData1(self,request):

    #Se convierte el json a un diccionario

    try:
        data = json.loads(await request.text())
    except json.JSONDecodeError:
        response_obj = {'status': 'failed', 'reason': "Ill-formed JSON"}
        return web.Response(text=json.dumps(response_obj), status=205)

    #Se valida los datos de entrada
    try:
        uid = int(data['uid'])
    except (KeyError, ValueError):
        response_obj = {'status': 'failed', 'reason': "Expecting uid:int"}
        return web.Response(text=json.dumps(response_obj), status=205)

    try:
        age = int(data['age'])
        if not 18 &amp;lt; age &amp;lt; 35:
            raise ValueError('Bad age')
    except (KeyError, ValueError):
        response_obj = {'status': 'failed', 'reason': "Expecting age:int within the range [18:35]"}
        return web.Response(text=json.dumps(response_obj), status=205)

    try:
        name = str(data['name'])
        if len(name) &amp;gt; 50:
            raise ValueError('Max limit 50')
    except (KeyError, ValueError):
        response_obj = {'status': 'failed', 'reason': "Expecting name:str within the range [0:50]"}
        return web.Response(text=json.dumps(response_obj), status=205)

    try:
        grade = data.get('grade')
        if grade is None:
            grade = 'A'
        if grade not in ('A', 'B', 'C'):
            response_obj = {'status': 'failed', 'reason': "A, B or C expected"}
            return web.Response(text=json.dumps(response_obj), status=205)
    except (KeyError, ValueError):
        response_obj = {'status': 'failed', 'reason': "Expecting grade:str A, B or C expected"}
        return web.Response(text=json.dumps(response_obj), status=205)

    #Luego de validar se construye el diccionario de salida de datos como json

    data_output = dict()
    data_output['uid'] = data['uid']
    data_output['age'] = data['age']
    data_output['name'] = data['name']
    data_output['grade'] = data.get('grade', 'A')

    response_obj = {
        'status': 'success',
        'data': data_output
    }
    return web.Response(text=json.dumps(response_obj), status=200, content_type='application/json')



async def getData2(self,request):

    #Se convierte el json del post en un diccionario
    try:
        data = json.loads(await request.text())
    except json.JSONDecodeError:
        response_obj = {'status': 'failed', 'reason': "Ill-formed JSON"}
        return web.Response(text=json.dumps(response_obj), status=205)

    #Con la variable que contiene el esquema se realiza la validaci&amp;oacute;n del json
    student_validator = Validator(student_schema)
    if not student_validator.validate(data):
        msg = student_validator.errors
        response_obj = {'status': 'failed', 'reason': msg}
        return web.Response(text=json.dumps(response_obj), status=205)

    #Se construye el diccionario de la salida de los datos v&amp;iacute;a json
    data_output = dict()
    data_output['uid'] = data['uid']
    data_output['age'] = data['age']
    data_output['name'] = data['name']
    data_output['grade'] = data.get('grade', 'A')

    response_obj = {
        'status': 'success',
        'data': data_output
    }
    return web.Response(text=json.dumps(response_obj), status=200, content_type='application/json')


async def getData3(self,request):

    #Se convierte el json en un diccionario
    try:
        data = json.loads(await request.text())
    except json.JSONDecodeError:
        response_obj = {'status': 'failed', 'reason': "Ill-formed JSON"}
        return web.Response(text=json.dumps(response_obj), status=205)

    #Si yo se, no deber&amp;iacute;a tener  la configuraci&amp;oacute;n de la base de datos ac&amp;aacute;,
    #pero era para no alargar el c&amp;oacute;digo de ejemplo
    #Se definen el servidor, puerto, base de datos, la tabla y el patr&amp;oacute;n de busqueda
    server = "localhost"
    port = 28015
    db = "student"
    table = "student_schema"
    pattern = {"endpoint": "student3"}

    #Se realiza la consulta a rethinkdb de manera asincrona
    student_schemadb = await getFirst(server, port, db, table, pattern)

    #Se quitan del diccionario el id y el endpoint a fin de realizar la evaluaci&amp;oacute;n del esquema
    student_schema = {item: student_schemadb[0][item] for item in list(student_schemadb[0].keys()) if item != 'id'}
    student_schema = {item: student_schema[item] for item in list(student_schema.keys()) if item != 'endpoint'}

    #Se valida el esquema con los datos suministrados v&amp;iacute;a post
    student_validator = Validator(student_schema)
    if not student_validator.validate(data):
        msg = student_validator.errors
        response_obj = {'status': 'failed', 'reason': msg}
        return web.Response(text=json.dumps(response_obj), status=205)

    #Se toman los datos y se colocan en el diccionario para el json de salida
    data_output = dict()
    data_output['uid'] = data['uid']
    data_output['age'] = data['age']
    data_output['name'] = data['name']
    data_output['grade'] = data.get('grade', 'A')

    response_obj = {
        'status': 'success',
        'data': data_output
    }
    return web.Response(text=json.dumps(response_obj), status=200, content_type='application/json')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3 id="base de datos rethinkdb con el esquema para cerberus"&gt;Base de datos rethinkdb con el esquema para cerberus&lt;/h3&gt;
&lt;p&gt;Para que el m&amp;eacute;todo getData3 funcione es necesario tener almacenado en la base de datos rethinkdb el esquema.&lt;/p&gt;
&lt;p&gt;El proceso de instalaci&amp;oacute;n de rethinkDB v&amp;iacute;a docker, se deja en el siguiente &lt;a href="https://platzi.com/blog/como-instalar-rethinkdb-docker/"&gt;art&amp;iacute;culo de platzi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para insertar los datos se ejecuta en el dashboard de rethinkDB (http://localhost:8080) el siguiente comando:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;r.db("student").table("student_schema").insert({id:1,endpoint: 'student3',uid: {
        'required': true,
        'type': 'integer'},
    age: {
        'required': true,
        'type': 'integer',
        'min': 18,
        'max': 35
    },
    name: {
        'required': true,
        'type': 'string',
        'maxlength': 50
    },
    grade: {
        'required': false,
        'type': 'string',
        'allowed': ['A', 'B', 'C']
  }})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;De esa forma se inserta los datos en la tabla.&lt;/p&gt;
&lt;p&gt;Para consultar la tabla v&amp;iacute;a dashboard se ejecuta:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;r.db("student").table("student_schema")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la tabla:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tabla esquema" src="./images/2019-apirest-cerberus-5.png"/&gt;&lt;/p&gt;
&lt;h3 id="iniciar el api rest."&gt;Iniciar el API rest.&lt;/h3&gt;
&lt;p&gt;Para iniciar el API rest se tiene que tener instalado la librer&amp;iacute;a rethinkdb y aiohttp:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install rethinkdb aiohttp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego de instalada se ejecuta el script run.py:&lt;/p&gt;
&lt;p&gt;```
python run.py&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Si se tiene la siguiente salida el API rest est&amp;aacute; corriendo sin problemas:&lt;/p&gt;
&lt;p&gt;```
======== Running on http://0.0.0.0:5000 ========
(Press CTRL+C to quit)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3 id="consultas al api rest"&gt;Consultas al API rest&lt;/h3&gt;
&lt;p&gt;Para consultar el API rest se puede usar insomia o postman, ambos son clientes API rest.&lt;/p&gt;
&lt;p&gt;Se tienen 3 endpoint todos v&amp;iacute;a m&amp;eacute;todo post que se le pasar&amp;aacute; un json como el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "uid": 42,
  "age": 25,
  "name": "John Doe",
  "grade": "A"
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Los urls son los siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://localhost:5000/api/v1/student1 : Usa el m&amp;eacute;todo getData1.&lt;/li&gt;
&lt;li&gt;http://localhost:5000/api/v1/student2 : Usa el m&amp;eacute;todo getData2.&lt;/li&gt;
&lt;li&gt;http://localhost:5000/api/v1/student3 : Usa el m&amp;eacute;todo getData3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Primer endpoint:&lt;/p&gt;
&lt;p&gt;Se realiza la consulta con el json mostrado anteriormente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consulta v&amp;aacute;lida" src="./images/2019-apirest-cerberus-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Ahora se modifica por ejemplo la variable grade a X:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consulta inv&amp;aacute;lida" src="./images/2019-apirest-cerberus-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;En este caso el valor X para la variable grade no es v&amp;aacute;lido.&lt;/p&gt;
&lt;p&gt;Segundo endpoint:&lt;/p&gt;
&lt;p&gt;En este caso se usa cerberus y la variable que contiene el esquema para validar:&lt;/p&gt;
&lt;p&gt;Se realiza la consulta con el json original:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consulta v&amp;aacute;lida" src="./images/2019-apirest-cerberus-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;Ahora se realiza la consulta modificando la variable grade con el valor de Z:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consulta inv&amp;aacute;lida" src="./images/2019-apirest-cerberus-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;El mensaje es m&amp;aacute;s gen&amp;eacute;rico no es el que se defini&amp;oacute; en el primer m&amp;eacute;todo.&lt;/p&gt;
&lt;p&gt;Tercer endpoint:&lt;/p&gt;
&lt;p&gt;Ac&amp;aacute; no se ver&amp;aacute;n cambios significativos en la consulta, lo interesante es que, al tener muchos endpoint con distintas entradas de datos,
lo mejor es usar una base de datos donde se tenga almacenada cada esquema por endpoint.&lt;/p&gt;
&lt;p&gt;As&amp;iacute; que el resultado ser&amp;iacute;a el mismo que los del segundo endpoint.&lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="Python"></category><category term="aiohttp"></category><category term="Ubuntu"></category><category term="API rest"></category><category term="asincrono"></category><category term="Cerberus"></category></entry><entry><title>Cómo usar el API de wikipedia con Python</title><link href="https://ecrespo.github.io/python-wikipedia-2019.html" rel="alternate"></link><published>2019-06-08T11:33:00-04:00</published><updated>2019-06-08T11:33:00-04:00</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2019-06-08:/python-wikipedia-2019.html</id><summary type="html">&lt;p&gt;Uso de API de Wikipedia con Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;Retomando la escritura de art&amp;iacute;culos, ahora usando pelican y github pages.&lt;/p&gt;
&lt;p&gt;Hoy se tocar&amp;aacute; el tema de como acceder a la Wikipedia v&amp;iacute;a su API desde Python.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa del art&amp;iacute;culo de Stack Abuse &lt;a href="https://stackabuse.com/getting-started-with-pythons-wikipedia-api/"&gt;Getting Started with Python's Wikipedia API&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="instalacion y prueba del api de wikipedia"&gt;Instalaci&amp;oacute;n y prueba del API de Wikipedia&lt;/h3&gt;
&lt;p&gt;Lo primero que se tiene que hacer es realizar la instalaci&amp;oacute;n de la librer&amp;iacute;a de wikipedia para Python:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install wikipedia&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para probar que funciona el API, desde la consola de python se importa wikipedia:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
import wikipedia&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="consultas al api"&gt;Consultas al API&lt;/h3&gt;
&lt;p&gt;Por defecto el API de Wikipedia realiza las busquedas en ingl&amp;eacute;s.&lt;/p&gt;
&lt;p&gt;Para empezar, se puede realizar una busqueda de una palabra, por ejemplo Venezuela:&lt;/p&gt;
&lt;p&gt;```python
print(wikipedia.search("Venezuela"))
['Venezuela', 'Venezuelans', 'Economy of Venezuela', 'Caracas', 'Venezuela national football team', 'President of Venezuela', 'Crisis in Venezuela', 'Mestizos in Venezuela', 'List of Presidents of Venezuela', 'Crime in Venezuela']&lt;/p&gt;
&lt;p&gt;```
Devuelve una lista con una serie de palabras o frases sobre Venezuela.&lt;/p&gt;
&lt;p&gt;Se puede limitar el resultado de la busqueda a por ejemplo 3:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.search("Venezuela", results=3))
['Venezuela', 'Venezuelans', 'Economy of Venezuela']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ahora se puede buscar sobre Linux:
&lt;code&gt;python
print(wikipedia.search("Linux"))
['Linux', 'Linux kernel', 'Linux distribution', 'List of Linux distributions', 'Kali Linux', 'Astra Linux', 'Linux Mint', 'Red Hat Enterprise Linux', 'Ubuntu', 'Arch Linux']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Existe el m&amp;eacute;todo suggest que ayuda a la busqueda si colocamos mal la palabra de busqueda, por ejemplo, se puede buscar "Simon Boliva" y m&amp;eacute;todo devolver&amp;aacute; el nombre correcto "Sim&amp;oacute;n Bolivar":&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print(wikipedia.suggest("Simon Boliva"))
simon bolivar
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id="extraer un resumen de un articulo de wikipedia"&gt;Extraer un resumen de un art&amp;iacute;culo de wikipedia&lt;/h3&gt;
&lt;p&gt;Para extraer un resumen de un art&amp;iacute;culo se usa el m&amp;eacute;todo summary:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.summary("Debian"))  
Debian () is a Unix-like operating system consisting entirely of free software. Ian Murdock founded the Debian Project on August 16, 1993. Debian 0.01 was released on September 15, 1993, and the first stable version, 1.1, was released on June 17, 1996. The Debian Stable branch is the most popular edition for personal computers and network servers, and is used as the basis for many other Linux distributions.
Debian is one of the earliest operating systems based on the Linux kernel. The project is coordinated over the Internet by a team of volunteers guided by the Debian Project Leader and three foundational documents: the Debian Social Contract, the Debian Constitution, and the Debian Free Software Guidelines. New distributions are updated continually, and the next candidate is released after a time-based freeze.
Debian has been developed openly and distributed freely according to the principles of the GNU Project. Because of this, the Free Software Foundation sponsored the project from November 1994 to November 1995. The popular Linux operating system Ubuntu was also released based on Debian. When the sponsorship ended, the Debian Project formed the nonprofit Software in the Public Interest to continue financially supporting development.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se puede delimitar la cantidad de texto que se muestre con la opci&amp;oacute;n sentences, que en este caso lo colocaremos en 3:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.summary("Debian", sentences=3))  
Debian () is a Unix-like operating system consisting entirely of free software. Ian Murdock founded the Debian Project on August 16, 1993. Debian 0.01 was released on September 15, 1993, and the first stable version, 1.1, was released on June 17, 1996.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Noten que el contenido del art&amp;iacute;culo est&amp;aacute; en Ingl&amp;eacute;s, si se quiere traer la informaci&amp;oacute;n en otro idioma se cambia la configuraci&amp;oacute;n del API de la siguiente forma:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
wikipedia.set_lang("es")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ahora se vuelve a realizar la consulta anterior:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.summary("Debian", sentences=3))
Debian o Proyecto Debian,[1]​ (en ingl&amp;eacute;s, Debian Project) [2]​ es una comunidad conformada por desarrolladores y usuarios, que mantiene un sistema operativo GNU basado en software libre. El sistema se encuentra precompilado, empaquetado y en formato deb para m&amp;uacute;ltiples arquitecturas de computador y para varios n&amp;uacute;cleos.
El proyecto Debian fue anunciado inicialmente 1993 por Ian Murdock.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para listar los idiomas que se soporta se ejecuta el m&amp;eacute;todo languages(), este devuelve un diccionario con todos los lenguajes soportados en el API:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.languages())
{'aa': 'Qaf&amp;aacute;r af', 'ab': 'Аҧсшәа', 'abs': 'bahasa ambon', 'ace': 'Ac&amp;egrave;h', 'ady': 'адыгабзэ', 'ady-cyrl': 'адыгабзэ', 'aeb': 'تونسي/T&amp;ucirc;ns&amp;icirc;', 'aeb-arab': 'تونسي', 'aeb-latn': 'T&amp;ucirc;ns&amp;icirc;', 'af': 'Afrikaans', 'ak': 'Akan', 'aln': 'Geg&amp;euml;', 'als': 'Alemannisch', 'am': 'አማርኛ', 'an': 'aragon&amp;eacute;s', 'ang': '&amp;AElig;nglisc', 'anp': 'अङ्गिका', 'ar': 'العربية', 'arc': 'ܐܪܡܝܐ', 'arn': 'mapudungun', 'arq': 'جازايرية', 'ary': 'Maġribi', 'arz': 'مصرى', 'as': 'অসমীয়া', 'ase': 'American sign language', 'ast': 'asturianu', 'atj': 'Atikamekw', 'av': 'авар', 'avk': 'Kotava', 'awa': 'अवधी', 'ay': 'Aymar aru', 'az': 'azərbaycanca', 'azb': 'تۆرکجه', 'ba': 'башҡортса', 'ban': 'Basa Bali', 'bar': 'Boarisch', 'bat-smg': 'žemaitė&amp;scaron;ka', 'bbc': 'Batak Toba', 'bbc-latn': 'Batak Toba', 'bcc': 'جهلسری بلوچی', 'bcl': 'Bikol Central', 'be': 'беларуская', 'be-tarask': 'беларуская (тарашкевіца)\u200e', 'be-x-old': 'беларуская (тарашкевіца)\u200e', 'bg': 'български', 'bgn': 'روچ کپتین بلوچی', 'bh': 'भोजपुरी', 'bho': 'भोजपुरी', 'bi': 'Bislama', 'bjn': 'Bahasa Banjar', 'bm': 'bamanankan', 'bn': 'বাংলা', 'bo': 'བོད་ཡིག', 'bpy': 'বিষ্ণুপ্রিয়া মণিপুরী', 'bqi': 'بختیاری', 'br': 'brezhoneg', 'brh': 'Br&amp;aacute;hu&amp;iacute;', 'bs': 'bosanski', 'btm': 'Batak Mandailing', 'bto': 'Iriga Bicolano', 'bug': 'ᨅᨔ ᨕᨘᨁᨗ', 'bxr': 'буряад', 'ca': 'catal&amp;agrave;', 'cbk-zam': 'Chavacano de Zamboanga', 'cdo': 'M&amp;igrave;ng-dĕ̤ng-ngṳ̄', 'ce': 'нохчийн', 'ceb': 'Cebuano', 'ch': 'Chamoru', 'cho': 'Choctaw', 'chr': 'ᏣᎳᎩ', 'chy': 'Tsets&amp;ecirc;hest&amp;acirc;hese', 'ckb': 'کوردی', 'co': 'corsu', 'cps': 'Capice&amp;ntilde;o', 'cr': 'Nēhiyawēwin / ᓀᐦᐃᔭᐍᐏᐣ', 'crh': 'qırımtatarca', 'crh-cyrl': 'къырымтатарджа (Кирилл)\u200e', 'crh-latn': 'qırımtatarca (Latin)\u200e', 'cs': 'če&amp;scaron;tina', 'csb': 'kasz&amp;euml;bsczi', 'cu': 'словѣньскъ / ⰔⰎⰑⰂⰡⰐⰠⰔⰍⰟ', 'cv': 'Чӑвашла', 'cy': 'Cymraeg', 'da': 'dansk', 'de': 'Deutsch', 'de-at': '&amp;Ouml;sterreichisches Deutsch', 'de-ch': 'Schweizer Hochdeutsch', 'de-formal': 'Deutsch (Sie-Form)\u200e', 'din': 'Thuɔŋj&amp;auml;ŋ', 'diq': 'Zazaki', 'dsb': 'dolnoserbski', 'dtp': 'Dusun Bundu-liwan', 'dty': 'डोटेली', 'dv': 'ދިވެހިބަސް', 'dz': 'ཇོང་ཁ', 'ee': 'eʋegbe', 'egl': 'Emili&amp;agrave;n', 'el': '&amp;Epsilon;&amp;lambda;&amp;lambda;&amp;eta;&amp;nu;&amp;iota;&amp;kappa;ά', 'eml': 'emili&amp;agrave;n e rumagn&amp;ograve;l', 'en': 'English', 'en-ca': 'Canadian English', 'en-gb': 'British English', 'eo': 'Esperanto', 'es': 'espa&amp;ntilde;ol', 'es-419': 'espa&amp;ntilde;ol de Am&amp;eacute;rica Latina', 'es-formal': 'espa&amp;ntilde;ol (formal)\u200e', 'et': 'eesti', 'eu': 'euskara', 'ext': 'estreme&amp;ntilde;u', 'fa': 'فارسی', 'ff': 'Fulfulde', 'fi': 'suomi', 'fit': 'me&amp;auml;nkieli', 'fiu-vro': 'V&amp;otilde;ro', 'fj': 'Na Vosa Vakaviti', 'fo': 'f&amp;oslash;royskt', 'fr': 'fran&amp;ccedil;ais', 'frc': 'fran&amp;ccedil;ais cadien', 'frp': 'arpetan', 'frr': 'Nordfriisk', 'fur': 'furlan', 'fy': 'Frysk', 'ga': 'Gaeilge', 'gag': 'Gagauz', 'gan': '贛語', 'gan-hans': '赣语（简体）\u200e', 'gan-hant': '贛語（繁體）\u200e', 'gcr': 'kriy&amp;ograve;l gwiyannen', 'gd': 'G&amp;agrave;idhlig', 'gl': 'galego', 'glk': 'گیلکی', 'gn': "Ava&amp;ntilde;e'ẽ", 'gom': 'गोंयची कोंकणी / G&amp;otilde;ychi Konknni', 'gom-deva': 'गोंयची कोंकणी', 'gom-latn': 'G&amp;otilde;ychi Konknni', 'gor': 'Bahasa Hulontalo', 'got': '𐌲𐌿𐍄𐌹𐍃𐌺', 'grc': 'Ἀ&amp;rho;&amp;chi;&amp;alpha;ί&amp;alpha; ἑ&amp;lambda;&amp;lambda;&amp;eta;&amp;nu;&amp;iota;&amp;kappa;ὴ', 'gsw': 'Alemannisch', 'gu': 'ગુજરાતી', 'gv': 'Gaelg', 'ha': 'Hausa', 'hak': '客家語/Hak-k&amp;acirc;-ng&amp;icirc;', 'haw': 'Hawaiʻi', 'he': 'עברית', 'hi': 'हिन्दी', 'hif': 'Fiji Hindi', 'hif-latn': 'Fiji Hindi', 'hil': 'Ilonggo', 'ho': 'Hiri Motu', 'hr': 'hrvatski', 'hrx': 'Hunsrik', 'hsb': 'hornjoserbsce', 'ht': 'Krey&amp;ograve;l ayisyen', 'hu': 'magyar', 'hu-formal': 'magyar (formal)\u200e', 'hy': 'հայերեն', 'hyw': 'Արեւմտահայերէն', 'hz': 'Otsiherero', 'ia': 'interlingua', 'id': 'Bahasa Indonesia', 'ie': 'Interlingue', 'ig': 'Igbo', 'ii': 'ꆇꉙ', 'ik': 'I&amp;ntilde;upiak', 'ike-cans': 'ᐃᓄᒃᑎᑐᑦ', 'ike-latn': 'inuktitut', 'ilo': 'Ilokano', 'inh': 'ГӀалгӀай', 'io': 'Ido', 'is': '&amp;iacute;slenska', 'it': 'italiano', 'iu': 'ᐃᓄᒃᑎᑐᑦ/inuktitut', 'ja': '日本語', 'jam': 'Patois', 'jbo': 'la .lojban.', 'jut': 'jysk', 'jv': 'Jawa', 'ka': 'ქართული', 'kaa': 'Qaraqalpaqsha', 'kab': 'Taqbaylit', 'kbd': 'Адыгэбзэ', 'kbd-cyrl': 'Адыгэбзэ', 'kbp': 'Kabɩyɛ', 'kg': 'Kongo', 'khw': 'کھوار', 'ki': 'Gĩkũyũ', 'kiu': 'Kırmancki', 'kj': 'Kwanyama', 'kjp': 'ဖၠုံလိက်', 'kk': 'қазақша', 'kk-arab': 'قازاقشا (تٴوتە)\u200f', 'kk-cn': 'قازاقشا (جۇنگو)\u200f', 'kk-cyrl': 'қазақша (кирил)\u200e', 'kk-kz': 'қазақша (Қазақстан)\u200e', 'kk-latn': 'qazaqşa (latın)\u200e', 'kk-tr': 'qazaqşa (T&amp;uuml;rk&amp;iuml;ya)\u200e', 'kl': 'kalaallisut', 'km': 'ភាសាខ្មែរ', 'kn': 'ಕನ್ನಡ', 'ko': '한국어', 'ko-kp': '조선말', 'koi': 'Перем Коми', 'kr': 'Kanuri', 'krc': 'къарачай-малкъар', 'kri': 'Krio', 'krj': 'Kinaray-a', 'krl': 'karjal', 'ks': 'कॉशुर / کٲشُر', 'ks-arab': 'کٲشُر', 'ks-deva': 'कॉशुर', 'ksh': 'Ripoarisch', 'ku': 'kurd&amp;icirc;', 'ku-arab': 'كوردي (عەرەبی)\u200f', 'ku-latn': 'kurd&amp;icirc; (lat&amp;icirc;n&amp;icirc;)\u200e', 'kum': 'къумукъ', 'kv': 'коми', 'kw': 'kernowek', 'ky': 'Кыргызча', 'la': 'Latina', 'lad': 'Ladino', 'lb': 'L&amp;euml;tzebuergesch', 'lbe': 'лакку', 'lez': 'лезги', 'lfn': 'Lingua Franca Nova', 'lg': 'Luganda', 'li': 'Limburgs', 'lij': 'Ligure', 'liv': 'Līv&amp;otilde; kēļ', 'lki': 'لەکی', 'lmo': 'lumbaart', 'ln': 'ling&amp;aacute;la', 'lo': 'ລາວ', 'loz': 'Silozi', 'lrc': 'لۊری شومالی', 'lt': 'lietuvių', 'ltg': 'latgaļu', 'lus': 'Mizo ţawng', 'luz': 'لئری دوٙمینی', 'lv': 'latvie&amp;scaron;u', 'lzh': '文言', 'lzz': 'Lazuri', 'mai': 'मैथिली', 'map-bms': 'Basa Banyumasan', 'mdf': 'мокшень', 'mg': 'Malagasy', 'mh': 'Ebon', 'mhr': 'олык марий', 'mi': 'Māori', 'min': 'Baso Minangkabau', 'mk': 'македонски', 'ml': 'മലയാളം', 'mn': 'монгол', 'mni': 'মেইতেই লোন্', 'mnw': 'ဘာသာ မန်', 'mo': 'молдовеняскэ', 'mr': 'मराठी', 'mrj': 'кырык мары', 'ms': 'Bahasa Melayu', 'mt': 'Malti', 'mus': 'Mvskoke', 'mwl': 'Mirand&amp;eacute;s', 'my': 'မြန်မာဘာသာ', 'myv': 'эрзянь', 'mzn': 'مازِرونی', 'na': 'Dorerin Naoero', 'nah': 'Nāhuatl', 'nan': 'B&amp;acirc;n-l&amp;acirc;m-g&amp;uacute;', 'nap': 'Napulitano', 'nb': 'norsk bokm&amp;aring;l', 'nds': 'Plattd&amp;uuml;&amp;uuml;tsch', 'nds-nl': 'Nedersaksies', 'ne': 'नेपाली', 'new': 'नेपाल भाषा', 'ng': 'Oshiwambo', 'niu': 'Niuē', 'nl': 'Nederlands', 'nl-informal': 'Nederlands (informeel)\u200e', 'nn': 'norsk nynorsk', 'no': 'norsk', 'nov': 'Novial', 'nqo': 'ߒߞߏ', 'nrm': 'Nouormand', 'nso': 'Sesotho sa Leboa', 'nv': 'Din&amp;eacute; bizaad', 'ny': 'Chi-Chewa', 'nys': 'Nyunga', 'oc': 'occitan', 'olo': 'Livvinkarjala', 'om': 'Oromoo', 'or': 'ଓଡ଼ିଆ', 'os': 'Ирон', 'pa': 'ਪੰਜਾਬੀ', 'pag': 'Pangasinan', 'pam': 'Kapampangan', 'pap': 'Papiamentu', 'pcd': 'Picard', 'pdc': 'Deitsch', 'pdt': 'Plautdietsch', 'pfl': 'P&amp;auml;lzisch', 'pi': 'पालि', 'pih': 'Norfuk / Pitkern', 'pl': 'polski', 'pms': 'Piemont&amp;egrave;is', 'pnb': 'پنجابی', 'pnt': '&amp;Pi;&amp;omicron;&amp;nu;&amp;tau;&amp;iota;&amp;alpha;&amp;kappa;ά', 'prg': 'Prūsiskan', 'ps': 'پښتو', 'pt': 'portugu&amp;ecirc;s', 'pt-br': 'portugu&amp;ecirc;s do Brasil', 'qu': 'Runa Simi', 'qug': 'Runa shimi', 'rgn': 'Rumagn&amp;ocirc;l', 'rif': 'Tarifit', 'rm': 'rumantsch', 'rmy': 'romani čhib', 'rn': 'Kirundi', 'ro': 'rom&amp;acirc;nă', 'roa-rup': 'arm&amp;atilde;neashti', 'roa-tara': 'tarand&amp;iacute;ne', 'ru': 'русский', 'rue': 'русиньскый', 'rup': 'arm&amp;atilde;neashti', 'ruq': 'Vlăheşte', 'ruq-cyrl': 'Влахесте', 'ruq-latn': 'Vlăheşte', 'rw': 'Kinyarwanda', 'sa': 'संस्कृतम्', 'sah': 'саха тыла', 'sat': 'ᱥᱟᱱᱛᱟᱲᱤ', 'sc': 'sardu', 'scn': 'sicilianu', 'sco': 'Scots', 'sd': 'سنڌي', 'sdc': 'Sassaresu', 'sdh': 'کوردی خوارگ', 'se': 'davvis&amp;aacute;megiella', 'sei': 'Cmique Itom', 'ses': 'Koyraboro Senni', 'sg': 'S&amp;auml;ng&amp;ouml;', 'sgs': 'žemaitė&amp;scaron;ka', 'sh': 'srpskohrvatski / српскохрватски', 'shi': 'Ta&amp;scaron;lḥiyt/ⵜⴰⵛⵍⵃⵉⵜ', 'shi-latn': 'Ta&amp;scaron;lḥiyt', 'shi-tfng': 'ⵜⴰⵛⵍⵃⵉⵜ', 'shn': 'ၽႃႇသႃႇတႆး ', 'shy-latn': 'tachawit', 'si': 'සිංහල', 'simple': 'Simple English', 'sk': 'slovenčina', 'skr': 'سرائیکی', 'skr-arab': 'سرائیکی', 'sl': 'sloven&amp;scaron;čina', 'sli': 'Schl&amp;auml;sch', 'sm': 'Gagana Samoa', 'sma': '&amp;Aring;arjelsaemien', 'sn': 'chiShona', 'so': 'Soomaaliga', 'sq': 'shqip', 'sr': 'српски / srpski', 'sr-ec': 'српски (ћирилица)\u200e', 'sr-el': 'srpski (latinica)\u200e', 'srn': 'Sranantongo', 'ss': 'SiSwati', 'st': 'Sesotho', 'stq': 'Seeltersk', 'sty': 'cебертатар', 'su': 'Basa Sunda', 'sv': 'svenska', 'sw': 'Kiswahili', 'szl': 'ślůnski', 'ta': 'தமிழ்', 'tay': 'Tayal', 'tcy': 'ತುಳು', 'te': 'తెలుగు', 'tet': 'tetun', 'tg': 'тоҷикӣ', 'tg-cyrl': 'тоҷикӣ', 'tg-latn': 'tojikī', 'th': 'ไทย', 'ti': 'ትግርኛ', 'tk': 'T&amp;uuml;rkmen&amp;ccedil;e', 'tl': 'Tagalog', 'tly': 'толышә зывон', 'tn': 'Setswana', 'to': 'lea faka-Tonga', 'tpi': 'Tok Pisin', 'tr': 'T&amp;uuml;rk&amp;ccedil;e', 'tru': 'Ṫuroyo', 'ts': 'Xitsonga', 'tt': 'татарча/tatar&amp;ccedil;a', 'tt-cyrl': 'татарча', 'tt-latn': 'tatar&amp;ccedil;a', 'tum': 'chiTumbuka', 'tw': 'Twi', 'ty': 'reo tahiti', 'tyv': 'тыва дыл', 'tzm': 'ⵜⴰⵎⴰⵣⵉⵖⵜ', 'udm': 'удмурт', 'ug': 'ئۇيغۇرچە / Uyghurche', 'ug-arab': 'ئۇيغۇرچە', 'ug-latn': 'Uyghurche', 'uk': 'українська', 'ur': 'اردو', 'uz': 'oʻzbekcha/ўзбекча', 'uz-cyrl': 'ўзбекча', 'uz-latn': 'oʻzbekcha', 've': 'Tshivenda', 'vec': 'v&amp;egrave;neto', 'vep': 'veps&amp;auml;n kel&amp;rsquo;', 'vi': 'Tiếng Việt', 'vls': 'West-Vlams', 'vmf': 'Mainfr&amp;auml;nkisch', 'vo': 'Volap&amp;uuml;k', 'vot': 'Vaďďa', 'vro': 'V&amp;otilde;ro', 'wa': 'walon', 'war': 'Winaray', 'wo': 'Wolof', 'wuu': '吴语', 'xal': 'хальмг', 'xh': 'isiXhosa', 'xmf': 'მარგალური', 'xsy': 'saisiyat', 'yi': 'ייִדיש', 'yo': 'Yor&amp;ugrave;b&amp;aacute;', 'yue': '粵語', 'za': 'Vahcuengh', 'zea': 'Ze&amp;ecirc;uws', 'zgh': 'ⵜⴰⵎⴰⵣⵉⵖⵜ ⵜⴰⵏⴰⵡⴰⵢⵜ', 'zh': '中文', 'zh-classical': '文言', 'zh-cn': '中文（中国大陆）\u200e', 'zh-hans': '中文（简体）\u200e', 'zh-hant': '中文（繁體）\u200e', 'zh-hk': '中文（香港）\u200e', 'zh-min-nan': 'B&amp;acirc;n-l&amp;acirc;m-g&amp;uacute;', 'zh-mo': '中文（澳門）\u200e', 'zh-my': '中文（马来西亚）\u200e', 'zh-sg': '中文（新加坡）\u200e', 'zh-tw': '中文（台灣）\u200e', 'zh-yue': '粵語', 'zu': 'isiZulu'}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se puede tambi&amp;eacute;n consultar por cierta p&amp;aacute;gina de wikipedia:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
wikipedia.page("Debian")  
&amp;lt;WikipediaPage 'Debian'&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Y ver si contenido (se mostrar&amp;aacute; el final del contenido de la wikipedia sobre Debian):&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;print(wikipedia.page("Debian").content)&lt;/p&gt;
&lt;p&gt;== Distribuciones derivadas ==
En la actualidad, como Debian es una distro que ha demostrado su estabilidad y utilidad, muchos desarrolladores la han tomado para crear a partir de ella nuevas distribuciones. Se las conoce como distribuciones basadas en Debian.
En septiembre de 2010 existen 121 distribuciones activas basadas en Debian; seg&amp;uacute;n el buscador de DistroWatch, adem&amp;aacute;s Debian posee en su sitio web una lista oficial de sus distribuciones descendientes.[25]​&lt;/p&gt;
&lt;p&gt;== Comunidades ==
Existen muchas y variadas comunidades relacionadas con el Proyecto Debian. Algunas de ellas:&lt;/p&gt;
&lt;p&gt;Brasil,[26]​
Colombia,[27]​
Costa Rica,[28]​
Chile,[29]​
Espa&amp;ntilde;a,[30]​
M&amp;eacute;xico,[31]​
Nicaragua,[32]​
Venezuela[33]​&lt;/p&gt;
&lt;p&gt;== V&amp;eacute;ase tambi&amp;eacute;n ==
 Portal:Software libre. Contenido relacionado con Software libre.
Distribuciones basadas en Debian&lt;/p&gt;
&lt;p&gt;=== Adaptaciones a otros n&amp;uacute;cleos ===
Debian GNU/Linux
Debian GNU/Hurd
Debian GNU/NetBSD
Debian GNU/kFreeBSD&lt;/p&gt;
&lt;p&gt;=== Filosof&amp;iacute;a ===
Manifiesto Debian
Directrices de software libre de Debian
Contrato Social de Debian&lt;/p&gt;
&lt;p&gt;=== Varios ===
Debconf&lt;/p&gt;
&lt;p&gt;== Referencias ==&lt;/p&gt;
&lt;p&gt;== Enlaces externos ==
 Wikimedia Commons alberga una galer&amp;iacute;a multimedia sobre Debian.
 Wikinoticias tiene noticias relacionadas con Debian.
Sitio web oficial de Debian
```&lt;/p&gt;
&lt;p&gt;Se puede tambi&amp;eacute;n consultar por el URL de la p&amp;aacute;gina sobre el tema que se est&amp;aacute; consultando:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;print(wikipedia.page("Debian").url)&lt;br/&gt;
https://es.wikipedia.org/wiki/Debian&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;O consultar sus referencias (se trae los urls en una lista):&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;print(wikipedia.page("Debian").references)
['http://www.debianchile.cl/', 'http://maslinux.es/debian-8-jessie-ha-alcanzado-el-fin-del-soporte-de-seguridad/', 'http://www.debian.mx/', 'http://www.debian.org.ni/', 'http://web.archive.org/web/20070408162722/http://www.us.debian.org/News/2005/20050606', 'http://web.archive.org/web/20071011203303/http://www.us.debian.org/News/2002/20020719', 'http://web.archive.org/web/20071013115846/http://www.us.debian.org/News/2000/20000815', 'http://web.archive.org/web/20080511183553/http://www.us.debian.org/News/2007/20070408', 'http://web.archive.org/web/20080706192105/http://www.us.debian.org/News/1999/19990309', 'http://web.archive.org/web/20080723214102/http://www.us.debian.org/News/1997/19970602', 'http://web.archive.org/web/20080724051253/http://www.us.debian.org/News/1998/19980724', 'http://lists.debian.org/debian-devel-announce/2008/09/msg00000.html', 'http://lists.debian.org/debian-devel-announce/2013/04/msg00006.html', 'http://www.us.debian.org/News/1997/19970602', 'http://www.us.debian.org/News/1998/19980724', 'http://www.us.debian.org/News/1999/19990309', 'http://www.us.debian.org/News/2000/20000815', 'http://www.us.debian.org/News/2002/20020719', 'http://www.us.debian.org/News/2005/20050606', 'http://www.us.debian.org/News/2007/20070408', 'http://www.debian.org/', 'http://www.debian.org/News/2009/20090214', 'http://www.debian.org/devel/join/newmaint', 'http://www.debian.org/doc/manuals/project-history/ch-intro.en.html', 'http://www.debian.org/donations.es.html#money_donations', 'http://www.debian.org/misc/children-distros.html', 'http://www.debianbrasil.org/', 'http://www.debianchile.org/', 'http://www.esdebian.org/', 'http://www.ibiblio.org/pub/historic-linux/distributions/debian-0.91/ChangeLog', 'https://web.archive.org/web/20070203111437/http://www.debiancolombia.org/', 'https://web.archive.org/web/20070307094321/http://www.debianbrasil.org/', 'https://web.archive.org/web/20070406065849/http://cr.debian.net/', 'https://web.archive.org/web/20070929040145/http://www.debian.org.ve/', 'https://web.archive.org/web/20110816182444/http://www.jus.uio.no/sisu/debian_constitution_v1.2/opendocument.es.odt', 'https://web.archive.org/web/20180621121330/http://maslinux.es/debian-8-jessie-ha-alcanzado-el-fin-del-soporte-de-seguridad/', 'https://web.archive.org/web/20181221235131/https://www.debian.org/intro/about.en.html', 'https://web.archive.org/web/20181221235714/https://www.debian.org/intro/about.es.html', 'https://lists.debian.org/debian-devel-announce/2012/07/msg00004.html', 'https://lists.debian.org/debian-devel-announce/2014/11/msg00003.html', 'https://lists.debian.org/debian-devel-announce/2015/03/msg00016.html', 'https://lists.debian.org/debian-security-announce/2014/msg00082.html', 'https://www.debian.org/', 'https://www.debian.org/News/2014/20140424', 'https://www.debian.org/News/2017/20170617', 'https://www.debian.org/doc/manuals/project-history/ch-releases.en.html', 'https://www.debian.org/intro/about.en.html', 'https://www.debian.org/intro/about.es.html']
```&lt;/p&gt;
&lt;p&gt;Se puede consultar el t&amp;iacute;tulo de la p&amp;aacute;gina:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.page("Debian").title)  
Debian&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Tambi&amp;eacute;n se puede consultar las categor&amp;iacute;as en la que aparece la consulta que se est&amp;aacute; realizando:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.page("Debian").categories)  
['Categor&amp;iacute;a:Debian', 'Categor&amp;iacute;a:Organizaciones de Linux', 'Categor&amp;iacute;a:Proyectos', 'Categor&amp;iacute;a:Sistemas operativos PowerPc', 'Categor&amp;iacute;a:Software de 1993', 'Categor&amp;iacute;a:Wikipedia:Art&amp;iacute;culos sin coordenadas', 'Categor&amp;iacute;a:Wikipedia:P&amp;aacute;ginas que utilizan Timeline']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se puede consultar los enlaces que tiene la p&amp;aacute;gina:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.page("Debian").links)
['17 de junio', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2005', '2006', '2007', '2008', '2009', '2010', '2013', '2015', '2016', '2017', '2019', 'Acr&amp;oacute;nimo', 'Advanced Packaging Tool', 'Alemania', 'Anthony Towns', 'Arquitectura de computador', 'Arquitectura de computadores', 'Asociaci&amp;oacute;n voluntaria', 'Australia', 'Austria', 'Bdale Garbee', 'Ben Collins', 'BitTorrent', 'Branden Robinson', 'Bruce Perens', 'Cargador de arranque', 'Chris Lamb', 'Comunidad', 'Contrato Social de Debian', 'Corel Linux', 'C&amp;oacute;digo fuente', 'Deb', 'Debconf', 'Debian GNU/Hurd', 'Debian GNU/Linux', 'Debian GNU/NetBSD', 'Debian GNU/kFreeBSD', 'Desarrollador de software', 'Directrices de software libre de Debian', 'Distribuci&amp;oacute;n GNU/Linux', 'Distribuci&amp;oacute;n Linux', 'DistroWatch', 'Empresa', 'Error de software', 'Estados Unidos', 'Francia', 'FreeBSD', 'Free Software Foundation', 'Freenode', 'GNOME', 'GNU', 'GNU GRUB', 'GNU Hurd', 'Gestor de paquetes', 'Gnome', 'Hurd', 'IRC', 'Ian Jackson', 'Ian Murdock', 'Ibiblio', 'Idioma ingl&amp;eacute;s', 'Inglaterra', 'Internet', 'Italia', 'Jigdo', 'KDE', 'Kfreebsd', 'LXDE', 'Licencia de software', 'Linux', 'Linux (n&amp;uacute;cleo)', 'Lista de correo', 'Lucas Nussbaum', 'Manifiesto Debian', 'Manifiesto de Debian', 'Martin Michlmayr', 'Mehdi Dogguy', 'Movimiento del software libre', 'Mozilla Firefox', 'M&amp;eacute;todo Schulze', 'Neil McGovern', 'NetBSD', 'N&amp;uacute;cleo (inform&amp;aacute;tica)', 'Open Source', 'Organizaci&amp;oacute;n', 'Organizaci&amp;oacute;n sin &amp;aacute;nimo de lucro', 'Paquete de software', 'Paquetes de software', 'Pa&amp;iacute;ses Bajos', 'Plataforma (inform&amp;aacute;tica)', 'SQL', 'Sam Hartman', 'Sam Hocevar', 'Servidor', 'Sistema operativo', 'Software', 'Software in the Public Interest', 'Software libre', 'Software no libre', 'Sources.list', 'Stefano Zacchiroli', 'Steve McIntyre', 'Stormix', 'Systemd', 'Tar', 'Toy Story', 'T&amp;uacute;nez', 'USB en vivo', 'Universidad Purdue', 'Usuario', 'Usuario root', 'Wayback Machine', 'Wichert Akkerman', 'Wikimedia Commons', 'Wikinoticias', 'Xfce']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se puede averiguar cuantas im&amp;aacute;genes tiene la p&amp;aacute;gina de wikipedia del tema seleccionado:
&lt;code&gt;python
len(wikipedia.page("Debian").images)
15&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Y para ver el URL de la primera im&amp;aacute;gen:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.page("Debian").images[0])
https://upload.wikimedia.org/wikipedia/commons/4/4a/Commons-logo.svg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para terminar se puede obtener el html de la p&amp;aacute;gina del tema consultado:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print(wikipedia.page("Debian").html())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Salida:
&lt;code&gt;html
&amp;lt;div class="mw-parser-output"&amp;gt;&amp;lt;div class="rellink noprint"&amp;gt; Para el sistema operativo que usa el n&amp;uacute;cleo &amp;lt;a href="/wiki/Linux_(n%C3%BAcleo)" class="mw-redirect" title="Linux (n&amp;uacute;cleo)"&amp;gt;Linux&amp;lt;/a&amp;gt; y las herramientas &amp;lt;a href="/wiki/GNU" title="GNU"&amp;gt;GNU&amp;lt;/a&amp;gt;, v&amp;eacute;ase &amp;lt;a href="/wiki/Debian_GNU/Linux" title="Debian GNU/Linux"&amp;gt;Debian GNU/Linux&amp;lt;/a&amp;gt;.&amp;lt;/div&amp;gt;
&amp;lt;table class="infobox" style="width:22.7em; line-height: 1.4em; text-align:left; padding:.23em;"&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th colspan="3" class="cabecera organizaci&amp;oacute;n" style="text-align:center;background-color:#DDD;color:black;"&amp;gt;&amp;lt;b&amp;gt;Debian&amp;lt;/b&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td colspan="3" style="text-align:center;font-size:95%;;"&amp;gt;
&amp;lt;a href="/wiki/Archivo:Debian-OpenLogo.svg" class="image"&amp;gt;&amp;lt;img alt="Debian-OpenLogo.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Debian-OpenLogo.svg/245px-Debian-OpenLogo.svg.png" decoding="async" importance="high" elementtiming="thumbnail-high" width="245" height="324" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Debian-OpenLogo.svg/368px-Debian-OpenLogo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Debian-OpenLogo.svg/490px-Debian-OpenLogo.svg.png 2x" data-file-width="109" data-file-height="144" /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th scope="row" style="text-align:left;font-size:95%;;"&amp;gt;Tipo&amp;lt;/th&amp;gt;&amp;lt;td colspan="2" style="font-size:95%;;"&amp;gt;
&amp;lt;a href="/wiki/Comunidad" title="Comunidad"&amp;gt;comunidad&amp;lt;/a&amp;gt; y &amp;lt;a href="/wiki/Organizaci%C3%B3n" title="Organizaci&amp;oacute;n"&amp;gt;organizaci&amp;oacute;n&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th scope="row" style="text-align:left;font-size:95%;;"&amp;gt;Fundaci&amp;oacute;n&amp;lt;/th&amp;gt;&amp;lt;td colspan="2" style="font-size:95%;;"&amp;gt;
&amp;lt;a href="/wiki/1993" title="1993"&amp;gt;1993&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th scope="row" style="text-align:left;font-size:95%;;"&amp;gt;Fundador(es)&amp;lt;/th&amp;gt;&amp;lt;td colspan="2" style="font-size:95%;;"&amp;gt;
&amp;lt;a href="/wiki/Ian_Murdock" title="Ian Murdock"&amp;gt;Ian Murdock&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th scope="row" style="text-align:left;font-size:95%;;"&amp;gt;Dependiente de&amp;lt;/th&amp;gt;&amp;lt;td colspan="2" style="font-size:95%;;"&amp;gt;
&amp;lt;a href="/wiki/Software_in_the_Public_Interest" title="Software in the Public Interest"&amp;gt;Software in the Public Interest&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th scope="row" style="text-align:left;font-size:95%;;"&amp;gt;Sitio web&amp;lt;/th&amp;gt;&amp;lt;td colspan="2" style="font-size:95%;;"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El API es muy &amp;uacute;til tanto para bajar contenido del wiki como traerse enlaces, urls de im&amp;aacute;genes o el c&amp;oacute;digo html completo, &amp;uacute;til para webscraping.&lt;/p&gt;
&lt;p&gt;En pr&amp;oacute;ximo art&amp;iacute;culo se volver&amp;aacute; a usar el API de Wikipedia para hacer an&amp;aacute;lisis de lenguaje natural NLP con Python.&lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="Python"></category><category term="Wikipedia"></category><category term="Ubuntu"></category></entry><entry><title>Obtener número de serial y número de versión de Raspberry Pi con Python</title><link href="https://ecrespo.github.io/obtener-numero-de-serial-y-numero-de-version-de-raspberry-pi-con-python.html" rel="alternate"></link><published>2013-02-06T10:00:00-05:30</published><updated>2013-02-06T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-06:/obtener-numero-de-serial-y-numero-de-version-de-raspberry-pi-con-python.html</id><summary type="html">&lt;p&gt;El Raspberry Pi tiene informaci&amp;oacute;n de n&amp;uacute;mero del n&amp;uacute;mero de revisi&amp;oacute;n del PCB, este n&amp;uacute;mero indica que se tiene peque&amp;ntilde;os cambios en el PCB. Estos cambios pueden afectar en el funcionamiento de los programas Python e incluso como est&amp;aacute; distribuido los pines (alimentaci&amp;oacute;n, entrada/salida, etc) en la placa.&lt;/p&gt;
&lt;p&gt;Est&amp;aacute; …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El Raspberry Pi tiene informaci&amp;oacute;n de n&amp;uacute;mero del n&amp;uacute;mero de revisi&amp;oacute;n del PCB, este n&amp;uacute;mero indica que se tiene peque&amp;ntilde;os cambios en el PCB. Estos cambios pueden afectar en el funcionamiento de los programas Python e incluso como est&amp;aacute; distribuido los pines (alimentaci&amp;oacute;n, entrada/salida, etc) en la placa.&lt;/p&gt;
&lt;p&gt;Est&amp;aacute; informaci&amp;oacute;n se puede obtener desde el archivo /proc/cpuinfo como se indica a continuaci&amp;oacute;n:
```
ernesto@raspberrypi ~ $ cat /proc/cpuinfo &lt;/p&gt;
&lt;p&gt;Processor   : ARMv6-compatible processor rev 7 (v6l)&lt;/p&gt;
&lt;p&gt;BogoMIPS    : 697.95&lt;/p&gt;
&lt;p&gt;Features    : swp half thumb fastmult vfp edsp java tls &lt;/p&gt;
&lt;p&gt;CPU implementer : 0x41&lt;/p&gt;
&lt;p&gt;CPU architecture: 7&lt;/p&gt;
&lt;p&gt;CPU variant : 0x0&lt;/p&gt;
&lt;p&gt;CPU part    : 0xb76&lt;/p&gt;
&lt;p&gt;CPU revision    : 7&lt;/p&gt;
&lt;p&gt;Hardware    : BCM2708&lt;/p&gt;
&lt;p&gt;Revision    : 000f&lt;/p&gt;
&lt;p&gt;Serial      : 00000000bcd34f5e&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El n&amp;uacute;mero de Revisi&amp;oacute;n es 00f y el serial es 00000000bcd34f5e.
Las variantes del Raspberry Pi seg&amp;uacute;n n&amp;uacute;mero versi&amp;oacute;n se tiene a continuaci&amp;oacute;n (tomado de ac&amp;aacute;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modelo B Revisi&amp;oacute;n 1.0: El valor de cpuinfo es 0002.&lt;/li&gt;
&lt;li&gt;Modelo B Revisi&amp;oacute;n 1.0+ECN001(sin fusible, D14 se removi&amp;oacute;): El valor de cpuinfo es 0003.&lt;/li&gt;
&lt;li&gt;Modelo B Revisi&amp;oacute;n 2.0: El valor de cpuinfo es 0004,0005, 0006...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El sitio &lt;a href="https://www.raspberrypi-spy.co.uk/"&gt;Raspberrypi spy&lt;/a&gt;  tiene un par de scripts para obtener el n&amp;uacute;mero de revisi&amp;oacute;n y el serial de la placa.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el script (con una peque&amp;ntilde;a correcci&amp;oacute;n):
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;"""
Script que busca la informacion del serial y numero de revision en el Raspberry Pi.
Este script se obtiene de los siguientes enlaces:
Numero de Revision:
http://www.raspberrypi-spy.co.uk/2012/09/getting-your-raspberry-pi-revision-number-using-python/#more-574
Numero de Serial:
http://www.raspberrypi-spy.co.uk/2012/09/getting-your-raspberry-pi-serial-number-using-python/#more-570&lt;/p&gt;
&lt;p&gt;"""python&lt;/p&gt;
&lt;p&gt;def getrevision():
    # Extrae la informacion del numero de revision del raspberry pi
    #Se asigna a revision un string de 4 ceros.
    revision = "0000"
    #Se abre el archivo cpuinfo
    #Se 
    try:
        f = open('/proc/cpuinfo','r')
        #Se recorre el archivo
        for linea in f:
            #Si existe el contenido Revision en una linea
            if linea[0:8]=='Revision':
                #Se toma la longitud de la linea
                longitud =len(linea)
                #Se agrega la informacion completa de la revision
                revision = linea[11:longitud-1]
        #Se cierra el archivo
        f.close()&lt;/p&gt;
&lt;h1 id="si no abre el archivo se asigna 4 ceros a revision"&gt;Si no abre el archivo se asigna 4 ceros a revision&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;except IOError:
    revision = "0000"
#Se retorna el valor de revision
return revision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def getserial():
    # Extrae la informacion del serial desde cpuinfo
    #Se asigna un string con ceros a cpuserial
    cpuserial = "00000000"
    #Se intenta a capturar la informacion del archivo cpuinfo,
    #si no se tiene un mensaje de error.
    try:
        f = open('/proc/cpuinfo','r')
        #se recorre el archivo linea a linea
        for linea in f:
            #Si existe el contenido Serial en la linea
            if linea[0:6]=='Serial':
                #Se agrega la informacion completa del serial del cpu
                cpuserial = linea[10:-1]
        #Se cierra el archivo
        f.close()
    #Si no abre el archivo se asigna el valor de error al serial
    except IOError:
        cpuserial = "ERROR000000000"
    #retorna el valor del serial del cpu
    return cpuserial&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    print u"El n&amp;uacute;mero de Serial del Raspberry Pi es: %s " %getserial()
    print u"El n&amp;uacute;mero de Revision del Raspberry Pi es: %s" %getrevision()
```&lt;/p&gt;
&lt;p&gt;Al ejecutar el script se obtiene lo siguiente:&lt;/p&gt;
&lt;p&gt;```
ernesto@raspberrypi ~ $ ./versionSerial.py &lt;/p&gt;
&lt;p&gt;El n&amp;uacute;mero de Serial del Raspberry Pi es: 00000000bcd34f5e &lt;/p&gt;
&lt;p&gt;El n&amp;uacute;mero de Revision del Raspberry Pi es: 000f
```
Ya con esta informaci&amp;oacute;n se tiene que el Raspberry Pi es de la revis&amp;oacute;n 2.0.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la organizaci&amp;oacute;n de los pines de la revisi&amp;oacute;n 1.0:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/obtenernumerodeserialynumerodeversionderaspberrypiconpython-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Y la organizaci&amp;oacute;n de los pines de la revisi&amp;oacute;n 2.0:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/obtenernumerodeserialynumerodeversionderaspberrypiconpython-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Con esta informaci&amp;oacute;n ya se conoce como realizar las conexiones de los circuitos con el Rasberry Pi.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Rasberry Pi"></category><category term="Rasbian"></category></entry><entry><title>Depurar código python con pudb</title><link href="https://ecrespo.github.io/depurar-codigo-python-con-pudb.html" rel="alternate"></link><published>2012-12-07T09:00:00-05:30</published><updated>2012-12-07T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-07:/depurar-codigo-python-con-pudb.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Pudb&lt;/code&gt; es una herramienta de depuraci&amp;oacute;n full pantalla para la consola. Soporta teclas de cursor y comandos del editor vi. Se puede integrar con &lt;code&gt;ipython&lt;/code&gt; si se requiere.&lt;/p&gt;
&lt;p&gt;Para instalarlo en distribuciones basadas en Debian se ejecuta el siguiente comando:
&lt;code&gt;apt-get install python-pudb&lt;/code&gt;
Para instalarlo con &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt; se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Pudb&lt;/code&gt; es una herramienta de depuraci&amp;oacute;n full pantalla para la consola. Soporta teclas de cursor y comandos del editor vi. Se puede integrar con &lt;code&gt;ipython&lt;/code&gt; si se requiere.&lt;/p&gt;
&lt;p&gt;Para instalarlo en distribuciones basadas en Debian se ejecuta el siguiente comando:
&lt;code&gt;apt-get install python-pudb&lt;/code&gt;
Para instalarlo con &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt; se ejecuta lo siguiente:
&lt;code&gt;easy_install pudb&lt;/code&gt;
&lt;code&gt;pip install pudb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se depurar&amp;aacute; el mismo c&amp;oacute;digo del &lt;a href="http://blog.crespo.org.ve/2012/12/depurar-codigo-python-con-ipython.html"&gt;art&amp;iacute;culo anterior&lt;/a&gt;. Se agregar&amp;aacute; al c&amp;oacute;digo para la depuraci&amp;oacute;n:
from pudb import set_trace; set_trace()&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo completo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;p&gt;from pudb import set_trace; set_trace()&lt;/p&gt;
&lt;p&gt;a = np.arange(10)
print a
print a[8]
print a[9]&lt;/p&gt;
&lt;p&gt;for i in a:
    print i&lt;/p&gt;
&lt;p&gt;print a[10]
&lt;code&gt;Para iniciar la depuraci&amp;oacute;n se ejecuta python haciendo una llamada al m&amp;oacute;dulo de `pudb.run` y luego se pasa el script a depurar:&lt;/code&gt;
python -m pudb.run arreglo.py
&lt;code&gt;``
En la siguiente figura se muestra la interfaz de&lt;/code&gt;pudb`.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/depurarcodigopythonconpudb-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;En la ventana principal se muestra el c&amp;oacute;digo del script, en la primera ventana lateral superior se muestra las variables, la siguiente ventana inferior se muestra el stack y por &amp;uacute;ltimo los breakpoints. &lt;/p&gt;
&lt;p&gt;Para ver las opciones existentes de la interfaz se presiona a la tecla "?". En la siguiente figura se muestra las opciones.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/depurarcodigopythonconpudb-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Opciones:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Control+p: Permite editar las preferencias de la interfaz.&lt;/li&gt;
&lt;li&gt;n (next): Permite saltar a la siguiente instrucci&amp;oacute;n del c&amp;oacute;digo.&lt;/li&gt;
&lt;li&gt;c (continue):  Continua a la siguiente instrucci&amp;oacute;n.&lt;/li&gt;
&lt;li&gt;s (step into): Salta a la siguiente instrucci&amp;oacute;n.&lt;/li&gt;
&lt;li&gt;r/f:: Finaliza la funci&amp;oacute;n actual.&lt;/li&gt;
&lt;li&gt;t: Corre al cursor.&lt;/li&gt;
&lt;li&gt;e: Muestra el traceback (postmorten o en el estado de una excepci&amp;oacute;n).&lt;/li&gt;
&lt;li&gt;H: Mueve a la l&amp;iacute;nea actual (al final del stack). &lt;/li&gt;
&lt;li&gt;u: Mueve hacia arriba en el stack&lt;/li&gt;
&lt;li&gt;d: Mueve hacia abajo en el stack&lt;/li&gt;
&lt;li&gt;!: Invoca un interprete de comandos python en el actual ambiente.&lt;/li&gt;
&lt;li&gt;o: Muestra la consola o la salida de la pantalla.&lt;/li&gt;
&lt;li&gt;b: Conmuta los breakpoints.&lt;/li&gt;
&lt;li&gt;q: Salir/reiniciar el script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la siguiente figura se muestra las preferencias:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/depurarcodigopythonconpudb-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;La siguiente figura muestra a el depurador en funcionamiento.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/depurarcodigopythonconpudb-4.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="python"></category><category term="pudb"></category></entry><entry><title>Creación de grafos con networkx. Parte 1.</title><link href="https://ecrespo.github.io/creacion-de-grafos-con-networkx-parte-1.html" rel="alternate"></link><published>2012-11-26T09:00:00-05:30</published><updated>2012-11-26T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-11-26:/creacion-de-grafos-con-networkx-parte-1.html</id><summary type="html">&lt;p&gt;&lt;a href="http://networkx.lanl.gov/index.html"&gt;Networkx&lt;/a&gt; es una librer&amp;iacute;a para python que facilita la creaci&amp;oacute;n, manipulaci&amp;oacute;n y estudio de estructuras din&amp;aacute;micas, y funciones para redes complejas.&lt;/p&gt;
&lt;p&gt;En el siguiente &lt;a href="http://networkx.lanl.gov/tutorial/tutorial.html"&gt;enlace&lt;/a&gt; encontrar&amp;aacute;n un tutorial del sitio oficial de networkx. Donde explican como crear un grafo, los nodos y como enlazar dichos nodos.&lt;/p&gt;
&lt;p&gt;El siguiente ejemplo crear&amp;aacute; …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://networkx.lanl.gov/index.html"&gt;Networkx&lt;/a&gt; es una librer&amp;iacute;a para python que facilita la creaci&amp;oacute;n, manipulaci&amp;oacute;n y estudio de estructuras din&amp;aacute;micas, y funciones para redes complejas.&lt;/p&gt;
&lt;p&gt;En el siguiente &lt;a href="http://networkx.lanl.gov/tutorial/tutorial.html"&gt;enlace&lt;/a&gt; encontrar&amp;aacute;n un tutorial del sitio oficial de networkx. Donde explican como crear un grafo, los nodos y como enlazar dichos nodos.&lt;/p&gt;
&lt;p&gt;El siguiente ejemplo crear&amp;aacute; nodos sobre Venezuela, algunos Estados y Ciudades. Lo primero que se hace es crear los nodos, luego se definen los enlaces entre cada nodo.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a  continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa la libreria networkx como nx"&gt;Se importa la libreria networkx como nx&lt;/h1&gt;
&lt;p&gt;import networkx as nx&lt;/p&gt;
&lt;h1 id="se importa la libreria pyplot de matplotlib como plt"&gt;Se importa la libreria pyplot de matplotlib como plt&lt;/h1&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="se crea un grafo vacio"&gt;Se crea un grafo vacio&lt;/h1&gt;
&lt;p&gt;G=nx.Graph()&lt;/p&gt;
&lt;h1 id="se crean los nodos:"&gt;Se crean los nodos:&lt;/h1&gt;
&lt;h1 id="nodo venezuela"&gt;Nodo Venezuela&lt;/h1&gt;
&lt;p&gt;G.add_node("Venezuela")&lt;/p&gt;
&lt;h1 id="se crean los nodos de los estados"&gt;Se crean los nodos de los estados&lt;/h1&gt;
&lt;p&gt;G.add_nodes_from(["Carabobo","Miranda","Aragua","Merida","Lara","Distrito Capital"])&lt;/p&gt;
&lt;h1 id="se crean los nodos de las ciudades."&gt;Se crean los nodos de las ciudades.&lt;/h1&gt;
&lt;p&gt;G.add_nodes_from((["Valencia","Barquisimeto","Merida","Caracas","Guacara","Carora","Cubiro"]))&lt;/p&gt;
&lt;h1 id="se crean los enlaces de los estados al pais"&gt;Se crean los enlaces de los estados al pa&amp;iacute;s&lt;/h1&gt;
&lt;p&gt;G.add_edge("Carabobo","Venezuela")&lt;/p&gt;
&lt;p&gt;G.add_edge("Lara","Venezuela")&lt;/p&gt;
&lt;p&gt;G.add_edge("Merida","Venezuela")&lt;/p&gt;
&lt;p&gt;G.add_edge("Distrito Capital","Venezuela")&lt;/p&gt;
&lt;p&gt;G.add_edge("Aragua","Venezuela")&lt;/p&gt;
&lt;p&gt;G.add_edge("Miranda","Venezuela")&lt;/p&gt;
&lt;h1 id="se crean los nodos de las ciudades a su respectivo estado"&gt;Se crean los nodos de las ciudades a su respectivo estado&lt;/h1&gt;
&lt;p&gt;v1 = ("Valencia","Carabobo")&lt;/p&gt;
&lt;p&gt;v2 = ("Guacara","Carabobo")&lt;/p&gt;
&lt;p&gt;dc = ("Caracas","Distrito Capital")&lt;/p&gt;
&lt;p&gt;G.add_edge(*v1)&lt;/p&gt;
&lt;p&gt;G.add_edge(*v2)&lt;/p&gt;
&lt;p&gt;G.add_edge("Tocuyito","Carabobo")&lt;/p&gt;
&lt;p&gt;G.add_edge("San Diego","Carabobo")&lt;/p&gt;
&lt;p&gt;G.add_edge("Puerto Cabello","Carabobo")&lt;/p&gt;
&lt;p&gt;G.add_edge("Moron","Carabobo")&lt;/p&gt;
&lt;p&gt;G.add_edge("Rafael Urdaneta","Valencia")&lt;/p&gt;
&lt;p&gt;G.add_edge(u"Miguel Pe&amp;ntilde;a","Valencia")&lt;/p&gt;
&lt;p&gt;G.add_edge("Santa Rosa","Valencia")&lt;/p&gt;
&lt;p&gt;G.add_edge("Candelaria","Valencia")&lt;/p&gt;
&lt;p&gt;G.add_edge(*dc)&lt;/p&gt;
&lt;p&gt;G.add_edge("Barquisimeto","Lara")&lt;/p&gt;
&lt;p&gt;G.add_edge("Carora","Lara")&lt;/p&gt;
&lt;p&gt;G.add_edge("Cubiro","Lara")&lt;/p&gt;
&lt;p&gt;G.add_edge("Merida","Merida")&lt;/p&gt;
&lt;p&gt;G.add_edge("El Vigia","Merida")&lt;/p&gt;
&lt;p&gt;G.add_edge("Ejido","Merida")&lt;/p&gt;
&lt;h1 id="se dibuja el grafo"&gt;Se dibuja el grafo&lt;/h1&gt;
&lt;p&gt;nx.draw(G)&lt;/p&gt;
&lt;h1 id="se muestra en pantalla"&gt;Se muestra en pantalla&lt;/h1&gt;
&lt;p&gt;plt.show()&lt;/p&gt;
&lt;h1 id="se vuelve a dibujar el grafo y se salva en un archivo png."&gt;Se vuelve a dibujar el grafo y se salva en un archivo png.&lt;/h1&gt;
&lt;p&gt;nx.draw(G)&lt;/p&gt;
&lt;p&gt;plt.savefig("networkx1.png")&lt;/p&gt;
&lt;h1 id="se muestra informacion de los nodos (cantidad, nodos)"&gt;Se muestra informaci&amp;oacute;n de los nodos (cantidad, nodos)&lt;/h1&gt;
&lt;p&gt;print "Nodos: ", G.number_of_nodes(), G.nodes()&lt;/p&gt;
&lt;h1 id="se muestra informacion de los enlaces (cantidad, enlaces)"&gt;SE muestra informaci&amp;oacute;n de los enlaces (cantidad, enlaces)&lt;/h1&gt;
&lt;p&gt;print "Enlaces: ", G.number_of_edges(),G.edges()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La imagen que muestra el gr&amp;aacute;fico del resultado del programa en la siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;El resultado de mostrar la cantidad de nodos, los nodos, la cantidad de enlaces y los enlaces es la siguiente:
&lt;code&gt;Nodos:  23 ['Caracas', 'Ejido', u'Miguel Pe\xf1a', 'Tocuyito', 'Aragua', 'Santa Rosa', 'Valencia', 'Moron', 'Carora', 'Venezuela', 'San Diego', 'Cubiro', 'Miranda', 'Puerto Cabello', 'El Vigia', 'Distrito Capital', 'Barquisimeto', 'Merida', 'Rafael Urdaneta', 'Lara', 'Guacara', 'Carabobo', 'Candelaria']
Enlaces:  23 [('Caracas', 'Distrito Capital'), ('Ejido', 'Merida'), (u'Miguel Pe\xf1a', 'Valencia'), ('Tocuyito', 'Carabobo'), ('Aragua', 'Venezuela'), ('Santa Rosa', 'Valencia'), ('Valencia', 'Candelaria'), ('Valencia', 'Carabobo'), ('Valencia', 'Rafael Urdaneta'), ('Moron', 'Carabobo'), ('Carora', 'Lara'), ('Venezuela', 'Distrito Capital'), ('Venezuela', 'Lara'), ('Venezuela', 'Merida'), ('Venezuela', 'Miranda'), ('Venezuela', 'Carabobo'), ('San Diego', 'Carabobo'), ('Cubiro', 'Lara'), ('Puerto Cabello', 'Carabobo'), ('El Vigia', 'Merida'), ('Barquisimeto', 'Lara'), ('Merida', 'Merida'), ('Guacara', 'Carabobo')]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo lo pueden bajar del repositorio de &lt;a href="https://bitbucket.org/ecrespo/ernesto-ecrespo.blogspot/src/54abfc379d62b35028f29b32314fbee84abc8a42/networkx1/networkx1.py?at=default"&gt;bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="General"></category><category term="matplotlib"></category><category term="Python"></category><category term="grafos"></category><category term="networkx"></category></entry><entry><title>Sqlalchemy y Elixir: Abstracción de Bases de Datos en Python</title><link href="https://ecrespo.github.io/sqlalchemy-y-elixir-abstraccion-de-bases-de-datos-en-python.html" rel="alternate"></link><published>2012-04-08T08:30:00-05:30</published><updated>2012-04-08T08:30:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-04-08:/sqlalchemy-y-elixir-abstraccion-de-bases-de-datos-en-python.html</id><summary type="html">&lt;p&gt;En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/sqlite-con-python.html"&gt;anterior&lt;/a&gt; se explica como usar &lt;code&gt;Sqlalchemy&lt;/code&gt; para acceder y manipular una base de datos abstrayendo el motor de la base de datos a utilizar.&lt;/p&gt;
&lt;p&gt;Existe una herramienta que facilita aun m&amp;aacute;s el trabajo de crear tablas, insertar, consultar o remover datos de dichas tablas; &lt;a href="http://elixir.ematia.de/trac/wiki"&gt;Elixir&lt;/a&gt; crea una …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/sqlite-con-python.html"&gt;anterior&lt;/a&gt; se explica como usar &lt;code&gt;Sqlalchemy&lt;/code&gt; para acceder y manipular una base de datos abstrayendo el motor de la base de datos a utilizar.&lt;/p&gt;
&lt;p&gt;Existe una herramienta que facilita aun m&amp;aacute;s el trabajo de crear tablas, insertar, consultar o remover datos de dichas tablas; &lt;a href="http://elixir.ematia.de/trac/wiki"&gt;Elixir&lt;/a&gt; crea una capa declarativa sobre &lt;code&gt;slqalchemy&lt;/code&gt; que permite usar la declaraci&amp;oacute;n de clases directamente a las tablas de entidad relaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Igual que en el ejemplo anterior se usar&amp;aacute; las tablas Grupos y Contactos, la diferencia ser&amp;aacute; que no ser&amp;aacute; necesario definir un campo id para cada tabla, adem&amp;aacute;s la forma de declarar cual campo es primary key o foreign key es con la declaraci&amp;oacute;n de uno a muchos o de muchos a uno.&lt;/p&gt;
&lt;p&gt;Este ejemplo crea las tablas, se realiza una inserci&amp;oacute;n de datos a ambas tablas, se realiza unas consultas de datos y al final se elimina y dato de la tabla Contactos y se muestra que ya se elimino de dicha tabla.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo python se muestra a continuaci&amp;oacute;n:&lt;br/&gt;
```&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;from elixir import metadata, Entity, Field
from elixir import Unicode, UnicodeText
from elixir import *&lt;/p&gt;
&lt;h1 id="se asocia el metadato con la base de datos sqlite"&gt;Se asocia el metadato con la base de datos sqlite&lt;/h1&gt;
&lt;p&gt;metadata.bind = "sqlite:///prueba.db"&lt;/p&gt;
&lt;h1 id="se activa el echo de los resultados de los comandos."&gt;Se activa el echo de los resultados de los comandos.&lt;/h1&gt;
&lt;p&gt;metadata.bind.echo = False&lt;/p&gt;
&lt;h1 id="se crea la clase grupos que hereda entity,"&gt;Se crea la clase Grupos que hereda Entity,&lt;/h1&gt;
&lt;h1 id="se crea los campos grupo (unicode 150),"&gt;se crea los campos grupo (unicode 150),&lt;/h1&gt;
&lt;h1 id="descripcion (unicode 200) y"&gt;descripcion (unicode 200) y&lt;/h1&gt;
&lt;h1 id="contactos que es una referencia uno a muchos de la"&gt;contactos que es una referencia uno a muchos de la&lt;/h1&gt;
&lt;h1 id="clase contactos."&gt;clase Contactos.&lt;/h1&gt;
&lt;p&gt;class Grupos(Entity):
grupo = Field(Unicode(150))
descripcion = Field(Unicode(200))
contactos = OneToMany('Contactos')&lt;/p&gt;
&lt;h1 id="devuelve la informacion de los grupos"&gt;Devuelve la informacion de los grupos&lt;/h1&gt;
&lt;p&gt;def &lt;strong&gt;repr&lt;/strong&gt;(self):
return '&lt;grupos "%s"="" (%s)=""&gt;' % (self.grupo,self.descripcion)&lt;/grupos&gt;&lt;/p&gt;
&lt;h1 id="se crea la clase contactos que hereda de entity."&gt;Se crea la clase contactos que hereda de Entity.&lt;/h1&gt;
&lt;h1 id="se tiene el campo nombre (unicode 100),"&gt;se tiene el campo nombre (unicode 100),&lt;/h1&gt;
&lt;h1 id="telefono (string 11) y el campo grupo muchos a uno de grupos."&gt;telefono (string 11) y el campo grupo muchos a uno de grupos.&lt;/h1&gt;
&lt;p&gt;class Contactos(Entity):
nombre = Field(Unicode(100))
telefono = Field(String(11))
grupo = ManyToOne('Grupos')&lt;/p&gt;
&lt;h1 id="devuelve la informacion de los contactos"&gt;Devuelve la informacion de los contactos&lt;/h1&gt;
&lt;p&gt;def &lt;strong&gt;repr&lt;/strong&gt;(self):
return '&lt;contactos- "%s"="" "%s",="" grupo:="" nombre:="" telefono:=""&gt;' % (self.nombre,self.telefono,self.grupo)&lt;/contactos-&gt;&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;h1 id="se importa create_all, setup_all y session de elixir."&gt;Se importa create_all, setup_all y session de elixir.&lt;/h1&gt;
&lt;p&gt;from elixir import create_all, setup_all, session&lt;/p&gt;
&lt;h1 id="se crea las clases segun los modelos."&gt;Se crea las clases segun los modelos.&lt;/h1&gt;
&lt;p&gt;setup_all()&lt;/p&gt;
&lt;h1 id="se crea las tablas en la base de datos segun los modelos definidos"&gt;Se crea las tablas en la base de datos segun los modelos definidos&lt;/h1&gt;
&lt;p&gt;create_all()&lt;/p&gt;
&lt;h1 id="se insertan datos en la tabla grupos"&gt;Se insertan datos en la tabla grupos&lt;/h1&gt;
&lt;h1 id="en este caso se agregan ciudades del pais."&gt;En este caso se agregan ciudades del pais.&lt;/h1&gt;
&lt;p&gt;Guacara = Grupos(grupo='Guacara',descripcion='Ciudad del Estado Carabobo')
Valencia = Grupos(grupo="Valencia",descripcion="Capital del Estado Carabobo")
Barquisimeto = Grupos(grupo="Barquisimeto",descripcion="Capital del Estado Lara")
Caracas = Grupos(grupo="Caracas",descripcion="Distrito Capital")
Maracaibo = Grupos(grupo="Maracaibo",descripcion="Capital del Estado Zulia")
Merida = Grupos(grupo="Merida",descripcion="Capital del Estado Merida")
Barcelona = Grupos(grupo="Barcelona",descripcion="Capital de Anzoategui")
PuertoOrdaz = Grupos(grupo="Puerto Ordaz",descripcion="Ciudad del Estado Bolivar")
Barinas = Grupos(grupo="Barinas",descripcion="Capital del Estado Barinas")
Maracay = Grupos(grupo="Maracay",descripcion="Capital del Estado Aragua")
LosTeques = Grupos(grupo="Los Teques",descripcion="Capital del Estado Miranda")&lt;/p&gt;
&lt;h1 id="se hace el commit para insertar los datos de la tabla grupos en la base de datos."&gt;Se hace el commit para insertar los datos de la tabla grupos en la base de datos.&lt;/h1&gt;
&lt;p&gt;session.commit()&lt;/p&gt;
&lt;h1 id="se insertan datos en la tabla contactos, cada contacto hace referencia a un grupo de"&gt;Se insertan datos en la tabla contactos, cada contacto hace referencia a un grupo de&lt;/h1&gt;
&lt;h1 id="la tabla grupos."&gt;la tabla grupos.&lt;/h1&gt;
&lt;p&gt;Contactos(nombre='Ernesto Nadir Crespo Avila',telefono='04205873118',grupo=Guacara)
Contactos(nombre='Jhon Doe',telefono='04295333131',grupo=Valencia)
Contactos(nombre='Jane Doe',telefono='04399991919',grupo=Caracas)
Contactos(nombre='Pedro Perez',telefono='04596661617',grupo=Caracas)
Contactos(nombre='Maria Perez',telefono='04194445445',grupo=Barquisimeto)&lt;/p&gt;
&lt;h1 id="se hace el commit para insertar los datos en la tabla contactos en la base de datos."&gt;Se hace el commit para insertar los datos en la tabla contactos en la base de datos.&lt;/h1&gt;
&lt;p&gt;session.commit()&lt;/p&gt;
&lt;h1 id="se realiza una consulta buscando los contactos del grupo caracas"&gt;Se realiza una consulta buscando los contactos del grupo Caracas&lt;/h1&gt;
&lt;h1 id="y se presentan en pantalla"&gt;Y se presentan en pantalla&lt;/h1&gt;
&lt;p&gt;registros = Contactos.query.filter(Contactos.grupo == Caracas).all()
print "Contactos de Caracas"
for registro in registros:
print "-" * 20
print registro.nombre
print registro.telefono
print registro.grupo
print "&lt;em&gt;-" &lt;/em&gt;20&lt;/p&gt;
&lt;h1 id="se muestra en pantalla todos los contactos."&gt;Se muestra en pantalla todos los contactos.&lt;/h1&gt;
&lt;p&gt;registros = Contactos.query.all()
print "Todos los Contactos"
for registro in registros:
print "-" * 20
print registro.nombre
print registro.telefono
print registro.grupo
print "&lt;em&gt;-" &lt;/em&gt;20&lt;/p&gt;
&lt;h1 id="se muestra en pantalla todos los grupos, con sus contactos"&gt;Se muestra en pantalla todos los grupos, con sus contactos&lt;/h1&gt;
&lt;h1 id="asociados."&gt;asociados.&lt;/h1&gt;
&lt;p&gt;registros = Grupos.query.all()
for registro in registros:
print "-" * 20
print registro.grupo
print registro.descripcion
print registro.contactos
print "&lt;em&gt;-" &lt;/em&gt;20&lt;/p&gt;
&lt;h1 id="se consulta la tabla contactos buscando al usuario maria perez"&gt;Se consulta la tabla contactos buscando al usuario Maria Perez&lt;/h1&gt;
&lt;h1 id="se muestra en pantalla la informacion de ese contacto"&gt;Se muestra en pantalla la informacion de ese contacto&lt;/h1&gt;
&lt;p&gt;consulta = Contactos.query.filter_by(nombre=u'Maria Perez')
registro = consulta.first()
print "%s , %s :(%s)" % (registro.nombre,registro.telefono, registro.grupo)&lt;/p&gt;
&lt;h1 id="se borra ese contacto de la tabla contactos y se actualiza la base de datos."&gt;Se borra ese contacto de la tabla contactos y se actualiza la base de datos.&lt;/h1&gt;
&lt;p&gt;registro.delete()
session.commit()&lt;/p&gt;
&lt;h1 id="se muestra en pantalla todos los contactos"&gt;Se muestra en pantalla todos los contactos&lt;/h1&gt;
&lt;h1 id="para hacer notar que ya el contacto maria perez no existe"&gt;para hacer notar que ya el contacto Maria Perez no existe&lt;/h1&gt;
&lt;h1 id="en la base de datos."&gt;en la base de datos.&lt;/h1&gt;
&lt;p&gt;registros = Contactos.query.all()
print "Contactos, luego de eliminar a Maria Perez"
for registro in registros:
print "-" * 20
print registro.nombre
print registro.telefono
print registro.grupo
```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo SQL generado a partir del modelo es el siguiente:
```
CREATE TABLE __main___grupos (
id INTEGER NOT NULL, 
grupo VARCHAR(150), 
descripcion VARCHAR(200), 
PRIMARY KEY (id)
)&lt;/p&gt;
&lt;p&gt;CREATE TABLE __main&lt;strong&gt;&lt;em&gt;contactos (
id INTEGER NOT NULL, 
nombre VARCHAR(100), 
telefono VARCHAR(11), 
grupo&lt;/em&gt;id INTEGER, 
PRIMARY KEY (id), 
CONSTRAINT &lt;/strong&gt;main&lt;strong&gt;&lt;em&gt;contactos&lt;/em&gt;grupo_id_fk FOREIGN KEY(grupo_id) REFERENCES &lt;/strong&gt;main___grupos (id)
)
&lt;code&gt;``
Con respecto al modelo el c&amp;oacute;digo&lt;/code&gt;SQL&lt;code&gt;si tiene los campos&lt;/code&gt;id&lt;code&gt;como&lt;/code&gt;PRIMARY KEY&lt;code&gt;en cada tabla y se define cuales son&lt;/code&gt;FOREIGN KEY&lt;code&gt;, gracias a&lt;/code&gt;Elixir&lt;code&gt;se ahorra trabajo en la definici&amp;oacute;n de campos y al usar&lt;/code&gt;OneToMany&lt;code&gt;o&lt;/code&gt;ManyToOne` se est&amp;aacute; definiendo quienes son primary o foreign key.&lt;/p&gt;
&lt;p&gt;El resultado del script se muestra a continuaci&amp;oacute;n:&lt;br/&gt;
```
Contactos de Caracas&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Jane Doe
04399991919
&lt;grupos "caracas"="" (distrito="" capital)=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Pedro Perez
04596661617
&lt;grupos "caracas"="" (distrito="" capital)=""&gt;
&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-
Todos los Contactos&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Ernesto Nadir Crespo Avila
04205873118
&lt;grupos "guacara"="" (ciudad="" carabobo)="" del="" estado=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Jhon Doe
04295333131
&lt;grupos "valencia"="" (capital="" carabobo)="" del="" estado=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Jane Doe
04399991919
&lt;grupos "caracas"="" (distrito="" capital)=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Pedro Perez
04596661617
&lt;grupos "caracas"="" (distrito="" capital)=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Maria Perez
04194445445
&lt;grupos "barquisimeto"="" (capital="" del="" estado="" lara)=""&gt;
&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Guacara
Ciudad del Estado Carabobo
[&lt;contactos- "04205873118",="" "&lt;grupos="" "ernesto="" "guacara"="" (ciudad="" avila",="" carabobo)="" crespo="" del="" estado="" grupo:="" nadir="" nombre:="" telefono:=""&gt;"&amp;gt;]&lt;/contactos-&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Valencia
Capital del Estado Carabobo
[&lt;contactos- "04295333131",="" "&lt;grupos="" "jhon="" "valencia"="" (capital="" carabobo)="" del="" doe",="" estado="" grupo:="" nombre:="" telefono:=""&gt;"&amp;gt;]&lt;/contactos-&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Barquisimeto
Capital del Estado Lara
[&lt;contactos- "04194445445",="" "&lt;grupos="" "barquisimeto"="" "maria="" (capital="" del="" estado="" grupo:="" lara)="" nombre:="" perez",="" telefono:=""&gt;"&amp;gt;]&lt;/contactos-&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Caracas
Distrito Capital
[&lt;contactos- "04399991919",="" "&lt;grupos="" "caracas"="" "jane="" (distrito="" capital)="" doe",="" grupo:="" nombre:="" telefono:=""&gt;"&amp;gt;,&lt;br/&gt;
&lt;contactos- "04596661617",="" "&lt;grupos="" "caracas"="" "pedro="" (distrito="" capital)="" grupo:="" nombre:="" perez",="" telefono:=""&gt;"&amp;gt;]&lt;/contactos-&gt;&lt;/contactos-&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Maracaibo
Capital del Estado Zulia
[]&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Merida
Capital del Estado Merida
[]&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Barcelona
Capital de Anzoategui
[]&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Puerto Ordaz
Ciudad del Estado Bolivar
[]&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Barinas
Capital del Estado Barinas
[]&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Maracay
Capital del Estado Aragua
[]&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Los Teques
Capital del Estado Miranda
[]
&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-&lt;em&gt;-&lt;/em&gt;-
Maria Perez , 04194445445 :(&lt;grupos "barquisimeto"="" (capital="" del="" estado="" lara)=""&gt;)
Contactos, luego de eliminar a Maria Perez&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Ernesto Nadir Crespo Avila
04205873118
&lt;grupos "guacara"="" (ciudad="" carabobo)="" del="" estado=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Jhon Doe
04295333131
&lt;grupos "valencia"="" (capital="" carabobo)="" del="" estado=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Jane Doe
04399991919
&lt;grupos "caracas"="" (distrito="" capital)=""&gt;&lt;/grupos&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Pedro Perez
04596661617
&lt;grupos "caracas"="" (distrito="" capital)=""&gt;
```&lt;/grupos&gt;&lt;/p&gt;
&lt;p&gt;Las herramientas &lt;code&gt;sqlalchemy&lt;/code&gt; y &lt;code&gt;Elixir&lt;/code&gt; facilitan el trabajo de abstraer el motor de base de datos y la creaci&amp;oacute;n de las tablas con sus respectivos campos en dichas base de datos.  De est&amp;aacute; forma se puede crear aplicaciones donde se puede facilitar el uso de varios motores de base de datos realizando cambios m&amp;iacute;nimos en la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Abstracción del motor de Base de Datos con el ORM Sqlalchemy y python</title><link href="https://ecrespo.github.io/abstraccion-del-motor-de-base-de-datos-con-el-orm-sqlalchemy-y-python.html" rel="alternate"></link><published>2012-04-07T09:00:00-05:30</published><updated>2012-04-07T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-04-07:/abstraccion-del-motor-de-base-de-datos-con-el-orm-sqlalchemy-y-python.html</id><summary type="html">&lt;p&gt;&lt;code&gt;ORM&lt;/code&gt; o Mapeo de Objeto Relacional es una t&amp;eacute;cnica de programaci&amp;oacute;n para convertir datos entre el sistema de tipos utilizando lenguajes de programaci&amp;oacute;n orientado a objetos y el utilizado en una Base de Datos Relacional (tomado de la &lt;a href="https://es.wikipedia.org/wiki/ORM"&gt;wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Sqlalchemy&lt;/code&gt; es una herramienta &lt;code&gt;ORM&lt;/code&gt; para python que da flexibilidad en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;ORM&lt;/code&gt; o Mapeo de Objeto Relacional es una t&amp;eacute;cnica de programaci&amp;oacute;n para convertir datos entre el sistema de tipos utilizando lenguajes de programaci&amp;oacute;n orientado a objetos y el utilizado en una Base de Datos Relacional (tomado de la &lt;a href="https://es.wikipedia.org/wiki/ORM"&gt;wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Sqlalchemy&lt;/code&gt; es una herramienta &lt;code&gt;ORM&lt;/code&gt; para python que da flexibilidad en el desarrollo con SQL.&lt;/p&gt;
&lt;p&gt;Tomando el art&amp;iacute;culo anterior de &lt;a href="https://ecrespo.github.io/sqlite-con-python.html"&gt;sqlite con python&lt;/a&gt;, se cambiar&amp;aacute; el m&amp;oacute;dulo de &lt;code&gt;sqlite3&lt;/code&gt; para python por el &lt;code&gt;ORM Sqlalchemy&lt;/code&gt;, de esa forma se abstrae las distintas instrucciones existentes para diferentes motores de base de datos como &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;sqlite&lt;/code&gt; y se puede as&amp;iacute; utilizar cualquier motor de base de datos realizando m&amp;iacute;nimos cambios en el programa.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo donde se muestra el uso de &lt;code&gt;sqlalchemy&lt;/code&gt; en una base de datos &lt;code&gt;sqlite3&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa sqlalchemy"&gt;Se importa sqlalchemy&lt;/h1&gt;
&lt;p&gt;from sqlalchemy import *&lt;/p&gt;
&lt;h1 id="se crea la instancia del motor de la base de datos y se asocia con un"&gt;Se crea la instancia del motor de la base de datos y se asocia con un&lt;/h1&gt;
&lt;h1 id="archivo"&gt;archivo&lt;/h1&gt;
&lt;p&gt;db = create_engine('sqlite:///tutorial.db')&lt;/p&gt;
&lt;h1 id="se coloca la base de datos en modo no mostrar resultados"&gt;se coloca la base de datos en modo no mostrar resultados&lt;/h1&gt;
&lt;h1 id="de las instrucciones en pantalla."&gt;de las instrucciones en pantalla.&lt;/h1&gt;
&lt;p&gt;db.echo = False&lt;/p&gt;
&lt;h1 id="se asocia el archivo de la base de datos a la instancia de metadatos."&gt;Se asocia el archivo de la base de datos a la instancia de metadatos.&lt;/h1&gt;
&lt;p&gt;metadata = MetaData(db)&lt;/p&gt;
&lt;h1 id="se crea la tabla contactos tal cual el mismo ejemplo de"&gt;Se crea la tabla contactos tal cual el mismo ejemplo de&lt;/h1&gt;
&lt;h1 id="sqlite."&gt;sqlite.&lt;/h1&gt;
&lt;p&gt;contactos = Table(
'contactos',metadata,
Column('id',Integer,primary_key=True),
Column('nombre', Unicode(100)),
Column('telefono',String(11)),
Column('grupo_id', ForeignKey('grupos.id')))&lt;/p&gt;
&lt;h1 id="se crea la tabla de grupos tal cual el mismo ejemplo de"&gt;Se crea la tabla de grupos tal cual el mismo ejemplo de&lt;/h1&gt;
&lt;h1 id="sqlite"&gt;sqlite&lt;/h1&gt;
&lt;p&gt;grupos = Table(
'grupos',metadata,
Column('id',Integer,primary_key=True),
Column('grupo',Unicode(300)),
Column('descripcion',Unicode(500)))&lt;/p&gt;
&lt;h1 id="se crea todas las tablas."&gt;Se crea todas las tablas.&lt;/h1&gt;
&lt;p&gt;metadata.create_all()&lt;/p&gt;
&lt;h1 id="se inserta datos en la tabla grupos."&gt;Se inserta datos en la tabla grupos.&lt;/h1&gt;
&lt;p&gt;i = grupos.insert()
i.execute(grupo='Guacara',descripcion='Ciudad de Carabobo')
i.execute({'grupo':'Valencia','descripcion':'Capital de Carabobo'},
{'grupo':'Maracay','descripcion':'Capital de Aragua'},
{'grupo':'Merida','descripcion':'Capital de Merida'})&lt;/p&gt;
&lt;h1 id="se inserta datos en la tabla contactos"&gt;Se inserta datos en la tabla contactos&lt;/h1&gt;
&lt;p&gt;u = contactos.insert()
u.execute(nombre='Ernesto Crespo',telefono='04155673029',grupo_id=1)
u.execute(nombre='Pedro Perez',telefono='0295212223',grupo_id=2)
u.execute(nombre='Jhon Doe',telefono='04184488484',grupo_id=2)
u.execute(nombre='Jane Doe',telefono='04184488482',grupo_id=1)
u.execute(nombre='Pepito de los palotes',telefono='04184588484',grupo_id=3)&lt;/p&gt;
&lt;h1 id="se hace consulta de la tabla contactos"&gt;Se hace consulta de la tabla contactos&lt;/h1&gt;
&lt;p&gt;s = contactos.select()
rs = s.execute()&lt;/p&gt;
&lt;h1 id="se hace consultas de la tabla grupos."&gt;Se hace consultas de la tabla grupos.&lt;/h1&gt;
&lt;p&gt;t = grupos.select()
ts = t.execute()&lt;/p&gt;
&lt;h1 id="se muestra la tabla grupos"&gt;Se muestra la tabla grupos&lt;/h1&gt;
&lt;p&gt;print "GRUPOS"
print "-------------------------------------"
for fila in ts:
print "id: %s,Grupo: %s, Descripcion:%s" %(fila[0],fila[1],fila[2])
print "--------------------------------------"&lt;/p&gt;
&lt;p&gt;del fila&lt;/p&gt;
&lt;h1 id="se muestra la tabla contactos."&gt;Se muestra la tabla contactos.&lt;/h1&gt;
&lt;p&gt;print "CONTACTOS"
print "-------------------------------------"
for fila in rs:
print "Nombre: %s, telefono %s, Grupo %s" %(fila[1],fila[2],fila[3]) 
print "--------------------------------------"&lt;/p&gt;
&lt;h1 id="se borra la fila del id 1 de la tabla grupos"&gt;Se borra la fila del id 1 de la tabla grupos&lt;/h1&gt;
&lt;p&gt;t = grupos.delete(text("id=1"))
t.execute()&lt;/p&gt;
&lt;h1 id="se realiza una consulta de la tabla grupos"&gt;Se realiza una consulta de la tabla grupos&lt;/h1&gt;
&lt;p&gt;q = grupos.select()
qs = q.execute()&lt;/p&gt;
&lt;h1 id="se muestra la tabla grupos,"&gt;Se muestra la tabla grupos,&lt;/h1&gt;
&lt;h1 id="ahora no tiene la fila del grupo guacara."&gt;ahora no tiene la fila del grupo Guacara.&lt;/h1&gt;
&lt;p&gt;print "GRUPOS"
print "-------------------------------------"
for fila in qs:
print "id: %s,Grupo: %s, Descripcion:%s" %(fila[0],fila[1],fila[2])
print "--------------------------------------"&lt;/p&gt;
&lt;h1 id="se muestra los contactos del grupo 2."&gt;Se muestra los contactos del grupo 2.&lt;/h1&gt;
&lt;p&gt;print "Mostrar contactos del grupo 2"
del q
del qs
q = contactos.select(text("grupo_id=2"))
qs = q.execute()
print "-------------------------------------"
for fila in qs:
print "Nombre: %s, telefono %s, Grupo %s" %(fila[1],fila[2],fila[3]) 
print "--------------------------------------"
```    &lt;/p&gt;
&lt;p&gt;El resultado de ejecutar el script se muestra a continuaci&amp;oacute;n:&lt;br/&gt;
```
GRUPOS&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;id: 1,Grupo: Guacara, Descripcion:Ciudad de Carabobo
id: 2,Grupo: Valencia, Descripcion:Capital de Carabobo
id: 3,Grupo: Maracay, Descripcion:Capital de Aragua
id: 4,Grupo: Merida, Descripcion:Capital de Merida&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="contactos"&gt;CONTACTOS&lt;/h2&gt;
&lt;p&gt;Nombre: Ernesto Crespo, telefono 04155673029, Grupo 1
Nombre: Pedro Perez, telefono 0295212223, Grupo 2
Nombre: Jhon Doe, telefono 04184488484, Grupo 2
Nombre: Jane Doe, telefono 04184488482, Grupo 1
Nombre: Pepito de los palotes, telefono 04184588484, Grupo 3&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="grupos"&gt;GRUPOS&lt;/h2&gt;
&lt;p&gt;id: 2,Grupo: Valencia, Descripcion:Capital de Carabobo
id: 3,Grupo: Maracay, Descripcion:Capital de Aragua
id: 4,Grupo: Merida, Descripcion:Capital de Merida&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="mostrar contactos del grupo 2"&gt;Mostrar contactos del grupo 2&lt;/h2&gt;
&lt;p&gt;Nombre: Pedro Perez, telefono 0295212223, Grupo 2
Nombre: Jhon Doe, telefono 04184488484, Grupo 2&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;De est&amp;aacute; manera se facilita el trabajo de acceder a una base de datos sin estar usando directamente su API y facilita tambi&amp;eacute;n poder utilizar cualquier motor de base de datos en la aplicaci&amp;oacute;n que se est&amp;eacute; desarrollando.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Simulación de circuitos eléctricos con python eispice</title><link href="https://ecrespo.github.io/simulacion-de-circuitos-electricos-con-python-eispice.html" rel="alternate"></link><published>2012-04-06T10:00:00-05:30</published><updated>2012-04-06T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-04-06:/simulacion-de-circuitos-electricos-con-python-eispice.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Eispice&lt;/code&gt; es un simulador de circuitos clone del Motor de simulaci&amp;oacute;n de &lt;code&gt;Berkley Spice 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lo interesante es que se puede usar el lenguaje de programaci&amp;oacute;n Python para realizar simulaci&amp;oacute;n de circuitos.&lt;/p&gt;
&lt;p&gt;Tiene documentaci&amp;oacute;n de distintos &lt;a href="http://www.thedigitalmachine.net/eispice.examples.html"&gt;ejemplos&lt;/a&gt; y un &lt;a href="https://www.thedigitalmachine.net/eispice.manual.html"&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalarlo se descarga la fuente del &lt;code&gt;eispice&lt;/code&gt;. Se descomprime …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Eispice&lt;/code&gt; es un simulador de circuitos clone del Motor de simulaci&amp;oacute;n de &lt;code&gt;Berkley Spice 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lo interesante es que se puede usar el lenguaje de programaci&amp;oacute;n Python para realizar simulaci&amp;oacute;n de circuitos.&lt;/p&gt;
&lt;p&gt;Tiene documentaci&amp;oacute;n de distintos &lt;a href="http://www.thedigitalmachine.net/eispice.examples.html"&gt;ejemplos&lt;/a&gt; y un &lt;a href="https://www.thedigitalmachine.net/eispice.manual.html"&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalarlo se descarga la fuente del &lt;code&gt;eispice&lt;/code&gt;. Se descomprime y luego se compila e instala:&lt;br/&gt;
&lt;code&gt;tar -xvjf eispice-0.11.6.tar.bz2
cd eispice-0.11.6/
sudo python setup.py install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Un ejemplo sencillo muestra un circuito RC con una fuente sinusoidal, se muestra la gr&amp;aacute;fica de la tensi&amp;oacute;n y la corriente.&lt;/p&gt;
&lt;p&gt;La fuente estar&amp;aacute; entre el nodo de tierra y el nodo 1, la resistencia entre el nodo 1 y el nodo 2, el condensador estar&amp;aacute; entr el nodo 2 y el nodo tierra.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo python de la definici&amp;oacute;n del circuito:&lt;br/&gt;
```&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar modulo eispice"&gt;Importar modulo eispice&lt;/h1&gt;
&lt;p&gt;import eispice&lt;/p&gt;
&lt;h1 id="se crea el circuito con el titulo"&gt;Se crea el circuito con el titulo&lt;/h1&gt;
&lt;p&gt;cct = eispice.Circuit("Prueba de circuito RC")&lt;/p&gt;
&lt;h1 id="se crea la fuente de tension, con valor, se define un"&gt;Se crea la fuente de tension, con valor, se define un&lt;/h1&gt;
&lt;h1 id="valor dc de 10, y una segnal senosoidal de valor offset, amplitud,"&gt;valor DC de 10, y una segnal senosoidal de valor offset, amplitud,&lt;/h1&gt;
&lt;h1 id="frecuencia, retardo, amortiguacion."&gt;frecuencia, retardo, amortiguacion.&lt;/h1&gt;
&lt;p&gt;cct.Vx = eispice.V(1, eispice.GND,10,eispice.Sin(10,10,'10M'))&lt;/p&gt;
&lt;h1 id="resistencia de 20 k ohm."&gt;Resistencia de 20 K ohm.&lt;/h1&gt;
&lt;p&gt;cct.R1 = eispice.R(1,2,'20kOhm')&lt;/p&gt;
&lt;h1 id="capacitor de 10 nano faradio."&gt;Capacitor de 10 nano faradio.&lt;/h1&gt;
&lt;p&gt;cct.C1 = eispice.C(2,eispice.GND, '10n')&lt;/p&gt;
&lt;h1 id="se ejecuta el analisis definiendo el tiempo de analisis."&gt;Se ejecuta el analisis definiendo el tiempo de analisis.&lt;/h1&gt;
&lt;p&gt;cct.tran('0.5n', '100n')&lt;/p&gt;
&lt;h1 id="se captura los resultados"&gt;Se captura los resultados&lt;/h1&gt;
&lt;p&gt;resultados = cct.results
print "Se muestra los resultados"
print resultados&lt;/p&gt;
&lt;h1 id="se crea la grafica"&gt;Se crea la grafica&lt;/h1&gt;
&lt;p&gt;eispice.plot(cct)
```&lt;/p&gt;
&lt;p&gt;El resultado de la ejecuci&amp;oacute;n y luego las gr&amp;aacute;ficas:
Se muestran los resultados:&lt;br/&gt;
&lt;code&gt;[[  0.00000000e+00   1.00000000e+01  -1.35525272e-20   1.00000000e+01]
 [  5.00000000e-12   1.00031416e+01  -1.57079626e-07   1.00000000e+01]
 [  5.50000000e-12   1.00034558e+01  -1.72787588e-07   1.00000000e+01]
 [  6.50000000e-12   1.00040841e+01  -2.04203512e-07   1.00000000e+01]
 [  8.50000000e-12   1.00053407e+01  -2.67035355e-07   1.00000000e+01]
 [  1.25000000e-11   1.00078540e+01  -3.92699027e-07   1.00000000e+01]
 [  2.05000000e-11   1.00128805e+01  -6.44026281e-07   1.00000000e+01]
 [  3.65000000e-11   1.00229336e+01  -1.14668021e-06   1.00000000e+01]
 [  6.85000000e-11   1.00430397e+01  -2.15198395e-06   1.00000000e+01]
 [  1.32500000e-10   1.00832512e+01  -4.16256080e-06   1.00000000e+01]
 [  2.60500000e-10   1.01636697e+01  -8.18347813e-06   1.00000001e+01]
 [  5.16500000e-10   1.03244696e+01  -1.62234571e-05   1.00000004e+01]
 [  1.01650000e-09   1.06382517e+01  -3.19125016e-05   1.00000016e+01]
 [  1.51650000e-09   1.09514039e+01  -4.75700131e-05   1.00000036e+01]
 [  2.01650000e-09   1.12636172e+01  -6.31805394e-05   1.00000064e+01]
 [  2.51650000e-09   1.15745834e+01  -7.87286750e-05   1.00000099e+01]
 [  3.01650000e-09   1.18839958e+01  -9.41990756e-05   1.00000142e+01]
 [  3.51650000e-09   1.21915488e+01  -1.09576474e-04   1.00000193e+01]
 [  4.01650000e-09   1.24969391e+01  -1.24845694e-04   1.00000252e+01]
 [  4.51650000e-09   1.27998652e+01  -1.39991667e-04   1.00000318e+01]
 [  5.01650000e-09   1.31000281e+01  -1.54999446e-04   1.00000392e+01]
 [  5.51650000e-09   1.33971317e+01  -1.69854221e-04   1.00000473e+01]
 [  6.01650000e-09   1.36908828e+01  -1.84541330e-04   1.00000562e+01]
 [  6.51650000e-09   1.39809914e+01  -1.99046280e-04   1.00000658e+01]
 [  7.01650000e-09   1.42671712e+01  -2.13354756e-04   1.00000761e+01]
 [  7.51650000e-09   1.45491398e+01  -2.27452637e-04   1.00000871e+01]
 [  8.01650000e-09   1.48266190e+01  -2.41326011e-04   1.00000988e+01]
 [  8.51650000e-09   1.50993350e+01  -2.54961186e-04   1.00001112e+01]
 [  9.01650000e-09   1.53670184e+01  -2.68344706e-04   1.00001243e+01]
 [  9.51650000e-09   1.56294053e+01  -2.81463363e-04   1.00001381e+01]
 [  1.00165000e-08   1.58862366e+01  -2.94304210e-04   1.00001524e+01]
 [  1.05165000e-08   1.61372590e+01  -3.06854575e-04   1.00001675e+01]
 [  1.10165000e-08   1.63822246e+01  -3.19102073e-04   1.00001831e+01]
 [  1.15165000e-08   1.66208917e+01  -3.31034616e-04   1.00001994e+01]
 [  1.20165000e-08   1.68530248e+01  -3.42640428e-04   1.00002162e+01]
 [  1.25165000e-08   1.70783948e+01  -3.53908057e-04   1.00002336e+01]
 [  1.30165000e-08   1.72967792e+01  -3.64826381e-04   1.00002516e+01]
 [  1.35165000e-08   1.75079627e+01  -3.75384627e-04   1.00002701e+01]
 [  1.40165000e-08   1.77117366e+01  -3.85572374e-04   1.00002891e+01]
 [  1.45165000e-08   1.79079000e+01  -3.95379569e-04   1.00003087e+01]
 [  1.50165000e-08   1.80962593e+01  -4.04796533e-04   1.00003287e+01]
 [  1.55165000e-08   1.82766286e+01  -4.13813972e-04   1.00003491e+01]
 [  1.60165000e-08   1.84488298e+01  -4.22422987e-04   1.00003700e+01]
 [  1.65165000e-08   1.86126930e+01  -4.30615082e-04   1.00003914e+01]
 [  1.70165000e-08   1.87680566e+01  -4.38382173e-04   1.00004131e+01]
 [  1.75165000e-08   1.89147671e+01  -4.45716595e-04   1.00004352e+01]
 [  1.80165000e-08   1.90526798e+01  -4.52611109e-04   1.00004576e+01]
 [  1.85165000e-08   1.91816587e+01  -4.59058911e-04   1.00004804e+01]
 [  1.90165000e-08   1.93015763e+01  -4.65053638e-04   1.00005035e+01]
 [  1.95165000e-08   1.94123144e+01  -4.70589374e-04   1.00005269e+01]
 [  2.00165000e-08   1.95137637e+01  -4.75660656e-04   1.00005506e+01]
 [  2.05165000e-08   1.96058241e+01  -4.80262479e-04   1.00005745e+01]
 [  2.10165000e-08   1.96884046e+01  -4.84390302e-04   1.00005986e+01]
 [  2.15165000e-08   1.97614239e+01  -4.88040050e-04   1.00006229e+01]
 [  2.20165000e-08   1.98248099e+01  -4.91208123e-04   1.00006474e+01]
 [  2.25165000e-08   1.98784999e+01  -4.93891394e-04   1.00006720e+01]
 [  2.30165000e-08   1.99224410e+01  -4.96087214e-04   1.00006968e+01]
 [  2.35165000e-08   1.99565899e+01  -4.97793416e-04   1.00007216e+01]
 [  2.40165000e-08   1.99809129e+01  -4.99008317e-04   1.00007465e+01]
 [  2.45165000e-08   1.99953859e+01  -4.99730718e-04   1.00007715e+01]
 [  2.50165000e-08   1.99999946e+01  -4.99959906e-04   1.00007965e+01]
 [  2.55165000e-08   1.99947346e+01  -4.99695655e-04   1.00008215e+01]
 [  2.55665000e-08   1.99936659e+01  -4.99642097e-04   1.00008240e+01]
 [  2.56665000e-08   1.99912327e+01  -4.99520185e-04   1.00008290e+01]
 [  2.58665000e-08   1.99851830e+01  -4.99217203e-04   1.00008390e+01]
 [  2.62665000e-08   1.99683546e+01  -4.98374783e-04   1.00008589e+01]
 [  2.67665000e-08   1.99384666e+01  -4.96879139e-04   1.00008838e+01]
 [  2.72665000e-08   1.98987705e+01  -4.94893095e-04   1.00009086e+01]
 [  2.77665000e-08   1.98493055e+01  -4.92418613e-04   1.00009333e+01]
 [  2.82665000e-08   1.97901205e+01  -4.89458134e-04   1.00009578e+01]
 [  2.87665000e-08   1.97212738e+01  -4.86014579e-04   1.00009822e+01]
 [  2.92665000e-08   1.96428334e+01  -4.82091348e-04   1.00010064e+01]
 [  2.97665000e-08   1.95548766e+01  -4.77692311e-04   1.00010304e+01]
 [  3.02665000e-08   1.94574904e+01  -4.72821810e-04   1.00010542e+01]
 [  3.07665000e-08   1.93507707e+01  -4.67484652e-04   1.00010777e+01]
 [  3.12665000e-08   1.92348230e+01  -4.61686104e-04   1.00011009e+01]
 [  3.17665000e-08   1.91097616e+01  -4.55431888e-04   1.00011238e+01]
 [  3.22665000e-08   1.89757100e+01  -4.48728177e-04   1.00011464e+01]
 [  3.27665000e-08   1.88328004e+01  -4.41581585e-04   1.00011687e+01]
 [  3.32665000e-08   1.86811739e+01  -4.33999167e-04   1.00011906e+01]
 [  3.37665000e-08   1.85209802e+01  -4.25988405e-04   1.00012121e+01]
 [  3.42665000e-08   1.83523773e+01  -4.17557205e-04   1.00012332e+01]
 [  3.47665000e-08   1.81755316e+01  -4.08713886e-04   1.00012538e+01]
 [  3.52665000e-08   1.79906176e+01  -3.99467177e-04   1.00012740e+01]
 [  3.57665000e-08   1.77978178e+01  -3.89826203e-04   1.00012938e+01]
 [  3.62665000e-08   1.75973226e+01  -3.79800478e-04   1.00013130e+01]
 [  3.67665000e-08   1.73893297e+01  -3.69399897e-04   1.00013317e+01]
 [  3.72665000e-08   1.71740444e+01  -3.58634724e-04   1.00013499e+01]
 [  3.77665000e-08   1.69516792e+01  -3.47515582e-04   1.00013676e+01]
 [  3.82665000e-08   1.67224536e+01  -3.36053445e-04   1.00013847e+01]
 [  3.87665000e-08   1.64865937e+01  -3.24259624e-04   1.00014012e+01]
 [  3.92665000e-08   1.62443323e+01  -3.12145759e-04   1.00014171e+01]
 [  3.97665000e-08   1.59959085e+01  -2.99723805e-04   1.00014324e+01]
 [  4.02665000e-08   1.57415675e+01  -2.87006020e-04   1.00014471e+01]
 [  4.07665000e-08   1.54815602e+01  -2.74004956e-04   1.00014611e+01]
 [  4.12665000e-08   1.52161433e+01  -2.60733442e-04   1.00014745e+01]
 [  4.17665000e-08   1.49455787e+01  -2.47204577e-04   1.00014872e+01]
 [  4.22665000e-08   1.46701334e+01  -2.33431712e-04   1.00014992e+01]
 [  4.27665000e-08   1.43900793e+01  -2.19428438e-04   1.00015105e+01]
 [  4.32665000e-08   1.41056926e+01  -2.05208576e-04   1.00015211e+01]
 [  4.37665000e-08   1.38172542e+01  -1.90786158e-04   1.00015310e+01]
 [  4.42665000e-08   1.35250486e+01  -1.76175418e-04   1.00015402e+01]
 [  4.47665000e-08   1.32293641e+01  -1.61390776e-04   1.00015486e+01]
 [  4.52665000e-08   1.29304927e+01  -1.46446820e-04   1.00015563e+01]
 [  4.57665000e-08   1.26287293e+01  -1.31358300e-04   1.00015633e+01]
 [  4.62665000e-08   1.23243716e+01  -1.16140106e-04   1.00015695e+01]
 [  4.67665000e-08   1.20177200e+01  -1.00807257e-04   1.00015749e+01]
 [  4.72665000e-08   1.17090772e+01  -8.53748836e-05   1.00015795e+01]
 [  4.77665000e-08   1.13987477e+01  -6.98582163e-05   1.00015834e+01]
 [  4.82665000e-08   1.10870379e+01  -5.42725681e-05   1.00015865e+01]
 [  4.87665000e-08   1.07742552e+01  -3.86333202e-05   1.00015888e+01]
 [  4.92665000e-08   1.04607085e+01  -2.29559067e-05   1.00015904e+01]
 [  4.97665000e-08   1.01467071e+01  -7.25579914e-06   1.00015911e+01]
 [  5.02665000e-08   9.83256094e+00   8.45150824e-06   1.00015911e+01]
 [  5.07665000e-08   9.51858000e+00   2.41505143e-05   1.00015903e+01]
 [  5.12665000e-08   9.20507417e+00   3.98257259e-05   1.00015887e+01]
 [  5.17665000e-08   8.89235283e+00   5.54616736e-05   1.00015863e+01]
 [  5.22665000e-08   8.58072461e+00   7.10429265e-05   1.00015831e+01]
 [  5.27665000e-08   8.27049704e+00   8.65541080e-05   1.00015792e+01]
 [  5.32665000e-08   7.96197628e+00   1.01979910e-04   1.00015745e+01]
 [  5.37665000e-08   7.65546681e+00   1.17305110e-04   1.00015690e+01]
 [  5.42665000e-08   7.35127111e+00   1.32514583e-04   1.00015628e+01]
 [  5.47665000e-08   7.04968938e+00   1.47593319e-04   1.00015558e+01]
 [  5.52665000e-08   6.75101925e+00   1.62526438e-04   1.00015480e+01]
 [  5.57665000e-08   6.45555548e+00   1.77299202e-04   1.00015395e+01]
 [  5.62665000e-08   6.16358964e+00   1.91897032e-04   1.00015303e+01]
 [  5.67665000e-08   5.87540988e+00   2.06305522e-04   1.00015203e+01]
 [  5.72665000e-08   5.59130059e+00   2.20510453e-04   1.00015097e+01]
 [  5.77665000e-08   5.31154215e+00   2.34497806e-04   1.00014983e+01]
 [  5.82665000e-08   5.03641065e+00   2.48253778e-04   1.00014862e+01]
 [  5.87665000e-08   4.76617762e+00   2.61764792e-04   1.00014735e+01]
 [  5.92665000e-08   4.50110974e+00   2.75017515e-04   1.00014600e+01]
 [  5.97665000e-08   4.24146860e+00   2.87998868e-04   1.00014460e+01]
 [  6.02665000e-08   3.98751044e+00   3.00696040e-04   1.00014312e+01]
 [  6.07665000e-08   3.73948588e+00   3.13096501e-04   1.00014159e+01]
 [  6.12665000e-08   3.49763969e+00   3.25188013e-04   1.00013999e+01]
 [  6.17665000e-08   3.26221054e+00   3.36958643e-04   1.00013834e+01]
 [  6.22665000e-08   3.03343078e+00   3.48396774e-04   1.00013663e+01]
 [  6.27665000e-08   2.81152618e+00   3.59491119e-04   1.00013486e+01]
 [  6.32665000e-08   2.59671573e+00   3.70230729e-04   1.00013303e+01]
 [  6.37665000e-08   2.38921144e+00   3.80605005e-04   1.00013115e+01]
 [  6.42665000e-08   2.18921807e+00   3.90603710e-04   1.00012923e+01]
 [  6.47665000e-08   1.99693300e+00   4.00216975e-04   1.00012725e+01]
 [  6.52665000e-08   1.81254600e+00   4.09435313e-04   1.00012523e+01]
 [  6.57665000e-08   1.63623902e+00   4.18249627e-04   1.00012316e+01]
 [  6.62665000e-08   1.46818606e+00   4.26651219e-04   1.00012104e+01]
 [  6.67665000e-08   1.30855298e+00   4.34631797e-04   1.00011889e+01]
 [  6.72665000e-08   1.15749730e+00   4.42183484e-04   1.00011670e+01]
 [  6.77665000e-08   1.01516811e+00   4.49298830e-04   1.00011447e+01]
 [  6.82665000e-08   8.81705858e-01   4.55970811e-04   1.00011221e+01]
 [  6.87665000e-08   7.57242264e-01   4.62192843e-04   1.00010991e+01]
 [  6.92665000e-08   6.41900155e-01   4.67958785e-04   1.00010759e+01]
 [  6.97665000e-08   5.35793362e-01   4.73262948e-04   1.00010523e+01]
 [  7.02665000e-08   4.39026598e-01   4.78100097e-04   1.00010285e+01]
 [  7.07665000e-08   3.51695360e-01   4.82465459e-04   1.00010045e+01]
 [  7.12665000e-08   2.73885834e-01   4.86354724e-04   1.00009803e+01]
 [  7.17665000e-08   2.05674809e-01   4.89764055e-04   1.00009559e+01]
 [  7.22665000e-08   1.47129600e-01   4.92690087e-04   1.00009313e+01]
 [  7.27665000e-08   9.83079844e-02   4.95129933e-04   1.00009067e+01]
 [  7.32665000e-08   5.92581435e-02   4.97081185e-04   1.00008818e+01]
 [  7.37665000e-08   3.00186147e-02   4.98541917e-04   1.00008570e+01]
 [  7.42665000e-08   1.06182539e-02   4.99510688e-04   1.00008320e+01]
 [  7.47665000e-08   1.07620677e-03   4.99986541e-04   1.00008070e+01]
 [  7.52665000e-08   1.40189027e-03   4.99969006e-04   1.00007820e+01]
 [  7.53165000e-08   1.97725580e-03   4.99940113e-04   1.00007795e+01]
 [  7.54165000e-08   3.42400955e-03   4.99867526e-04   1.00007745e+01]
 [  7.56165000e-08   7.50138747e-03   4.99663157e-04   1.00007645e+01]
 [  7.60165000e-08   2.03890444e-02   4.99017775e-04   1.00007446e+01]
 [  7.65165000e-08   4.53613489e-02   4.97767914e-04   1.00007196e+01]
 [  7.70165000e-08   8.01576799e-02   4.96026855e-04   1.00006948e+01]
 [  7.75165000e-08   1.24743698e-01   4.93796317e-04   1.00006700e+01]
 [  7.80165000e-08   1.79075401e-01   4.91078501e-04   1.00006454e+01]
 [  7.85165000e-08   2.43099172e-01   4.87876089e-04   1.00006209e+01]
 [  7.90165000e-08   3.16751825e-01   4.84192241e-04   1.00005966e+01]
 [  7.95165000e-08   3.99960675e-01   4.80030593e-04   1.00005725e+01]
 [  8.00165000e-08   4.92643606e-01   4.75395252e-04   1.00005487e+01]
 [  8.05165000e-08   5.94709149e-01   4.70290793e-04   1.00005250e+01]
 [  8.10165000e-08   7.06056578e-01   4.64722253e-04   1.00005016e+01]
 [  8.15165000e-08   8.26576008e-01   4.58695127e-04   1.00004785e+01]
 [  8.20165000e-08   9.56148500e-01   4.52215364e-04   1.00004558e+01]
 [  8.25165000e-08   1.09464618e+00   4.45289358e-04   1.00004333e+01]
 [  8.30165000e-08   1.24193237e+00   4.37923944e-04   1.00004113e+01]
 [  8.35165000e-08   1.39786172e+00   4.30126392e-04   1.00003896e+01]
 [  8.40165000e-08   1.56228033e+00   4.21904396e-04   1.00003683e+01]
 [  8.45165000e-08   1.73502596e+00   4.13266071e-04   1.00003474e+01]
 [  8.50165000e-08   1.91592812e+00   4.04219941e-04   1.00003269e+01]
 [  8.55165000e-08   2.10480829e+00   3.94774934e-04   1.00003070e+01]
 [  8.60165000e-08   2.30148005e+00   3.84940371e-04   1.00002875e+01]
 [  8.65165000e-08   2.50574932e+00   3.74725958e-04   1.00002685e+01]
 [  8.70165000e-08   2.71741452e+00   3.64141775e-04   1.00002500e+01]
 [  8.75165000e-08   2.93626674e+00   3.53198267e-04   1.00002321e+01]
 [  8.80165000e-08   3.16209002e+00   3.41906234e-04   1.00002147e+01]
 [  8.85165000e-08   3.39466149e+00   3.30276820e-04   1.00001979e+01]
 [  8.90165000e-08   3.63375163e+00   3.18321502e-04   1.00001817e+01]
 [  8.95165000e-08   3.87912449e+00   3.06052079e-04   1.00001661e+01]
 [  9.00165000e-08   4.13053792e+00   2.93480658e-04   1.00001511e+01]
 [  9.05165000e-08   4.38774380e+00   2.80619647e-04   1.00001367e+01]
 [  9.10165000e-08   4.65048829e+00   2.67481737e-04   1.00001230e+01]
 [  9.15165000e-08   4.91851211e+00   2.54079894e-04   1.00001100e+01]
 [  9.20165000e-08   5.19155074e+00   2.40427344e-04   1.00000976e+01]
 [  9.25165000e-08   5.46933473e+00   2.26537561e-04   1.00000859e+01]
 [  9.30165000e-08   5.75158994e+00   2.12424252e-04   1.00000750e+01]
 [  9.35165000e-08   6.03803782e+00   1.98101344e-04   1.00000647e+01]
 [  9.40165000e-08   6.32839568e+00   1.83582975e-04   1.00000552e+01]
 [  9.45165000e-08   6.62237697e+00   1.68883470e-04   1.00000464e+01]
 [  9.50165000e-08   6.91969156e+00   1.54017336e-04   1.00000383e+01]
 [  9.55165000e-08   7.22004605e+00   1.38999246e-04   1.00000310e+01]
 [  9.60165000e-08   7.52314401e+00   1.23844019e-04   1.00000244e+01]
 [  9.65165000e-08   7.82868634e+00   1.08566612e-04   1.00000186e+01]
 [  9.70165000e-08   8.13637148e+00   9.31821027e-05   1.00000135e+01]
 [  9.75165000e-08   8.44589581e+00   7.77056729e-05   1.00000093e+01]
 [  9.80165000e-08   8.75695384e+00   6.21525962e-05   1.00000058e+01]
 [  9.85165000e-08   9.06923862e+00   4.65382217e-05   1.00000031e+01]
 [  9.90165000e-08   9.38244194e+00   3.08779588e-05   1.00000011e+01]
 [  9.95165000e-08   9.69625472e+00   1.51872623e-05   9.99999996e+00]
 [  1.00000000e-07   1.00000000e+01  -2.02048261e-11   9.99999960e+00]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Texto alternativo" src="./images/simulaciondecircuitoselectricosconpythoneispice-1.png"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Sqlite con python</title><link href="https://ecrespo.github.io/sqlite-con-python.html" rel="alternate"></link><published>2012-04-04T09:00:00-05:30</published><updated>2012-04-04T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-04-04:/sqlite-con-python.html</id><summary type="html">&lt;p&gt;El programa &lt;code&gt;pysms-send&lt;/code&gt; tendr&amp;aacute; algunas mejoras, entre ellas manejar&amp;aacute; libreta de contactos.&lt;/p&gt;
&lt;p&gt;Para ello se probar&amp;aacute; con &lt;code&gt;sqlite3&lt;/code&gt; o con &lt;code&gt;mongoDB&lt;/code&gt;. Para est&amp;eacute; art&amp;iacute;culo se trabajar&amp;aacute; con &lt;code&gt;sqlite3&lt;/code&gt;. Se crear&amp;aacute;n 2 tablas, una de contactos y otra de grupos. La de contactos tiene los campos de id, nombre del contacto …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El programa &lt;code&gt;pysms-send&lt;/code&gt; tendr&amp;aacute; algunas mejoras, entre ellas manejar&amp;aacute; libreta de contactos.&lt;/p&gt;
&lt;p&gt;Para ello se probar&amp;aacute; con &lt;code&gt;sqlite3&lt;/code&gt; o con &lt;code&gt;mongoDB&lt;/code&gt;. Para est&amp;eacute; art&amp;iacute;culo se trabajar&amp;aacute; con &lt;code&gt;sqlite3&lt;/code&gt;. Se crear&amp;aacute;n 2 tablas, una de contactos y otra de grupos. La de contactos tiene los campos de id, nombre del contacto, telefono y grupo. La tabla grupo tendr&amp;aacute; los campos id, nombre del grupo y descripci&amp;oacute;n del grupo.&lt;/p&gt;
&lt;p&gt;En la tabla contactos el campo grupo es una referencia al id de la tabla grupo de esa forma cada contacto est&amp;aacute; relacionado a un grupo.&lt;/p&gt;
&lt;p&gt;El archivo &lt;code&gt;contactos.sql&lt;/code&gt; contiene lo siguiente:&lt;br/&gt;
```
create table contactos (
id integer primary key,
nombre text not null,
grupo integer references grupos(id)
on delete restrict
deferrable initially deferred,
telefono text not null default 'Desconocido',
unique (nombre,telefono));&lt;/p&gt;
&lt;p&gt;create table grupos (
id integer primary key,
nombre text not null,&lt;br/&gt;
descripcion text not null CHECK(descripcion !=''),
unique (nombre)); 
```&lt;/p&gt;
&lt;p&gt;En la tabla &lt;code&gt;contactos&lt;/code&gt; se tiene el campo id que es entero y clave primaria, luego el campo nombre es no nulo, el campo grupo hace referencia a la tabla grupos al campo id, el campo telefono es un texto no nulo con valor por defecto desconocido, los valores &amp;uacute;nicos son el nombre y el tel&amp;eacute;fono, con eso se evita que existan n&amp;uacute;meros de tel&amp;eacute;fonos repetidos.&lt;/p&gt;
&lt;p&gt;En la tabla &lt;code&gt;grupos&lt;/code&gt; tiene el campo id es un entero y es clave primaria, el campo nombre es texto no nulo, el campo descripci&amp;oacute;n es no nulo y se verifica que no sea un string vacio, el campo &amp;uacute;nico es el nombre.&lt;/p&gt;
&lt;p&gt;Para generar la base de datos se ejecuta la siguiente instrucci&amp;oacute;n:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlite3 sms.db &amp;lt; sms.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;De est&amp;aacute; manera se crea la base de datos &lt;code&gt;sqlite&lt;/code&gt; en el archivo &lt;code&gt;sms.db&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si se desea interactuar con la base de datos se ejecuta &lt;code&gt;sqlite3&lt;/code&gt; con el nombre de la base de datos, se abrir&amp;aacute; un interprete:
&lt;code&gt;ecrespo@jewel:~/bin/python$ sqlite3 sms.db 
SQLite version 3.7.11 2012-03-20 11:35:50
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se agrega un grupo a la tabla &lt;code&gt;grupos&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlite&amp;gt; insert into grupos (nombre,descripcion) values ('Guacara','Ciudad del Estado Carabobo');&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ahora se agrega un contacto a la tabla &lt;code&gt;contactos&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into contactos (nombre,grupo,telefono) values ('Ernesto Crespo',1,'04315633119');&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se consulta a la tabla &lt;code&gt;grupos&lt;/code&gt; y luego a la tabla &lt;code&gt;contactos&lt;/code&gt;:&lt;br/&gt;
&lt;code&gt;sqlite&amp;gt; select * from grupos;
1|Guacara|Ciudad del Estado Carabobo
sqlite&amp;gt; select * from contactos ;
1|Ernesto Crespo|1|04315633119&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para eliminar el &lt;code&gt;contacto&lt;/code&gt; se ejecuta:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlite&amp;gt; delete from contactos where id=1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se uso el id para eliminar el contacto.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n  se crear&amp;aacute;n una serie de scripts en python que permitir&amp;aacute;n insertar datos a la base de datos, consultar datos y eliminarlos (las acciones b&amp;aacute;sicas en una base de datos).
```&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo sqlite3"&gt;Se importa el modulo sqlite3&lt;/h1&gt;
&lt;p&gt;import sqlite3&lt;/p&gt;
&lt;h1 id="se crea la funcion main"&gt;Se crea la funcion main&lt;/h1&gt;
&lt;p&gt;def main():&lt;/p&gt;
&lt;h1 id="se establece la instancia connect a la base de datos sms.db"&gt;Se establece la instancia connect a la base de datos sms.db&lt;/h1&gt;
&lt;p&gt;con = sqlite3.connect("sms.db")&lt;/p&gt;
&lt;h1 id="se crea el cursor que permite la ejecucion de instrucciones sql"&gt;Se crea el cursor que permite la ejecucion de instrucciones sql&lt;/h1&gt;
&lt;p&gt;cur = con.cursor()&lt;/p&gt;
&lt;h1 id="se crea una lista con tuplas como sus elementos."&gt;Se crea una lista con tuplas como sus elementos.&lt;/h1&gt;
&lt;h1 id="las tuplas contienen los datos a insertar en la tabla grupos."&gt;Las tuplas contienen los datos a insertar en la tabla grupos.&lt;/h1&gt;
&lt;p&gt;datos =[('valencia' ,'Capital Estado Carabobo'),
('Maracay','Capital Estado Aragua'),
('Barquisimeto','Capital del Estado Lara'),]&lt;/p&gt;
&lt;h1 id="se recorre la lista"&gt;Se recorre la lista&lt;/h1&gt;
&lt;p&gt;for t in datos:
cur.execute('insert into grupos (nombre,descripcion) values (?,?)',t)&lt;/p&gt;
&lt;h1 id="se realiza la transaccion."&gt;Se realiza la transaccion.&lt;/h1&gt;
&lt;p&gt;con.commit()&lt;/p&gt;
&lt;h1 id="ahora se lista los datos de la tabla grupos"&gt;Ahora se lista los datos de la tabla grupos&lt;/h1&gt;
&lt;p&gt;cur.execute('select * from grupos')&lt;/p&gt;
&lt;h1 id="se captura uno"&gt;Se captura uno&lt;/h1&gt;
&lt;p&gt;fila = cur.fetchone()&lt;/p&gt;
&lt;h1 id="se recorre cada fila"&gt;Se recorre cada fila&lt;/h1&gt;
&lt;p&gt;while fila:&lt;/p&gt;
&lt;h1 id="se muestra los elementos nombre y descripcion."&gt;Se muestra los elementos nombre y descripcion.&lt;/h1&gt;
&lt;p&gt;print fila[1],fila[2]&lt;/p&gt;
&lt;h1 id="se pasa a la siguiente fila"&gt;Se pasa a la siguiente fila&lt;/h1&gt;
&lt;p&gt;fila = cur.fetchone()&lt;/p&gt;
&lt;h1 id="se cierra el cursor"&gt;Se cierra el cursor&lt;/h1&gt;
&lt;p&gt;cur.close()&lt;/p&gt;
&lt;h1 id="se cierra la conexion."&gt;Se cierra la conexion.&lt;/h1&gt;
&lt;p&gt;con.close()&lt;/p&gt;
&lt;h1 id="se sale de la funcion ."&gt;Se sale de la funcion .&lt;/h1&gt;
&lt;p&gt;return 0&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
main()
```&lt;/p&gt;
&lt;p&gt;Al ejecutar el script devuelve la lista de &lt;code&gt;grupos&lt;/code&gt; con su descripci&amp;oacute;n:
&lt;code&gt;ecrespo@jewel:~/bin/python$ python grupos-sms.py 
Guacara Ciudad del Estado Carabobo
valencia Capital Estado Carabobo
Maracay Capital Estado Aragua
Barquisimeto Capital del Estado Lara&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;===
&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Python"></category></entry><entry><title>Emulando la navegación en python con mechanize (parte 1)</title><link href="https://ecrespo.github.io/emulando-la-navegacion-en-python-con-mechanize-parte-1.html" rel="alternate"></link><published>2012-03-10T09:00:00-05:30</published><updated>2012-03-10T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-03-10:/emulando-la-navegacion-en-python-con-mechanize-parte-1.html</id><summary type="html">&lt;p&gt;En estos d&amp;iacute;as me ha tocado programar una aplicaci&amp;oacute;n que permita interactuar de manera autom&amp;aacute;tica con otra, para ello utilic&amp;eacute; la librer&amp;iacute;a &lt;code&gt;python-mechanize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Est&amp;aacute; librer&amp;iacute;a permite la interacci&amp;oacute;n con aplicaciones web para automatizar dicha interacci&amp;oacute;n o cuando se quiere realizar pruebas de estr&amp;eacute;s a una aplicaci&amp;oacute;n se usa &lt;code&gt;multi-mechanize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En estos d&amp;iacute;as me ha tocado programar una aplicaci&amp;oacute;n que permita interactuar de manera autom&amp;aacute;tica con otra, para ello utilic&amp;eacute; la librer&amp;iacute;a &lt;code&gt;python-mechanize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Est&amp;aacute; librer&amp;iacute;a permite la interacci&amp;oacute;n con aplicaciones web para automatizar dicha interacci&amp;oacute;n o cuando se quiere realizar pruebas de estr&amp;eacute;s a una aplicaci&amp;oacute;n se usa &lt;code&gt;multi-mechanize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La p&amp;aacute;gina de mechanize la pueden revisar en el siguiente &lt;a href="http://wwwsearch.sourceforge.net/mechanize/"&gt;enlace&lt;/a&gt;. Hay una gu&amp;iacute;a en &lt;a href="http://stockrt.github.io/p/emulating-a-browser-in-python-with-mechanize/"&gt;Ingl&amp;eacute;s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En estos d&amp;iacute;a he estado practicando con django (framework de desarrollo web en python) donde espero pronto poder publicar art&amp;iacute;culos al respecto.&lt;/p&gt;
&lt;p&gt;La aplicaci&amp;oacute;n en Django es la de manejo de bookmarks, se tiene un inicio de sesi&amp;oacute;n, una p&amp;aacute;gina de bienvenida al usuario registrado, luego se puede listar los bookmarks y cerrar la sesi&amp;oacute;n (aplicaci&amp;oacute;n en desarrollo).&lt;/p&gt;
&lt;p&gt;Pues todo esos pasos se van a automatizar con &lt;code&gt;python-mechanize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para instalar mechanize se puede hacer a lo Debian:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-mechanize"&gt;apt-get install python-mechanize&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la aplicaci&amp;oacute;n en django sin mucho adorno.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Al darle click en sesi&amp;oacute;n o Inicio de Sesi&amp;oacute;n aparece la solicitud de usuario y clave como lo muestra la figura:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Al darle bot&amp;oacute;n derecho sobre la entrada de Usuario selecciona Inspeccionar elemento (esto en google chrome o chromium) y aparece una secci&amp;oacute;n donde se muestra el c&amp;oacute;digo del formulario.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;De esa forma se puede averiguar los nombres de los elementos del formulario para luego utilizarlo en el c&amp;oacute;digo python con &lt;code&gt;mechanize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se inicia el interprete de comandos de python:&lt;br/&gt;
```
ecrespo@jewel:~$ python
Python 2.7.2+ (default, Dec  1 2011, 01:55:02)
[GCC 4.6.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Se importa mechanize y el manejo de cookies:&lt;/code&gt;python 
import mechanize
import cookielib
&lt;code&gt;Se crea la instancia browser de `mechanize`:&lt;/code&gt;python 
br = mechanize.Browser()
&lt;code&gt;Se crea la instancia del cookie:&lt;/code&gt;python 
cj = cookielib.LWPCookieJar()
&lt;code&gt;Se asocia la instancia del cookie con el navegador:&lt;/code&gt;python 
br.set_cookiejar(cj)
&lt;code&gt;Se define que no se maneja robots:&lt;/code&gt;python 
br.set_handle_robots(False)
&lt;code&gt;Se define el tiempo de refrescamiento:&lt;/code&gt;python 
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
&lt;code&gt;Se define las cabeceras del navegador, en este caso se le est&amp;aacute; diciendo que el navegador es un firefox desde Linux Debian:&lt;/code&gt;python 
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; es-VE; rv:1.9.0.1)Gecko/2008071615 Debian/6.0 Firefox/9')]
&lt;code&gt;Se abre la aplicaci&amp;oacute;n web que se encuentra en localhost y puerto 8050:&lt;/code&gt;python 
r = br.open('http://localhost:8050/')
&lt;code&gt;Se muestra el resultado de la p&amp;aacute;gina:&lt;/code&gt;python 
print r.read()
```
En la siguiente figura se muestra el resultado (el c&amp;oacute;digo html de la p&amp;aacute;gina) del comando anterior:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ahora se revisar&amp;aacute;n los links que maneja la p&amp;aacute;gina para darle click a sesi&amp;oacute;n o Inicio de sesi&amp;oacute;n para ingresar el usuario y clave:&lt;/p&gt;
&lt;p&gt;Se crea un ciclo con los enlaces existentes en la p&amp;aacute;gina, luego se consulta el texto de cada enlace, si es sesi&amp;oacute;n se abre el enlace pasado el url del mismo, luego finaliza el ciclo.&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for link in br.links():
...     if link.text == "sesion":
...         r= br.open("%s" %link.absolute_url)
...         break
...     else:
...         continue
&lt;code&gt;Ya en este momento se encuentra en la p&amp;aacute;gina de ingreso de usuario y clave:&lt;/code&gt;python 
print br.geturl()
http://localhost:8050/sesion/
&lt;code&gt;Se puede mostrar el c&amp;oacute;digo html de la p&amp;aacute;gina de Inicio de sesi&amp;oacute;n con el comando `br.response().read()`:&lt;/code&gt;python 
print br.response().read()
```
En la figura se muestra el resultado del comando:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-5.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se puede mostrar los campos del formulario con el comando &lt;code&gt;br.forms()&lt;/code&gt;:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for form in br.forms():
...     print form
...
&lt;post (readonly)="" &lt;hiddencontrol(csrfmiddlewaretoken="d3c9e6c2e06f5014647a1711ee3d4908)" application="" http:="" localhost:8050="" sesion="" x-www-form-urlencoded=""&gt;
&lt;textcontrol(username=)&gt;
&lt;passwordcontrol(password=)&gt;
&lt;submitcontrol(&lt;none&gt;=login) (readonly)&amp;gt;
  &lt;hiddencontrol(next= (readonly)="" )=""&gt;&amp;gt;
```
Se nota que se tienen dos campos de entrada de datos username y password y el bot&amp;oacute;n de login para enviar los datos.&lt;/hiddencontrol(next=&gt;&lt;/submitcontrol(&lt;none&gt;&lt;/passwordcontrol(password=)&gt;&lt;/textcontrol(username=)&gt;&lt;/post&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como se tiene un s&amp;oacute;lo formulario se usa el par&amp;aacute;metro &lt;code&gt;nr=0&lt;/code&gt;, en el caso que existan varios formularios en dicha p&amp;aacute;gina sigue con los n&amp;uacute;meros consecutivos o se le pasa el nombre del formulario si existe &lt;code&gt;name="nombre"&lt;/code&gt;:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;br.select_form(nr=0)
&lt;code&gt;Ahora se le pasa los datos de usuario y clave, luego se le da click al bot&amp;oacute;n de env&amp;iacute;o:&lt;/code&gt;python 
br.form['username'] = 'usuario'
br.form['password'] = 'clave'
br.submit()
&lt;response_seek_wrapper 0xb6eff5ac="" 0xb6f0a06cl="" 0xb6f0d4ccl="" at="" fp="&amp;lt;socket._fileobject" object="" whose="" wrapped=""&gt;&amp;gt;&amp;gt;
&lt;code&gt;Al ejecutar `response().read()` se mostrar&amp;aacute; la p&amp;aacute;gina de bienvenida del usuario que ingreso a la aplicaci&amp;oacute;n:&lt;/code&gt;python 
print br.response().read()
```
En la siguiente figura se muestra el resultado del comando:  &lt;/response_seek_wrapper&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-6.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se muestran los enlaces disponibles y se selecciona el de publicar:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for enlace in br.links():
...     if enlace.text == "Publicar":
...         s = br.open("%s" %enlace.absolute_url)
...         break
...     else:
...         continue
&lt;code&gt;Se muestra el url de la p&amp;aacute;gina:&lt;/code&gt;python 
print br.geturl()
http://localhost:8050/salvar/
``` 
Ahora se ingresar&amp;aacute; un URL de un sitio, por ejemplo www.python.org:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Primero se despliega el formulario:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for form in br.forms():
...     print form
...
&lt;post (readonly)="" &lt;hiddencontrol(csrfmiddlewaretoken="d3c9e6c2e06f5014647a1711ee3d4908)" application="" http:="" localhost:8050="" salvar="" x-www-form-urlencoded=""&gt;
&lt;textcontrol(url=)&gt;
&lt;textcontrol(title=)&gt;
&lt;textcontrol(tags=)&gt;
&lt;submitcontrol(&lt;none&gt;=save) (readonly)&amp;gt;&amp;gt;
&lt;code&gt;Se tiene que pasar el url, luego el t&amp;iacute;tulo del url y etiquetas:&lt;/code&gt;python 
br.select_form(nr=0)
br.form['url'] = "www.python.org"
br.form['title'] = "Python"
br.form['tags'] = "Python Programacion"
br.submit()
&lt;response_seek_wrapper 0xb6efee0cl="" 0xb6eff86c="" 0xb6f12aacl="" at="" fp="&amp;lt;socket._fileobject" object="" whose="" wrapped=""&gt;&amp;gt;&amp;gt;
&lt;code&gt;Se muestra el contenido de la p&amp;aacute;gina luego de ingresar los datos:&lt;/code&gt;python 
print br.response().read()
```
En la siguiente figura se muestra el resultado:  &lt;/response_seek_wrapper&gt;&lt;/submitcontrol(&lt;none&gt;&lt;/textcontrol(tags=)&gt;&lt;/textcontrol(title=)&gt;&lt;/textcontrol(url=)&gt;&lt;/post&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-7.png"/&gt; &lt;/p&gt;
&lt;p&gt;Para finalizar se presenta los enlaces disponibles para luego cerrar la sesi&amp;oacute;n del usuario:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for link in br.links():
...     if  link.text == "Cerrar Sesion":
...         r = br.open("%s" %link.absolute_url)
...         break
...     else:
...         continue
&lt;code&gt;Se muestra el c&amp;oacute;digo html de la p&amp;aacute;gina resultante luego de dar click en cerrar sesi&amp;oacute;n y la figura donde aparece dicho c&amp;oacute;digo:&lt;/code&gt;python 
print br.response().read()
``` 
&lt;img alt="" src="./images/emulandolanavegacionenpythonconmechanizeparte1-8.png"/&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;En el siguiente art&amp;iacute;culo sobre &lt;code&gt;mechanize&lt;/code&gt; se explicar&amp;aacute; el uso de formularios m&amp;aacute;s complejos que s&amp;oacute;lo entrar datos.  &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content></entry><entry><title>Cálculo de direcciones IP con python</title><link href="https://ecrespo.github.io/calculo-de-direcciones-ip-con-python.html" rel="alternate"></link><published>2012-03-04T09:00:00-05:30</published><updated>2012-03-04T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-03-04:/calculo-de-direcciones-ip-con-python.html</id><summary type="html">&lt;p&gt;Recuerdo cuando vi la materia de redes de computadoras que a uno le tocaba calcular los segmentos de redes, hacer &lt;code&gt;subnetting&lt;/code&gt;, &lt;code&gt;supernetting&lt;/code&gt;, &lt;code&gt;NAT&lt;/code&gt;, etc y  todos los c&amp;aacute;culos se ten&amp;iacute;an que hacer con l&amp;aacute;piz y papel  convirtiendo las direcciones IP en 4  bytes separados por punto, incluso en las clases …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recuerdo cuando vi la materia de redes de computadoras que a uno le tocaba calcular los segmentos de redes, hacer &lt;code&gt;subnetting&lt;/code&gt;, &lt;code&gt;supernetting&lt;/code&gt;, &lt;code&gt;NAT&lt;/code&gt;, etc y  todos los c&amp;aacute;culos se ten&amp;iacute;an que hacer con l&amp;aacute;piz y papel  convirtiendo las direcciones IP en 4  bytes separados por punto, incluso en las clases del postgrado no se permit&amp;iacute;a el uso de calculadoras IP.&lt;/p&gt;
&lt;p&gt;Para python existe una librer&amp;iacute;a que permite realizar los c&amp;aacute;lculos para definir una red, un segmento de red, o reconocer cuando una IP es de un segmento de red dado.&lt;/p&gt;
&lt;p&gt;La librer&amp;iacute;a se llama &lt;code&gt;ipcalc&lt;/code&gt;, se puede ver la descripci&amp;oacute;n y un ejemplo en el siguiente &lt;a href="pypi.python.org/pypi/ipcalc/"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalarlo desde la paqueteria de python se puede usar &lt;code&gt;pip&lt;/code&gt; o &lt;code&gt;easy_install&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="pip install ipcalc"&gt;pip install ipcalc&lt;/h1&gt;
&lt;p&gt;```  &lt;/p&gt;
&lt;p&gt;&amp;Oacute;  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="easy_install ipcalc"&gt;easy_install ipcalc&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Para el caso de Debian se ejecuta &lt;code&gt;apt-get&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-ipcalc"&gt;apt-get install python-ipcalc&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Desde la consola se ejecuta python:&lt;br/&gt;
```
ecrespo@jewel:~$ python
Python 2.7.2+ (default, Dec  1 2011, 01:55:02)
[GCC 4.6.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;`` 
Se importa de&lt;/code&gt;ipcalc` a IP y Network:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from ipcalc import IP, Network
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se presenta el segmento de IPs de la red 192.168.10.0 con bits en 1 de la mascara 30 (mascara 255.255.255.252):  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for x in Network('192.168.10.0/30'): print str(x)
...
192.168.10.0
192.168.10.1
192.168.10.2
192.168.10.3
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como se nota se tiene 4 direcciones IP las cuales la primera (192.168.10.0) es la direcci&amp;oacute;n de sub red y la &amp;uacute;ltima (192.168.10.3) es la direcci&amp;oacute;n de broadcast de esa sub red.&lt;/p&gt;
&lt;p&gt;Si se cambia los bits de la mascara a 29 aumenta el rango de IPs de dicha sub red de 4 a 8 IPs:  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for x in Network('192.168.10.0/29'): print str(x)
...
192.168.10.0
192.168.10.1
192.168.10.2
192.168.10.3
192.168.10.4
192.168.10.5
192.168.10.6
192.168.10.7
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tambi&amp;eacute;n se puede consultar si una IP dada se encuentra en un segmento de red o sub red, como ejemplo se consultar&amp;aacute; si la IP 192.168.10.8 se encuentra en la sub red 192.168.10.0/29 (obvio que no):  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'192.168.10.8' in Network('192.168.10.0/29')
False
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Si se prueba con la IP 192.168.10.1 devuelve True la consulta:  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'192.168.10.1' in Network('192.168.10.0/29')
True
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;El &amp;uacute;ltimo ejemplo es el caso de una red 192.68.10.0/22 &amp;oacute; 192.168.10.0/255.255.252.0, se quiere averiguar la IP inicial y la IP final de dicho segmento de red:  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'192.168.9.1' in Network('192.168.10.0/22')
False
'192.168.9.255' in Network('192.168.10.0/22')
False
'192.168.10.0' in Network('192.168.10.0/22')
True
'192.168.10.1' in Network('192.168.10.0/22')
True
'192.168.11.1' in Network('192.168.10.0/22')
True
'192.168.12.1' in Network('192.168.10.0/22')
True
'192.168.13.1' in Network('192.168.10.0/22')
True
'192.168.14.1' in Network('192.168.10.0/22')
False
'192.168.13.255' in Network('192.168.10.0/22')
True
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Con este resultado se tiene que la IP inicial es la 192.168.10.0 hasta la IP 192.168.13.255.&lt;/p&gt;
&lt;p&gt;Se puede usar tambi&amp;eacute;n para calcular IPs de IPv6.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Seguridad"></category><category term="Ubuntu"></category></entry><entry><title>Crear llave gpg desde Python</title><link href="https://ecrespo.github.io/crear-llave-gpg-desde-python.html" rel="alternate"></link><published>2012-03-03T09:00:00-05:30</published><updated>2012-03-03T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-03-03:/crear-llave-gpg-desde-python.html</id><summary type="html">&lt;p&gt;Existen varias herramientas para crear, manipular llaves &lt;code&gt;gpg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quienes no conozcan de &lt;code&gt;GPG&lt;/code&gt; pueden leer el siguiente &lt;a href="http://personales.upv.es/%7Ealalbiol/pages/Mini_Tutorial_GPG.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El paquete para python que permite manejar  las llaves &lt;code&gt;gpg&lt;/code&gt; es &lt;code&gt;python-pyme&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-pyme python-pyme-doc"&gt;apt-get install python-pyme python-pyme-doc&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n de la librer&amp;iacute;a pyme la encuentran en el siguiente &lt;a href="http://pyme.sourceforge.net/doc/pyme/index.html"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la documentaci&amp;oacute;n se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Existen varias herramientas para crear, manipular llaves &lt;code&gt;gpg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quienes no conozcan de &lt;code&gt;GPG&lt;/code&gt; pueden leer el siguiente &lt;a href="http://personales.upv.es/%7Ealalbiol/pages/Mini_Tutorial_GPG.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El paquete para python que permite manejar  las llaves &lt;code&gt;gpg&lt;/code&gt; es &lt;code&gt;python-pyme&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-pyme python-pyme-doc"&gt;apt-get install python-pyme python-pyme-doc&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n de la librer&amp;iacute;a pyme la encuentran en el siguiente &lt;a href="http://pyme.sourceforge.net/doc/pyme/index.html"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la documentaci&amp;oacute;n se tiene una lista de ejemplos, se copia el archivo de &lt;code&gt;genkey.py&lt;/code&gt; al home del usuario:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp /usr/share/doc/python-pyme-doc/examples/genkey.py ~/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se edita el archivo &lt;code&gt;genkey.py&lt;/code&gt;, se modifica el tipo de llave a RSA, se define la longitud de la llave (1024,2048 o 4096), longitud de la subllave (el mismo valor de la l&amp;ntilde;ongitud de la llave), el nombre real, comentario del nombre, correo, frase de la llave, fecha de expiraci&amp;oacute;n de la llave.&lt;br/&gt;
```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="$id: genkey.py,v 1.6 2008/03/08 18:21:08 belyi exp $"&gt;$Id: genkey.py,v 1.6 2008/03/08 18:21:08 belyi Exp $&lt;/h1&gt;
&lt;h1 id="copyright (c) 2004 igor belyi belyi@users.sourceforge.net"&gt;Copyright (C) 2004 Igor Belyi &lt;a href="mailto:belyi@users.sourceforge.net"&gt;belyi@users.sourceforge.net&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="copyright (c) 2002 john goerzen jgoerzen@complete.org"&gt;Copyright (C) 2002 John Goerzen &lt;a href="mailto:jgoerzen@complete.org"&gt;jgoerzen@complete.org&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="this program is free software; you can redistribute it and/or #modify"&gt;This program is free software; you can redistribute it and/or #modify&lt;/h1&gt;
&lt;h1 id="it under the terms of the gnu general public license as #published by"&gt;it under the terms of the GNU General Public License as #published by&lt;/h1&gt;
&lt;h1 id="the free software foundation; either version 2 of the license, or"&gt;the Free Software Foundation; either version 2 of the License, or&lt;/h1&gt;
&lt;h1 id="(at your option) any later version."&gt;(at your option) any later version.&lt;/h1&gt;
&lt;h1 id="_2"&gt;&lt;/h1&gt;
&lt;h1 id="this program is distributed in the hope that it will be useful,"&gt;This program is distributed in the hope that it will be useful,&lt;/h1&gt;
&lt;h1 id="but without any warranty; without even the implied warranty #of"&gt;but WITHOUT ANY WARRANTY; without even the implied warranty #of&lt;/h1&gt;
&lt;h1 id="merchantability or fitness for a particular purpose. #see the"&gt;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  #See the&lt;/h1&gt;
&lt;h1 id="gnu general public license for more details."&gt;GNU General Public License for more details.&lt;/h1&gt;
&lt;h1 id="_3"&gt;&lt;/h1&gt;
&lt;h1 id="you should have received a copy of the gnu general public #license"&gt;You should have received a copy of the GNU General Public #License&lt;/h1&gt;
&lt;h1 id="along with this program; if not, write to the free software"&gt;along with this program; if not, write to the Free Software&lt;/h1&gt;
&lt;h1 id="foundation, inc., 59 temple place, suite 330, boston, ma #02111-1307 #usa"&gt;Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  #02111-1307  #USA&lt;/h1&gt;
&lt;h1 id="importar pyme"&gt;Importar pyme&lt;/h1&gt;
&lt;p&gt;from pyme import core, callbacks&lt;/p&gt;
&lt;h1 id="initialize our context."&gt;Initialize our context.&lt;/h1&gt;
&lt;h1 id="inicializa el contexto."&gt;Inicializa el contexto.&lt;/h1&gt;
&lt;p&gt;core.check_version(None)
c = core.Context()&lt;/p&gt;
&lt;h1 id="se define algunas configuraciones"&gt;Se define algunas configuraciones&lt;/h1&gt;
&lt;p&gt;c.set_armor(1)
c.set_progress_cb(callbacks.progress_stdout, None)&lt;/p&gt;
&lt;h1 id="this example from the gpgme manual"&gt;This example from the GPGME manual&lt;/h1&gt;
&lt;h1 id="este es un ejemplo desde el manual gpgme."&gt;Este es un ejemplo desde el manual gpgme.&lt;/h1&gt;
&lt;p&gt;parms = """&lt;gnupgkeyparms format="internal"&gt;
Key-Type: RSA
Key-Length: 2048
Subkey-Type: ELG-E
Subkey-Length: 2048
Name-Real: Ernesto Nadir Crespo Avila
Name-Comment: seraph1
Name-Email: ecrespo@gmail.com
Passphrase: frasedelallave
Expire-Date: 2020-08-15
&lt;/gnupgkeyparms&gt;
"""&lt;/p&gt;
&lt;h1 id="se genera la llave pasandole los parametros."&gt;Se genera la llave pasandole los par&amp;aacute;metros.&lt;/h1&gt;
&lt;p&gt;c.op_genkey(parms, None, None)&lt;/p&gt;
&lt;h1 id="se imprime en patanalla el resultado de la generacion."&gt;Se imprime en patanalla el resultado de la generaci&amp;oacute;n.&lt;/h1&gt;
&lt;p&gt;print c.op_genkey_result().fpr
``` &lt;/p&gt;
&lt;p&gt;Para crear la llave se ejecuta el archivo &lt;code&gt;genkey.py&lt;/code&gt;:&lt;br/&gt;
&lt;code&gt;python 
$python genkey.py
......
PROGRESS UPDATE: what = primegen, type = 46, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 46, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 43, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 43, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 43, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 43, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 43, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 94, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 94, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 94, current = 0, total = 0
PROGRESS UPDATE: what = primegen, type = 94, current = 0, total = 0
FFF598686F3ADE35C52BF65E4478C8341643F0EB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Al desplegar la lista de llaves se tiene lo siguiente:&lt;br/&gt;
&lt;code&gt;python 
$gpg --list-keys
...
pub   2048R/1643F0EB 2012-03-04 [caduca: 2020-08-15]
uid                  Ernesto Nadir Crespo Avila (seraph1) &amp;lt;ecrespo@gmail.com&amp;gt;
sub   2048g/9F8E9C20 2012-03-04 [caduca: 2020-08-15]&lt;/code&gt;
Los &amp;uacute;ltimos 8 n&amp;uacute;meros hexagecimales es el identificador de la llave &lt;code&gt;gpg&lt;/code&gt;. Luego se exporta a un servidor de llaves y se puede compartir la llave p&amp;uacute;blica para firmar o cifrar correos.&lt;/p&gt;
&lt;h2 id="_4"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Seguridad"></category><category term="Ubuntu"></category></entry><entry><title>Geolocalización de direcciones IP y dominios de Internet con GeoIP en python</title><link href="https://ecrespo.github.io/geolocalizacion-de-direcciones-ip-y-dominios-de-internet-con-geoip-en-python.html" rel="alternate"></link><published>2012-02-26T09:00:00-05:30</published><updated>2012-02-26T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-02-26:/geolocalizacion-de-direcciones-ip-y-dominios-de-internet-con-geoip-en-python.html</id><summary type="html">&lt;p&gt;A nivel mundial se crearon varios grupos de direcciones IP de IPv4 (Clases A,B o C) la cual permiten definir redes y rango de equipos para dichas redes.&lt;/p&gt;
&lt;p&gt;Claro actualmente se est&amp;aacute; migrando a IPv6 ya que las direcciones IPv4 se agotaron hace un par de a&amp;ntilde;os aproximadamente (aunque …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A nivel mundial se crearon varios grupos de direcciones IP de IPv4 (Clases A,B o C) la cual permiten definir redes y rango de equipos para dichas redes.&lt;/p&gt;
&lt;p&gt;Claro actualmente se est&amp;aacute; migrando a IPv6 ya que las direcciones IPv4 se agotaron hace un par de a&amp;ntilde;os aproximadamente (aunque existan soluciones como NAT, Subnetting o Supernetting que permiten utilizar m&amp;aacute;s eficientemente las IPs).&lt;/p&gt;
&lt;p&gt;Con GeoIP para python se puede averiguar de cual Pa&amp;iacute;s proviene una IP, tambi&amp;eacute;n se puede conocer un dominio o sitio en espec&amp;iacute;fico donde se encuentra alojado, conocer el rango de IPs de una clase de IPv4.&lt;/p&gt;
&lt;p&gt;Para instalar &lt;code&gt;python-geoip&lt;/code&gt; a lo Debian (Debian, Canaima, Ubuntu, LinuxMint), se convierte el usuario en superusuario y ejecuta:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-geoip"&gt;apt-get install python-geoip&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Se ejecuta el interprete de comandos de python:&lt;br/&gt;
```
ecrespo@jewel:~$ python
Python 2.7.2+ (default, Dec  1 2011, 01:55:02)
[GCC 4.6.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Se importa el m&amp;oacute;dulo `geoip`:&lt;/code&gt;python 
import GeoIP
&lt;code&gt;Se crea el objeto de la Instancia de GeoIP, asociandole la informaci&amp;oacute;n de GeoIP de la memoria Cache:&lt;/code&gt;python 
gi = GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE)
&lt;code&gt;Se busca en cual Pa&amp;iacute;s se encuentra alojado yahoo.com:&lt;/code&gt;python 
print gi.country_code_by_name("yahoo.com")
US
print gi.country_name_by_name("yahoo.com")
United States
```
En el primer caso se devuelve el c&amp;oacute;digo del Pa&amp;iacute;s, en el segundo se devuelve el nombre del Pa&amp;iacute;s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahora se probar&amp;aacute; con yahoo.es:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print gi.country_code_by_name("www.yahoo.es")
IE
print gi.country_name_by_name("www.yahoo.es")
Ireland
```
Se nota que yahoo.com est&amp;aacute; alojado en Estados Unidos y yahoo.es se encuentra alojado en Irlanda.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahora se buscar&amp;aacute; en cual Pa&amp;iacute;s se encuentra alojado www.cantv.net (es obvio):&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print gi.country_code_by_name("www.cantv.net")
VE
print gi.country_name_by_name("www.cantv.net")
Venezuela
&lt;code&gt;Aunque es posible que dominios de Venezuela se encuentren alojados en otros Pa&amp;iacute;ses, un ejemplo ser&amp;iacute;a www.crespo.org.ve:&lt;/code&gt;python 
print gi.country_name_by_name("www.crespo.org.ve")
Sweden
&lt;code&gt;Para terminar se probar&amp;aacute; averiguar el Pa&amp;iacute;s seg&amp;uacute;n la IP que se le pase:&lt;/code&gt;python 
print gi.country_name_by_addr("24.24.24.24")
United States
print gi.country_name_by_addr("150.186.32.0")
Venezuela
```
La primera IP se encuentra en Estados Unidos y la segunda en Venezuela.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para averiguar el rango de IPs de la IP de Venezuela se ejecuta &lt;code&gt;geoip&lt;/code&gt; solicitando que devuelva el rango de IPs:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;print gi.range_by_ip("150.186.32.0")
('150.185.0.0', '150.189.255.255'
```
Est&amp;aacute; Ip por el rango de direcciones que maneja es una clase B.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Con esta herramienta se puede usar para aplicaciones Web con Django por ejemplo y dicha aplicaciones puede mostrar informaci&amp;oacute;n del Pa&amp;iacute;s donde se conectan los usuarios.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Linux"></category><category term="Python"></category><category term="Redes"></category><category term="Ubuntu"></category></entry><entry><title>Cifrar el tráfico de DNS en Linux con DNSCrypt y OpenDNS</title><link href="https://ecrespo.github.io/cifrar-el-trafico-de-dns-en-linux-con-dnscrypt-y-opendns.html" rel="alternate"></link><published>2012-02-20T09:00:00-05:30</published><updated>2012-02-20T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-02-20:/cifrar-el-trafico-de-dns-en-linux-con-dnscrypt-y-opendns.html</id><summary type="html">&lt;p&gt;&lt;code&gt;DNSCrypt&lt;/code&gt; permite cifrar las consultas de DNS entre el Computador y los servidores de DNS de OpenDNS, de esa forma se puede proteger al equipo de los ataques de Hombre en el Medio.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo donde se basa este tutorial se encuentra en el siguiente &lt;a href="http://www.webupd8.org/2014/08/encrypt-dns-traffic-in-ubuntu-with.html"&gt;enlace&lt;/a&gt;.
Para instalar &lt;code&gt;dnscrypt&lt;/code&gt; para …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;DNSCrypt&lt;/code&gt; permite cifrar las consultas de DNS entre el Computador y los servidores de DNS de OpenDNS, de esa forma se puede proteger al equipo de los ataques de Hombre en el Medio.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo donde se basa este tutorial se encuentra en el siguiente &lt;a href="http://www.webupd8.org/2014/08/encrypt-dns-traffic-in-ubuntu-with.html"&gt;enlace&lt;/a&gt;.
Para instalar &lt;code&gt;dnscrypt&lt;/code&gt; para Debian se baja el paquete desde el repositorio de &lt;a href="https://github.com/opendns/dnscrypt-proxy/downloads"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se ejecuta &lt;code&gt;dpkg&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="dpkg -i dnscrypt-proxy_0.9_i386.deb"&gt;dpkg -i dnscrypt-proxy_0.9_i386.deb&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Se inicia el proxy dns como demonio:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="dnscrypt-proxy --daemonize"&gt;dnscrypt-proxy --daemonize&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Se edita las conexiones inal&amp;aacute;mbricas en este caso en la red que se conecta el equipo es inal&amp;aacute;mbrica:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/cifrareltraficodednsenlinuxcondnscryptyopendns-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se selecciona la red inal&amp;aacute;mbrica y se edita su configuraci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/cifrareltraficodednsenlinuxcondnscryptyopendns-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se selecciona la pesta&amp;ntilde;a de Ajuste de IPv4, en el m&amp;eacute;todo se selecciona S&amp;oacute;lo direcciones autom&amp;aacute;ticas (DHCP) y se coloca la IP 127.0.0.1 en Servidor de DNS:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/cifrareltraficodednsenlinuxcondnscryptyopendns-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Para verificar que se est&amp;eacute; usando los servidores de DNS de &lt;code&gt;OpenDNS&lt;/code&gt; se abre el navegador a la URL http://www.opendns.com/welcome :  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/cifrareltraficodednsenlinuxcondnscryptyopendns-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ya se tiene cifrado la comunicaci&amp;oacute;n a los servidores de &lt;code&gt;OpenDNS&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="DNS"></category><category term="gnome"></category><category term="Linux"></category><category term="Redes"></category><category term="Seguridad"></category><category term="Ubuntu"></category></entry><entry><title>Conectarse al repositorio de bitbucket desde python</title><link href="https://ecrespo.github.io/conectarse-al-repositorio-de-bitbucket-desde-python.html" rel="alternate"></link><published>2012-02-19T09:00:00-05:30</published><updated>2012-02-19T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-02-19:/conectarse-al-repositorio-de-bitbucket-desde-python.html</id><summary type="html">&lt;p&gt;Para tener un proyecto con control de versiones mercurial s&amp;oacute;lo veo 2 opciones usar &lt;a href="https://code.google.com/"&gt;Google Code &lt;/a&gt; o &lt;a href="https://bitbucket.org/product/"&gt;Bitbucket&lt;/a&gt;.  Para el caso de Google Code se puede acceder v&amp;iacute;a el api para usar mercurial con python como se explico en art&amp;iacute;culo &lt;a href="https://ecrespo.github.io/api-de-mercurial-para-python.html#api-de-mercurial-para-python"&gt;anterior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para Bitbucket se tiene un API para acceder a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para tener un proyecto con control de versiones mercurial s&amp;oacute;lo veo 2 opciones usar &lt;a href="https://code.google.com/"&gt;Google Code &lt;/a&gt; o &lt;a href="https://bitbucket.org/product/"&gt;Bitbucket&lt;/a&gt;.  Para el caso de Google Code se puede acceder v&amp;iacute;a el api para usar mercurial con python como se explico en art&amp;iacute;culo &lt;a href="https://ecrespo.github.io/api-de-mercurial-para-python.html#api-de-mercurial-para-python"&gt;anterior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para Bitbucket se tiene un API para acceder a la informaci&amp;oacute;n del repositorio que en python se llama &lt;a href="https://bitbucket.org/jmoiron/python-bitbucket/"&gt;python-bitbucket.&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Para instalarlo se sigue los siguientes pasos:  &lt;/p&gt;
&lt;p&gt;A lo Debian/Canaima/Ubuntu/LinuxMint:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-bitbucket"&gt;apt-get install python-bitbucket&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Con la herramienta &lt;code&gt;easy_install&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="easy_install bitbucket"&gt;easy_install bitbucket&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Con la herramienta &lt;code&gt;pip&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="pip install bitbucket"&gt;pip install bitbucket&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Usar el API de bitbucket:  &lt;/p&gt;
&lt;p&gt;Desde la consola de python, se importa el m&amp;oacute;dulo &lt;code&gt;bitbucket&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;```python 
$python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import bitbucket
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se crea la instancia de bitbucket.&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bb = bitbucket.BitBucket()
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se establece conexi&amp;oacute;n a la cuenta de &lt;code&gt;bitbucket&lt;/code&gt; :  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bb = bitbucket.BitBucket('ecrespo', 'clave')
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se verifica que se autentic&amp;oacute; en el servicio:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bb
&lt;bitbucket (auth:="" api="" ecrespo)=""&gt;
```&lt;/bitbucket&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se asocia la cuenta:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ecrespo = bb.user('ecrespo')
ecrespo
&lt;user: ecrespo=""&gt;
```&lt;/user:&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se lista los repositorios del usuario (se devuelve una lista con los repositorios del usuario, cada elemento de la lista es un diccionario con la informaci&amp;oacute;n del repositorio):&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ecrespo.repositories()
[{u'scm': u'hg', u'has_wiki': True, u'last_updated': u'2011-09-12   03:56:37', u'created_on': u'2009-04-09 22:42:58', u'owner': u'ecrespo',     u'logo': None, u'email_mailinglist': u'', u'is_mq': False, u'size': 747499, u'read_only': False, u'fork_of': None, u'mq_of': None, u'state': u'available', u'utc_created_on': u'2009-04-09 20:42:58+00:00', u'website': u'', u'description': u'Script que automatiza el proceso de conversi\xf3n de un sistema Debian/Ubuntu para que sea accesible para las personas con discapacidad visual', u'has_issues': True, u'is_fork': False, u'slug': u'automatizar-accesibilidad', u'is_private': False, u'name': u'automatizar-accesibilidad', u'language': u'', u'utc_last_updated': u'2011-09-12 01:56:37+00:00', u'email_writers': True, u'main_branch': u'default', u'no_public_forks': False, u'resource_uri': u'/api/1.0/repositories/ecrespo/automatizar-accesibilidad'}, {u'scm': u'hg', u'has_wiki': True, u'last_updated': u'2011-09-08 13:09:06', u'created_on': u'2011-08-04 05:02:06', u'owner': u'ecrespo', u'logo': None, u'email_mailinglist': u'', u'is_mq': False, u'size': 545, u'read_only': False, u'fork_of': None, u'mq_of': None, u'state': u'available', u'utc_created_on': u'2011-08-04 03:02:06+00:00', u'website': u'', u'description': u'Lista de paquetes para la accesibilidad con una descripci\xf3n y pruebas de los mismos', u'has_issues': False, u'is_fork': False, u'slug': u'accesibilidad', u'is_private': True, u'name': u'accesibilidad', u'language': u'', u'utc_last_updated': u'2011-09-08 11:09:06+00:00', u'email_writers': True, u'main_branch': None, u'no_public_forks': False, u'resource_uri': u'/api/1.0/repositories/ecrespo/accesibilidad'}]
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se captura la descripci&amp;oacute;n del repositorio y la ruta del mismo:&lt;br/&gt;
```python &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ecrespo.repositories()[0]['description']
u'Script que automatiza el proceso de conversi\xf3n de un sistema Debian/Ubuntu para que sea accesible para las personas con discapacidad visual'&lt;/p&gt;
&lt;p&gt;ecrespo.repositories()[0]['resource_uri']
u'/api/1.0/repositories/ecrespo/automatizar-accesibilidad'
&lt;code&gt;Se asocia a uno de los repositorios, en este caso el de accesibilidad.&lt;/code&gt;python 
pyaccesibilidad=ecrespo.repository('accesibilidad')&lt;/p&gt;
&lt;p&gt;pyaccesibilidad
&lt;repository: accesibilidad="" ecrespo's=""&gt;
&lt;code&gt;Se lista los tags o branches (para el caso del repositorio accesibilidad devuelve diccionarios vac&amp;iacute;os):&lt;/code&gt;python 
pyaccesibilidad.tags()
{}&lt;/repository:&gt;&lt;/p&gt;
&lt;p&gt;pyaccesibilidad.branches()
{}
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Control de versiones"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Mercurial"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Obtener información de las interfaces de red con python(netifaces)</title><link href="https://ecrespo.github.io/obtener-informacion-de-las-interfaces-de-red-con-pythonnetifaces.html" rel="alternate"></link><published>2012-02-07T09:00:00-05:30</published><updated>2012-02-07T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-02-07:/obtener-informacion-de-las-interfaces-de-red-con-pythonnetifaces.html</id><summary type="html">&lt;p&gt;Existe un m&amp;oacute;dulo en python que permite obtener la informaci&amp;oacute;n de las interfaces de red.&lt;/p&gt;
&lt;p&gt;Dicho m&amp;oacute;dulo se llama &lt;code&gt;netifaces&lt;/code&gt;, con &amp;eacute;l se puede obtener la lista de interfaces de su equipo, obtener la informaci&amp;oacute;n de Enlace de Red de cada interfaz, su direcci&amp;oacute;n IPv4 y su Direcci&amp;oacute;n IPv6.&lt;/p&gt;
&lt;p&gt;Para …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Existe un m&amp;oacute;dulo en python que permite obtener la informaci&amp;oacute;n de las interfaces de red.&lt;/p&gt;
&lt;p&gt;Dicho m&amp;oacute;dulo se llama &lt;code&gt;netifaces&lt;/code&gt;, con &amp;eacute;l se puede obtener la lista de interfaces de su equipo, obtener la informaci&amp;oacute;n de Enlace de Red de cada interfaz, su direcci&amp;oacute;n IPv4 y su Direcci&amp;oacute;n IPv6.&lt;/p&gt;
&lt;p&gt;Para instalar el m&amp;oacute;dulo se ejecuta &lt;code&gt;apt-get&lt;/code&gt; para el caso de Debian/Canaima/Ubuntu.  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-netifaces"&gt;apt-get install python-netifaces&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La idea es crear un script que capture la lista de interfaces del equipo y muestre la informaci&amp;oacute;n de cada una de dichas interfaces.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa se muestra a continuaci&amp;oacute;n:  &lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa el modulo netifaces"&gt;Se importa el modulo netifaces&lt;/h1&gt;
&lt;p&gt;import netifaces&lt;/p&gt;
&lt;h1 id="se captura la lista de interfaces en el equipo"&gt;Se captura la lista de interfaces en el equipo&lt;/h1&gt;
&lt;p&gt;interfaces = netifaces.interfaces()&lt;/p&gt;
&lt;h1 id="se muestra las interfaces"&gt;Se muestra las interfaces&lt;/h1&gt;
&lt;p&gt;print "interfaces: ", interfaces&lt;/p&gt;
&lt;h1 id="se recorre la lista de interfaces"&gt;Se recorre la lista de interfaces&lt;/h1&gt;
&lt;p&gt;for interface in interfaces:&lt;/p&gt;
&lt;h1 id="se captura la informacion de cada interfaz"&gt;Se captura la informacion de cada interfaz&lt;/h1&gt;
&lt;p&gt;datos = netifaces.ifaddresses(interface)
print "--------------------------"&lt;/p&gt;
&lt;h1 id="se muestra el nombre de la interface"&gt;Se muestra el nombre de la interface&lt;/h1&gt;
&lt;p&gt;print "Interface: %s" %interface&lt;/p&gt;
&lt;h1 id="se captura la lista de parametros que tiene la interface"&gt;Se captura la lista de parametros que tiene la interface&lt;/h1&gt;
&lt;p&gt;variables = datos.keys()&lt;/p&gt;
&lt;h1 id="se muestra la direccion de la capa de enlace de red de la interface"&gt;Se muestra la direccion de la capa de enlace de red de la interface&lt;/h1&gt;
&lt;p&gt;print "Capa de enlace de red: ", datos[netifaces.AF_LINK][0]['addr']&lt;/p&gt;
&lt;h1 id="si esta presente la informacion de ipv4 se muestra"&gt;Si esta presente la informacion de IPV4 se muestra&lt;/h1&gt;
&lt;p&gt;if netifaces.AF_INET in variables:
print "IPv4: IP: %s, Mascara: %s" %(datos[netifaces.AF_INET][0]['addr'], datos[netifaces.AF_INET][0]['netmask'])&lt;/p&gt;
&lt;h1 id="si esta presente la informacion de ipv6 se muestra"&gt;Si esta presente la informacion de IPv6 se muestra&lt;/h1&gt;
&lt;p&gt;if netifaces.AF_INET in variables:
print "IPv6: IP: %s, Mascara: %s " %(datos[netifaces.AF_INET6][0]   ['addr'], datos[netifaces.AF_INET6][0]['netmask'])
&lt;code&gt;El resultado del programa se muestra a continuaci&amp;oacute;n:&lt;/code&gt;python 
interfaces: ['lo', 'eth0', 'wlan0']&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Interface: lo
Capa de enlace de red: 00:00:00:00:00:00
IPv4: IP: 127.0.0.1, Mascara: 255.0.0.0
IPv6: IP: ::1, Mascara: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Interface: eth0
Capa de enlace de red: 71:6a:b7:77:46:5f&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Interface: wlan0
Capa de enlace de red: 00:26:85:74:fe:89
IPv4: IP: 192.168.10.108, Mascara: 255.255.255.0
IPv6: IP: fe80::236:92ff:fa54:fe89%wlan0, Mascara: ffff:ffff:ffff:ffff::
```
Para m&amp;aacute;s informaci&amp;oacute;n sobre el m&amp;oacute;dulo pueden visitar la informaci&amp;oacute;n en la p&amp;aacute;gina de &lt;a href="https://pypi.org/project/netifaces/"&gt;Python&lt;/a&gt; o el sitio de la &lt;a href="https://alastairs-place.net/projects/netifaces/"&gt;aplicaci&amp;oacute;n&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Redes"></category><category term="Ubuntu"></category></entry><entry><title>WebService con Soappy</title><link href="https://ecrespo.github.io/webservice-con-soappy.html" rel="alternate"></link><published>2012-02-06T09:30:00-05:30</published><updated>2012-02-06T09:30:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-02-06:/webservice-con-soappy.html</id><summary type="html">&lt;p&gt;Hace ya mucho tiempo escrib&amp;iacute; un ejemplo de como usar &lt;a href="https://ecrespo.github.io/ejemplo-xml-rpc-en-python.html"&gt;xml-rpc &lt;/a&gt; desde python como webservice.
En este caso se explicar&amp;aacute; el uso de otro protocolo que deriva de &lt;code&gt;xml-rpc&lt;/code&gt; que se llama &lt;code&gt;SOAP&lt;/code&gt; (Simple Object Access Protocol).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SOAP&lt;/code&gt; es un protocolo est&amp;aacute;ndar que define c&amp;oacute;mo dos objetos en diferentes procesos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace ya mucho tiempo escrib&amp;iacute; un ejemplo de como usar &lt;a href="https://ecrespo.github.io/ejemplo-xml-rpc-en-python.html"&gt;xml-rpc &lt;/a&gt; desde python como webservice.
En este caso se explicar&amp;aacute; el uso de otro protocolo que deriva de &lt;code&gt;xml-rpc&lt;/code&gt; que se llama &lt;code&gt;SOAP&lt;/code&gt; (Simple Object Access Protocol).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SOAP&lt;/code&gt; es un protocolo est&amp;aacute;ndar que define c&amp;oacute;mo dos objetos en diferentes procesos pueden comunicarse por medio del intercambio de datos &lt;code&gt;XML&lt;/code&gt;. Pueden conseguir m&amp;aacute;s informaci&amp;oacute;n en la p&amp;aacute;gina de &lt;a href="https://es.wikipedia.org/wiki/SOAP"&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En python existe un m&amp;oacute;dulo para trabajar con SOAP que se llama &lt;a href="https://pypi.org/project/SOAPpy/"&gt;soappy&lt;/a&gt;. Lo primero que se har&amp;aacute; es instalarlo.  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python-soappy"&gt;apt-get install python-soappy&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La idea es crear 4 funciones, de suma, resta, multiplicaci&amp;oacute;n y divisi&amp;oacute;n, registrarlas en el servicio &lt;code&gt;SOAP&lt;/code&gt;, levantar el servidor y realizar las llamadas desde el cliente.&lt;/p&gt;
&lt;p&gt;El programa servidor de &lt;code&gt;SOAP&lt;/code&gt; es el siguiente:&lt;br/&gt;
```&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;import SOAPpy&lt;/p&gt;
&lt;h1 id="funciones que devuelven la suma, resta, multiplicacion y division de 2 numeros"&gt;Funciones que devuelven la suma, resta, multiplicacion y division de 2 numeros&lt;/h1&gt;
&lt;p&gt;def suma(a,b):
    return a+b&lt;/p&gt;
&lt;p&gt;def resta(a,b):
    return a-b&lt;/p&gt;
&lt;p&gt;def multiplicacion(a,b):
    return a*b&lt;/p&gt;
&lt;p&gt;def division(a,b):
    return a/b&lt;/p&gt;
&lt;h1 id="se crea la instancia del servicio soap en el equipo por el puerto 8080."&gt;Se crea la instancia del servicio SOAP en el equipo por el puerto 8080.&lt;/h1&gt;
&lt;p&gt;server = SOAPpy.SOAPServer(("localhost", 8080))&lt;/p&gt;
&lt;h1 id="registro de las funciones suma,resta, multiplicacion y division"&gt;Registro de las funciones suma,resta, multiplicacion y division&lt;/h1&gt;
&lt;h1 id="en el servicio soap."&gt;en el servicio SOAP.&lt;/h1&gt;
&lt;p&gt;server.registerFunction(suma)
server.registerFunction(resta)
server.registerFunction(multiplicacion)
server.registerFunction(division)&lt;/p&gt;
&lt;h1 id="levantar el servicio soap."&gt;Levantar el servicio SOAP.&lt;/h1&gt;
&lt;p&gt;server.serve_forever()
&lt;code&gt;El programa cliente de `SOAP` es el siguiente:&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa el modulo soappy"&gt;Se importa el modulo SOAPpy&lt;/h1&gt;
&lt;p&gt;import SOAPpy&lt;/p&gt;
&lt;h1 id="se crea la instancia del proxy soap"&gt;Se crea la instancia del proxy SOAP&lt;/h1&gt;
&lt;h1 id="a el servidor soap"&gt;a el servidor SOAP&lt;/h1&gt;
&lt;p&gt;server = SOAPpy.SOAPProxy("http://localhost:8080/")&lt;/p&gt;
&lt;h1 id="se llama las funciones registradas en el servidor soap"&gt;Se llama las funciones registradas en el servidor SOAP&lt;/h1&gt;
&lt;p&gt;print "El resultado de la suma es: ", server.suma(5,10)
print "El resultado de la resta es: ",server.resta(20,5)
print "El resultado de la multiplicacion es: ", server.multiplicacion(10,5)
print "El resultado de la division es: ", server.division(10,3)
```&lt;/p&gt;
&lt;p&gt;Se le da permisos de ejecuci&amp;oacute;n a ambos archivos, se ejecuta primero el servidor y luego el cliente que devuelve el siguiente resultado:&lt;/p&gt;
&lt;p&gt;Se ejecuta cada programa en una consola distinta.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ecrespo@jewel:~/bin$ ./soapservidor.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ecrespo@jewel:~/bin$ ./soapcliente.py
El resultado de la suma es:  15
El resultado de la resta es:  15
El resultado de la multiplicacion es:  50
El resultado de la division es:  3&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>API de Mercurial para Python</title><link href="https://ecrespo.github.io/api-de-mercurial-para-python.html" rel="alternate"></link><published>2012-01-24T09:00:00-05:30</published><updated>2012-01-24T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-01-24:/api-de-mercurial-para-python.html</id><summary type="html">&lt;p&gt;Mercurial, como ya se ha explicado es un sistema de control de versiones distribu&amp;iacute;do desarrollado en python, otros sistemas de control de versiones tienen API o m&amp;oacute;dulos para python, pero para el caso de mercurial no hab&amp;iacute;a visto una API para usarlo desde python.&lt;/p&gt;
&lt;p&gt;Revisando los art&amp;iacute;culos que publican en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mercurial, como ya se ha explicado es un sistema de control de versiones distribu&amp;iacute;do desarrollado en python, otros sistemas de control de versiones tienen API o m&amp;oacute;dulos para python, pero para el caso de mercurial no hab&amp;iacute;a visto una API para usarlo desde python.&lt;/p&gt;
&lt;p&gt;Revisando los art&amp;iacute;culos que publican en los sparks de python  en Google+ me encuentro con que existe un API que se llama &lt;a href="https://bitbucket.org/haard/hgapi"&gt;hgapi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El API soporta lo siguiente:
&lt;code&gt;hg init
hg id
hg add &amp;lt;file&amp;gt;
hg commit [files] [-u name] [--close-branch]
hg update &amp;lt;rev&amp;gt;
hg heads
hg log
hg remove
hg status
hg merge (fails on conflict)
hg revert&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El procedimiento para instalarlo es el siguiente:&lt;br/&gt;
```python &lt;/p&gt;
&lt;h1 id="pip install hgapi"&gt;pip install hgapi&lt;/h1&gt;
&lt;p&gt;Downloading/unpacking hgapi
Downloading hgapi-1.1.0.tar.gz
Running setup.py egg_info for package hgapi&lt;/p&gt;
&lt;p&gt;Installing collected packages: hgapi
Running setup.py install for hgapi&lt;/p&gt;
&lt;p&gt;Successfully installed hgapi
Cleaning up...
```
Se crea el directorio pruebas:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$mkdir pruebas&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dentro del directorio pruebas se crea el archivo &lt;code&gt;hora.txt&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd pruebas
touch hora.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ya est&amp;aacute; todo listo para probar el API.&lt;/p&gt;
&lt;h6 id="1. se importa el modulo hgapi:"&gt;1.  Se importa el m&amp;oacute;dulo &lt;code&gt;hgapi&lt;/code&gt;:&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;python 
import hgapi&lt;/code&gt; &lt;/p&gt;
&lt;h6 id="2. fuera del directorio pruebas se crea la instancia del repositorio:"&gt;2. Fuera del directorio &lt;code&gt;pruebas&lt;/code&gt; se crea la instancia del repositorio:&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;python 
repo = hgapi.Repo("pruebas")&lt;/code&gt; &lt;/p&gt;
&lt;h6 id="3. se inicializa el repositorio:"&gt;3. Se inicializa el repositorio:&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;python 
repo.hg_init()&lt;/code&gt; &lt;/p&gt;
&lt;h6 id="4. se agrega el archivo hora.txt:"&gt;4. Se agrega el archivo hora.txt:&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;python 
repo.hg_add("hora.txt")&lt;/code&gt; &lt;/p&gt;
&lt;h6 id="5. se realiza el commit colocando la descripcion y el usuario quien realiza el commit:"&gt;5. Se realiza el commit colocando la descripci&amp;oacute;n y el usuario quien realiza el commit:&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;python 
repo.hg_commit("Agregando archivo hora.txt",user="ernesto")&lt;/code&gt; &lt;/p&gt;
&lt;h6 id="6. se captura la descripcion:"&gt;6. Se captura la descripci&amp;oacute;n:&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;python 
str(repo['tip'].desc)
'Agregando archivo hora.txt'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Esto es lo b&amp;aacute;sico que explica el sitio de hgapi. Lo interesante es que ya se puede automatizar procesos de mercurial desde python.&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n de hgapi la pueden revisar &lt;a href="https://pythonhosted.org/hgapi/"&gt;aqu&amp;iacute;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Control de versiones"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Mercurial"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Generar una gráfica en python con PyQwt. Parte 1</title><link href="https://ecrespo.github.io/generar-una-grafica-en-python-con-pyqwt-parte-1.html" rel="alternate"></link><published>2011-12-11T09:00:00-05:30</published><updated>2011-12-11T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-12-11:/generar-una-grafica-en-python-con-pyqwt-parte-1.html</id><summary type="html">&lt;p&gt;Continuando con las librer&amp;iacute;as para generar gr&amp;aacute;ficos en Python ahora explicar&amp;eacute; como usar la librer&amp;iacute;as &lt;code&gt;PyQwt&lt;/code&gt; de Qt para crear gr&amp;aacute;ficas.&lt;/p&gt;
&lt;p&gt;Este ejemplo se baja en la introducci&amp;oacute;n que tiene la p&amp;aacute;gina oficial de &lt;a href="http://pyqwt.sourceforge.net/doc5/introduction.html"&gt;PyQwt&lt;/a&gt;. En este caso se cambi&amp;oacute; el rango del arreglo y las funciones a graficar.&lt;/p&gt;
&lt;p&gt;En …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con las librer&amp;iacute;as para generar gr&amp;aacute;ficos en Python ahora explicar&amp;eacute; como usar la librer&amp;iacute;as &lt;code&gt;PyQwt&lt;/code&gt; de Qt para crear gr&amp;aacute;ficas.&lt;/p&gt;
&lt;p&gt;Este ejemplo se baja en la introducci&amp;oacute;n que tiene la p&amp;aacute;gina oficial de &lt;a href="http://pyqwt.sourceforge.net/doc5/introduction.html"&gt;PyQwt&lt;/a&gt;. En este caso se cambi&amp;oacute; el rango del arreglo y las funciones a graficar.&lt;/p&gt;
&lt;p&gt;En el ejemplo se crea el rango de valores con &lt;code&gt;numpy&lt;/code&gt;, luego se crea la instancia de la Clase QApplication para crear las 2 curvas y luego salvarla en un archivo con formato &lt;code&gt;.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar numpy"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="importar las librerias qt"&gt;Importar las librerias Qt&lt;/h1&gt;
&lt;p&gt;from PyQt4.Qt import *&lt;/p&gt;
&lt;h1 id="importar las librerias qwt5"&gt;Importar las librerias Qwt5&lt;/h1&gt;
&lt;p&gt;from PyQt4.Qwt5 import *&lt;/p&gt;
&lt;h1 id="de qwt5 importar qplt"&gt;De Qwt5 importar qplt&lt;/h1&gt;
&lt;p&gt;from PyQt4.Qwt5.qplt import *&lt;/p&gt;
&lt;h1 id="importar sleep"&gt;Importar sleep&lt;/h1&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="instanciar la clase qapplication"&gt;Instanciar la clase QApplication&lt;/h1&gt;
&lt;p&gt;application = QApplication([])&lt;/p&gt;
&lt;h1 id="crea un arreglo desde -4pi a 4pi en incrementos de 0.01"&gt;Crea un arreglo desde -4PI a 4Pi en incrementos de 0.01&lt;/h1&gt;
&lt;p&gt;x = np.arange(-4&lt;em&gt;np.pi, 4&lt;/em&gt;np.pi, 0.01)&lt;/p&gt;
&lt;h1 id="crea 2 curvas con el eje vertical en escala logaritmica."&gt;Crea 2 curvas con el eje vertical en escala logaritmica.&lt;/h1&gt;
&lt;p&gt;p = Plot(Curve(x, np.cos(x), Pen(Blue, 2), "cos(x)"),
Curve(x, np.exp(x)+4+4&lt;em&gt;np.sin(x), Pen(Magenta,2), "exp(x)+4&lt;/em&gt;sin(x)+4",Y2),
Axis(Y2, Log),"PyQwt usando Qwt-%s " % QWT_VERSION_STR)&lt;/p&gt;
&lt;h1 id="hace una captura de pantalla de la imagen y lo guarda en un archivo con formato png"&gt;Hace una captura de pantalla de la imagen y lo guarda en un archivo con formato PNG&lt;/h1&gt;
&lt;p&gt;QPixmap.grabWidget(p).save('cli-plot-1.png', 'PNG')
```&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica generada se muestra en la siguiente figura:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Texto alternativo" src="./images/generarunagraficaenpythonconpyqwt-1.png"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="gnome"></category><category term="Linux"></category><category term="numpy"></category><category term="pyQwt"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Conexiones remotas por ssh desde python</title><link href="https://ecrespo.github.io/conexiones-remotas-por-ssh-desde-python.html" rel="alternate"></link><published>2010-03-30T12:00:00-05:30</published><updated>2010-03-30T12:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-03-30:/conexiones-remotas-por-ssh-desde-python.html</id><summary type="html">&lt;p&gt;Con el m&amp;oacute;dulo paramiko se puede crear conexiones ssh a equipos remotos, el siguiente ejemplo muestra como establecer dicha conexi&amp;oacute;n con la ejecuci&amp;oacute;n de un comando de forma remota:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="se importa el modulo que permite establecer conexiones ssh"&gt;Se importa el modulo que permite establecer conexiones ssh&lt;/h1&gt;
&lt;p&gt;import paramiko&lt;/p&gt;
&lt;h1 id="se crea la conexion con el cliente ssh"&gt;Se crea la conexion con el cliente ssh&lt;/h1&gt;
&lt;p&gt;ssh …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Con el m&amp;oacute;dulo paramiko se puede crear conexiones ssh a equipos remotos, el siguiente ejemplo muestra como establecer dicha conexi&amp;oacute;n con la ejecuci&amp;oacute;n de un comando de forma remota:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="se importa el modulo que permite establecer conexiones ssh"&gt;Se importa el modulo que permite establecer conexiones ssh&lt;/h1&gt;
&lt;p&gt;import paramiko&lt;/p&gt;
&lt;h1 id="se crea la conexion con el cliente ssh"&gt;Se crea la conexion con el cliente ssh&lt;/h1&gt;
&lt;p&gt;ssh = paramiko.SSHClient()&lt;/p&gt;
&lt;h1 id="se define la politica de intercambio de llaves del ssh"&gt;Se define la politica de intercambio de llaves del ssh&lt;/h1&gt;
&lt;p&gt;ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())&lt;/p&gt;
&lt;h1 id="se establece la conexion remota pasando la direccion ip, el nombre"&gt;Se establece la conexion remota pasando la direccion IP, el nombre&lt;/h1&gt;
&lt;h1 id="y clave del usuario"&gt;y clave del usuario&lt;/h1&gt;
&lt;p&gt;ssh.connect('192.168.33.46', username='ernesto',password="wxyz")&lt;/p&gt;
&lt;h1 id="se ejecuta el comando de forma remota"&gt;Se ejecuta el comando de forma remota&lt;/h1&gt;
&lt;p&gt;stdin, stdout, stderr = ssh.exec_command("cd bin;ls -l")&lt;/p&gt;
&lt;h1 id="se muestra el resultado del comando"&gt;Se muestra el resultado del comando&lt;/h1&gt;
&lt;p&gt;listado =stdout.readlines()
for i in listado: print i&lt;/p&gt;
&lt;h1 id="se cierra la sesion de ssh"&gt;Se cierra la sesion de ssh&lt;/h1&gt;
&lt;p&gt;ssh.close()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el resultado de la ejecuci&amp;oacute;n del script:&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;ernesto@canaima:~/bin/python$ python py-ssh.py 
total 4444
-rw-r--r-- 1 ernesto ernesto 39462 nov 9 14:50 a01.svg
-rwxr-xr-x 1 ernesto ernesto 16820 nov 9 14:49 a01.top
-rwxr-xr-x 1 ernesto ernesto 16820 nov 9 14:51 A01.TOP
-rw-r--r-- 1 ernesto ernesto 10440 nov 9 14:52 a02.svg
-rwxr-xr-x 1 ernesto ernesto 4382 nov 9 14:51 a02.top
-rwxr-xr-x 1 ernesto ernesto 32 nov 9 14:51 a03.top
-rw-r--r-- 1 ernesto ernesto 2379 oct 8 15:55 ej5.py
drwxr-xr-x 13 ernesto ernesto 4096 oct 28 16:43 firefox
lrwxrwxrwx 1 ernesto ernesto 15 feb 8 07:54 Firefox -&amp;gt; firefox/firefox
-rw-r--r-- 1 ernesto ernesto 33662 nov 27 17:17 hola.c
-rw-r--r-- 1 ernesto ernesto 37 nov 27 17:17 hola.py
drwxr-xr-x 2 ernesto ernesto 4096 dic 3 11:29 lenguajeC
drwxr-xr-x 2 ernesto ernesto 4096 dic 25 07:48 lv
-rw-r--r-- 1 ernesto ernesto 3640 oct 18 14:20 Matematica_Braille.py
-rw-r--r-- 1 ernesto ernesto 33792 oct 18 14:12 Matematica_libglade.glade
-rwxr-xr-x 1 ernesto ernesto 39 oct 5 22:35 prueba.py
drwxr-xr-x 19 ernesto ernesto 4096 feb 21 20:31 python
-rw-r--r-- 1 ernesto ernesto 4318141 nov 9 14:50 sys
-rwxr-xr-x 1 ernesto ernesto 4261 nov 9 14:53 top2sv
-rwxr-xr-x 1 ernesto ernesto 1051 nov 9 14:48 top2svg.py
drwxr-xr-x 3 ernesto ernesto 4096 nov 9 14:53 top2svg-v0.2&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="ssh"></category><category term="python"></category><category term="paramiko"></category></entry></feed>