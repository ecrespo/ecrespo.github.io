<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Página de Seraph - Tutorial Python</title><link href="https://ecrespo.github.io/" rel="alternate"></link><link href="https://ecrespo.github.io/feeds/tutorial-python.atom.xml" rel="self"></link><id>https://ecrespo.github.io/</id><updated>2014-04-29T09:00:00-05:30</updated><subtitle>Data Scientist </subtitle><entry><title>Manejo de colas de RabbitMQ en Django con Django-Celery</title><link href="https://ecrespo.github.io/manejo-de-colas-de-rabbitmq-en-django-con-django-celery.html" rel="alternate"></link><published>2014-04-29T09:00:00-05:30</published><updated>2014-04-29T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-04-29:/manejo-de-colas-de-rabbitmq-en-django-con-django-celery.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.seraph.to/tag/django.html"&gt;Hace un tiempo escrib&amp;iacute; unos 3 art&amp;iacute;culos sobre Django&lt;/a&gt;, ahora se tocar&amp;aacute; un tema algo m&amp;aacute;s complejo pero &amp;uacute;til cuando se requiere rendimiento en procesos.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n paso a explicar un proceso sencillo de manejo de colas de &lt;code&gt;RabbitMQ&lt;/code&gt; por medio de &lt;code&gt;Django-Celery&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La idea es realizar una instalaci&amp;oacute;n y …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.seraph.to/tag/django.html"&gt;Hace un tiempo escrib&amp;iacute; unos 3 art&amp;iacute;culos sobre Django&lt;/a&gt;, ahora se tocar&amp;aacute; un tema algo m&amp;aacute;s complejo pero &amp;uacute;til cuando se requiere rendimiento en procesos.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n paso a explicar un proceso sencillo de manejo de colas de &lt;code&gt;RabbitMQ&lt;/code&gt; por medio de &lt;code&gt;Django-Celery&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La idea es realizar una instalaci&amp;oacute;n y configuraci&amp;oacute;n b&amp;aacute;sica, nada de tener &lt;code&gt;RabbitMQ&lt;/code&gt; en varias m&amp;aacute;quinas virtuales y que se maneje la autenticaci&amp;oacute;n de las diferentes colas de las diferentes m&amp;aacute;quinas.&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n la pueden encontrar en el siguiente &lt;a href="https://celery.readthedocs.io/en/latest/getting-started/first-steps-with-celery.html"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lo primero que se necesita es tener &lt;code&gt;rabbitMQ&lt;/code&gt; instalado en Debian Wheezy.
```&lt;/p&gt;
&lt;h1 id="aptitude install rabbitmq-server"&gt;aptitude install rabbitmq-server&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Luego de la instalaci&amp;oacute;n se verifica que se inicie el servicio:&lt;/code&gt;
root@pruebas:~# invoke-rc.d rabbitmq-server status 
Status of node rabbit@pruebas ...
[{pid,3595},
 {running_applications,[{rabbit,"RabbitMQ","2.8.4"},
                        {mnesia,"MNESIA  CXC 138 12","4.7"},
                        {os_mon,"CPO  CXC 138 46","2.2.9"},
                        {sasl,"SASL  CXC 138 11","2.2.1"},
                        {stdlib,"ERTS  CXC 138 10","1.18.1"},
                        {kernel,"ERTS  CXC 138 10","2.15.1"}]},
 {os,{unix,linux}},
 {erlang_version,"Erlang R15B01 (erts-5.9.1) [source] [64-bit] [async-threads:30] [kernel-poll:true]\n"},
 {memory,[{total,26213352},
          {processes,10386936},
          {processes_used,10386922},
          {system,15826416},
          {atom,504409},
          {atom_used,473948},
          {binary,263704},
          {code,11874771},
          {ets,771120}]},
 {vm_memory_high_watermark,0.39999999862767177},
 {vm_memory_limit,233180364},
 {disk_free_limit,1000000000},
 {disk_free,6221991936},
 {file_descriptors,[{total_limit,924},
                    {total_used,8},
                    {sockets_limit,829},
                    {sockets_used,5}]},
 {processes,[{limit,1048576},{used,167}]},
 {run_queue,0},
 {uptime,5808}]
...done.
```&lt;/p&gt;
&lt;p&gt;Tambi&amp;eacute;n se puede verificar desde el comando &lt;code&gt;rabbitctl&lt;/code&gt;:
&lt;code&gt;root@pruebas:~# rabbitmqctl status 
Status of node rabbit@pruebas ...
[{pid,3595},
 {running_applications,[{rabbit,"RabbitMQ","2.8.4"},
                        {mnesia,"MNESIA  CXC 138 12","4.7"},
                        {os_mon,"CPO  CXC 138 46","2.2.9"},
                        {sasl,"SASL  CXC 138 11","2.2.1"},
                        {stdlib,"ERTS  CXC 138 10","1.18.1"},
                        {kernel,"ERTS  CXC 138 10","2.15.1"}]},
 {os,{unix,linux}},
 {erlang_version,"Erlang R15B01 (erts-5.9.1) [source] [64-bit] [async-threads:30] [kernel-poll:true]\n"},
 {memory,[{total,26211600},
          {processes,10386952},
          {processes_used,10386938},
          {system,15824648},
          {atom,504409},
          {atom_used,473972},
          {binary,262176},
          {code,11874771},
          {ets,771120}]},
 {vm_memory_high_watermark,0.39999999862767177},
 {vm_memory_limit,233180364},
 {disk_free_limit,1000000000},
 {disk_free,6221991936},
 {file_descriptors,[{total_limit,924},
                    {total_used,8},
                    {sockets_limit,829},
                    {sockets_used,5}]},
 {processes,[{limit,1048576},{used,167}]},
 {run_queue,0},
 {uptime,5848}]
...done.&lt;/code&gt;
Como la conexi&amp;oacute;n de Django es con una s&amp;oacute;la m&amp;aacute;quina no se requiere autenticaci&amp;oacute;n del &lt;code&gt;rabbitMQ&lt;/code&gt; as&amp;iacute; que ese paso lo pueden ver en el siguiente &lt;a href="https://celery.readthedocs.io/en/latest/getting-started/brokers/rabbitmq.html"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ahora se instalar&amp;aacute; &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;celery&lt;/code&gt; y &lt;code&gt;django-celery&lt;/code&gt;:
``` &lt;/p&gt;
&lt;h1 id="aptitude install python2.7 python2.7-dev python-django python-django-celery python-celery"&gt;aptitude install python2.7 python2.7-dev python-django python-django-celery python-celery&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Al terminar de instalar la aplicaci&amp;oacute;n ahora se va a crear un proyecto django:
Se crea el directorio django en &lt;code&gt;/srv/&lt;/code&gt;
```&lt;/p&gt;
&lt;h1 id="mkdir -p /srv/django"&gt;mkdir -p /srv/django&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Luego se crea el proyecto pasarela con el comando `django-admin`:&lt;/code&gt;
root@pruebas:/srv/django# django-admin startproject pasarela
&lt;code&gt;Dentro del directorio pasarela se encontrar&amp;aacute; la estructura de archivos que maneja django:&lt;/code&gt;
-rwxr-xr-x 1 pasarela pasarela   251 abr 29 15:32 manage.py
drwxr-xr-x 3 pasarela pasarela  4096 abr 29 16:49 pasarela
-rw-rw-rw- 1 pasarela pasarela 69632 abr 29 16:59 pasarela.db
```  &lt;/p&gt;
&lt;p&gt;Luego dentro del directorio pasarela se tiene lo siguiente:
&lt;code&gt;root@pruebas:/srv/django/pasarela/pasarela# ls -l
total 32
-rw-r--r-- 1 pasarela pasarela    0 abr 29 15:32 __init__.py
-rw-r--r-- 1 pasarela pasarela 5464 abr 29 16:46 settings.py
-rw-r--r-- 1 pasarela pasarela  562 abr 29 15:32 urls.py
-rw-r--r-- 1 pasarela pasarela 1138 abr 29 15:32 wsgi.py&lt;/code&gt;
Se crea el directorio &lt;code&gt;apps&lt;/code&gt;:
&lt;code&gt;root@pruebas:/srv/django/pasarela/pasarela#mkdir -p apps&lt;/code&gt;
Dentro del directorio se crea el archivo &lt;code&gt;__init__.py&lt;/code&gt;:
&lt;code&gt;root@pruebas:/srv/django/pasarela/pasarela/apps# touch __init__,py&lt;/code&gt;
Ahora se crea la aplicaci&amp;oacute;n &lt;code&gt;sms&lt;/code&gt;:
&lt;code&gt;root@pruebas:/srv/django/pasarela/pasarela/apps# django-admin startapp sms&lt;/code&gt;
El directorio &lt;code&gt;sms&lt;/code&gt; contiene lo siguiente:
&lt;code&gt;root@pruebas:/srv/django/pasarela/pasarela/apps/sms# ls -l
total 24
-rw-r--r-- 1 pasarela pasarela   0 abr 29 15:46 __init__.py
-rw-r--r-- 1 pasarela pasarela  57 abr 29 15:46 models.py
-rw-r--r-- 1 pasarela pasarela 383 abr 29 15:46 tests.py
-rw-r--r-- 1 pasarela pasarela  26 abr 29 15:46 views.py&lt;/code&gt;
En este directorio se crea el archivo &lt;code&gt;tasks.py&lt;/code&gt; con el siguiente contenido: 
```&lt;/p&gt;
&lt;h1 id="se importa celery"&gt;Se importa Celery&lt;/h1&gt;
&lt;p&gt;from celery import Celery&lt;/p&gt;
&lt;h1 id="se instancia celery importando tasks, se define el broker (quien recibe los procesos en este"&gt;Se instancia Celery importando tasks, se define el broker (quien recibe los procesos en este&lt;/h1&gt;
&lt;h1 id="caso rabbitmq con el protocolo amgp) y se define el backend (quien recibe los resultado"&gt;caso rabbitMQ con el protocolo amgp) y se define el backend (quien recibe los resultado&lt;/h1&gt;
&lt;h1 id="del proceso encolado en este caso con rabbitmq y el protocolo amgp)"&gt;del proceso encolado en este caso con rabbitMQ y el protocolo amgp)&lt;/h1&gt;
&lt;p&gt;app = Celery('tasks', broker='amqp://',backend='amqp')&lt;/p&gt;
&lt;h1 id="se usa el decorador task de app y se define la suma."&gt;Se usa el decorador task de app y se define la suma.&lt;/h1&gt;
&lt;p&gt;@app.task
def add(x, y):
    return x + y
&lt;code&gt;``
Lo que se va a hacer es manejar la suma por medio de la cola de&lt;/code&gt;rabbitMQ`.&lt;/p&gt;
&lt;p&gt;Ahora se revisa el contenido del archivo &lt;code&gt;settings.py&lt;/code&gt; (lo m&amp;aacute;s relevante): &lt;/p&gt;
&lt;p&gt;Se va a trabajar por los momentos con la base de datos &lt;code&gt;sqlite&lt;/code&gt;:
&lt;code&gt;DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'pasarela.db',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}&lt;/code&gt;
Se define el uso horario de la aplicaci&amp;oacute;n: 
&lt;code&gt;TIME_ZONE = 'America/Caracas'&lt;/code&gt;
Se define el idioma:
&lt;code&gt;LANGUAGE_CODE = 'es-ve'&lt;/code&gt;
Se agrega la aplicaci&amp;oacute;n &lt;code&gt;djcelery&lt;/code&gt; y &lt;code&gt;sms&lt;/code&gt;:
&lt;code&gt;INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    'djcelery',
    'pasarela.apps.sms',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
)&lt;/code&gt;
Ahora queda sincronizar la base de datos (ac&amp;aacute; se crea la base de datos para django, lo necesario para django celery y la cuenta del administrador de la aplicaci&amp;oacute;n):
&lt;code&gt;root@pruebas:/srv/django/pasarela# python manage.py syncdb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ahora lo que queda es iniciar &lt;code&gt;celery&lt;/code&gt;: 
Se inicia &lt;code&gt;manage.py&lt;/code&gt; de django dici&amp;eacute;ndole que va a iniciar celery en nivel de informaci&amp;oacute;n y con dos procesos concurrentes.
```
ernesto@pruebas:/srv/django/pasarela$ python manage.py celeryd -E -l info -c 2
/usr/lib/python2.7/dist-packages/djcelery/loaders.py:108: UserWarning: Using settings.DEBUG leads to a memory leak, never use this setting in production environments!
  warnings.warn("Using settings.DEBUG leads to a memory leak, never "
[2014-04-29 17:22:37,272: WARNING/MainProcess]  &lt;/p&gt;
&lt;p&gt;-------------- celery@pruebas v2.5.3
---- &lt;strong&gt;&lt;em&gt;* -----
--- * &lt;/em&gt;&lt;/strong&gt;  * -- [Configuration]
-- * - &lt;strong&gt;&lt;em&gt;* ---   . broker:      amqp://guest@localhost:5672//
- &lt;/em&gt;* ----------   . loader:      djcelery.loaders.DjangoLoader
- &lt;/strong&gt; ----------   . logfile:     [stderr]@INFO
- &lt;strong&gt; ----------   . concurrency: 2
- &lt;/strong&gt; ----------   . events:      ON
- &lt;strong&gt;&lt;em&gt; --- * ---   . beat:        OFF
-- &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;* ----
--- &lt;/em&gt;&lt;/strong&gt;** ----- [Queues]
 --------------   . celery:      exchange:celery (direct) binding:celery&lt;/p&gt;
&lt;p&gt;[Tasks]
  . pasarela.apps.sms.tasks.add&lt;/p&gt;
&lt;p&gt;[2014-04-29 17:22:37,293: INFO/PoolWorker-1] child process calling self.run()
[2014-04-29 17:22:37,297: INFO/PoolWorker-2] child process calling self.run()
[2014-04-29 17:22:37,307: WARNING/MainProcess] celery@pruebas has started.
```&lt;/p&gt;
&lt;p&gt;En otra consola se inicia el shell del &lt;code&gt;manage.py&lt;/code&gt; de django: 
Se importa la funci&amp;oacute;n add que se defini&amp;oacute; en el archivo &lt;code&gt;tasks.py&lt;/code&gt;.
```
ernesto@pruebas:/srv/django/pasarela$ python manage.py shell
Python 2.7.3 (default, Mar 13 2014, 11:03:55) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pasarela.apps.sms.tasks import add&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id="se realiza la suma de 11+19"&gt;Se realiza la suma de 11+19&lt;/h1&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;result = add.delay(11, 19)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id="se obtiene el resultado:"&gt;Se obtiene el resultado:&lt;/h1&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;result.get()
30&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id="se verifica si ya celery esta listo para recibir mas procesos:"&gt;Se verifica si ya celery est&amp;aacute; listo para recibir m&amp;aacute;s procesos:&lt;/h1&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;result.ready()
True&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id="se verifica si ya el proceso termino."&gt;Se verifica si ya el proceso termino.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;result.successful()
True
&lt;code&gt;En la salida de celery se tiene lo siguiente:&lt;/code&gt; 
[2014-04-29 17:25:36,200: INFO/MainProcess] Got task from broker: pasarela.apps.sms.tasks.add[64275874-545b-4ab9-bfc8-ea38904d2320]
[2014-04-29 17:25:36,228: INFO/MainProcess] Task pasarela.apps.sms.tasks.add[64275874-545b-4ab9-bfc8-ea38904d2320] succeeded in 0.0155239105225s: 30
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como se muestra el &lt;code&gt;celery&lt;/code&gt; recibe y devuelve el resultado de la suma con su tiempo de ejecuci&amp;oacute;n, si se tienen varios equipos con &lt;code&gt;rabbitMQ&lt;/code&gt; se puede mejorar significativamente los procesos de ejecuci&amp;oacute;n de funciones en django.&lt;/p&gt;
&lt;p&gt;Pueden revisar la siguiente &lt;a href="https://es.scribd.com/document/57279486/Celery-An-A-Synchronous-Task-Queue-Not-Only-for-Django"&gt;presentaci&amp;oacute;n&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Django"></category><category term="Django-Celery"></category></entry><entry><title>Reproductor de vídeo con python y kivy</title><link href="https://ecrespo.github.io/reproductor-de-video-con-python-y-kivy.html" rel="alternate"></link><published>2014-04-19T10:00:00-05:30</published><updated>2014-04-19T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-04-19:/reproductor-de-video-con-python-y-kivy.html</id><summary type="html">&lt;p&gt;De los dos art&amp;iacute;culos anteriores, el &lt;a href="https://www.seraph.to/desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy.html#desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy"&gt;introductorio con manejo de etiquetas&lt;/a&gt;; y 
&lt;a href="https://www.seraph.to/widget-button-y-scatter-widget-de-comportamiento-en-kivy.html#widget-button-y-scatter-widget-de-comportamiento-en-kivy"&gt;el de bot&amp;oacute;n y scatter&lt;/a&gt; ahora explicar&amp;eacute; algo m&amp;aacute;s completo, la reproducci&amp;oacute;n de un v&amp;iacute;deo.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en &lt;a href="http://karanbalkar.com/2012/10/learning-kivy-video-player-and-scatter-widgets/"&gt;ingl&amp;eacute;s sobre un reproductor de v&amp;iacute;deo y scatter con kivy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ahora se mostrar&amp;aacute; como asociar un evento (una …&lt;/p&gt;</summary><content type="html">&lt;p&gt;De los dos art&amp;iacute;culos anteriores, el &lt;a href="https://www.seraph.to/desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy.html#desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy"&gt;introductorio con manejo de etiquetas&lt;/a&gt;; y 
&lt;a href="https://www.seraph.to/widget-button-y-scatter-widget-de-comportamiento-en-kivy.html#widget-button-y-scatter-widget-de-comportamiento-en-kivy"&gt;el de bot&amp;oacute;n y scatter&lt;/a&gt; ahora explicar&amp;eacute; algo m&amp;aacute;s completo, la reproducci&amp;oacute;n de un v&amp;iacute;deo.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en &lt;a href="http://karanbalkar.com/2012/10/learning-kivy-video-player-and-scatter-widgets/"&gt;ingl&amp;eacute;s sobre un reproductor de v&amp;iacute;deo y scatter con kivy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ahora se mostrar&amp;aacute; como asociar un evento (una funci&amp;oacute;n) al bot&amp;oacute;n al darle click.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo del reproductor:
```python&lt;/p&gt;
&lt;h1 id="se importa kivy y se valida que es la version 1.8.0"&gt;Se importa kivy y se valida que es la versi&amp;oacute;n 1.8.0&lt;/h1&gt;
&lt;p&gt;import kivy&lt;/p&gt;
&lt;p&gt;kivy.require('1.8.0')&lt;/p&gt;
&lt;h1 id="se importa la clase app"&gt;Se importa la clase App&lt;/h1&gt;
&lt;p&gt;from kivy.app import App&lt;/p&gt;
&lt;h1 id="se importa button, widget y videoplayer"&gt;Se importa Button, Widget y VideoPlayer&lt;/h1&gt;
&lt;p&gt;from kivy.uix.button import Button&lt;/p&gt;
&lt;p&gt;from kivy.uix.widget import Widget&lt;/p&gt;
&lt;p&gt;from kivy.uix.videoplayer import VideoPlayer&lt;/p&gt;
&lt;h1 id="se instancia widget y button."&gt;Se instancia Widget y Button.&lt;/h1&gt;
&lt;p&gt;parent= Widget()&lt;/p&gt;
&lt;p&gt;button= Button()&lt;/p&gt;
&lt;h1 id="se crea la clase myapp que hereda de app"&gt;Se crea la clase MyApp que hereda de App&lt;/h1&gt;
&lt;p&gt;class MyApp(App):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se define el m&amp;eacute;todo build.

def build(self):

     #Se instancia Button con su texto y tama&amp;ntilde;o del  mismo.

     button = Button(text='Reproductor Video', font_size=14)

     #Se asocia al boton la funci&amp;oacute;n on_button_press al argumento on_press

     button.bind(on_press=on_button_press)

     #Se agrega button a la instancia de parent

     parent.add_widget(button) #agrega el boton

     #Retorna parent

     return parent
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se define la funcion on_button_press"&gt;Se define la funci&amp;oacute;n on_button_press&lt;/h1&gt;
&lt;p&gt;def on_button_press(self):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se crea la instancia de VideoPlayer donde se le pasa como argumento la fuente de v&amp;iacute;deo,

    #el estado y la opci&amp;oacute;n allow_stretch True.

    video= VideoPlayer(source='Tribus-SethGodin.webm', state='play',options={'allow_stretch': True})

    #Se agrega el v&amp;iacute;deo a la instancia parent

    parent.add_widget(video) #add videoplayer

    #Se retorna parent

    return parent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MyApp().run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El resultado de reproducir el script se muestra en el siguiente v&amp;iacute;deo:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/todhoMD1jBY" title="https://youtu.be/todhoMD1jBY"&gt;https://youtu.be/todhoMD1jBY&lt;/a&gt;&lt;/p&gt;
&lt;iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="270" src="https://www.youtube.com/embed/todhoMD1jBY?feature=oembed" width="480"&gt;&lt;/iframe&gt;
&lt;p&gt;Nota: El v&amp;iacute;deo del reproductor no tiene problemas con el audio, el problema generador de screencast no he logrado hacer que grabe audio :-/ ...&lt;/p&gt;
&lt;p&gt;Si desea conocer m&amp;aacute;s sobre el widget VideoPlayer puede ver el siguiente &lt;a href="https://kivy.org/doc/stable/api-kivy.uix.videoplayer.html#kivy.uix.videoplayer.VideoPlayer.allow_fullscreen"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Android"></category><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="gnome"></category><category term="Python"></category><category term="Ubuntu"></category><category term="kivy"></category></entry><entry><title>Widget button y Scatter (widget de comportamiento) en kivy.</title><link href="https://ecrespo.github.io/widget-button-y-scatter-widget-de-comportamiento-en-kivy.html" rel="alternate"></link><published>2014-04-19T08:00:00-05:30</published><updated>2014-04-19T08:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-04-19:/widget-button-y-scatter-widget-de-comportamiento-en-kivy.html</id><summary type="html">&lt;p&gt;El &lt;a href="https://www.seraph.to/desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy.html#desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy"&gt;art&amp;iacute;culo anterior&lt;/a&gt; se mostr&amp;oacute; una peque&amp;ntilde;a introducci&amp;oacute;n de kivy y como tener una ventana con una etiqueta.&lt;/p&gt;
&lt;p&gt;Tambi&amp;eacute;n se mostr&amp;oacute; como separar el layaout de la programaci&amp;oacute;n.
A continuaci&amp;oacute;n se mostrar&amp;aacute; dos ejemplos, uno utilizando el widget button y otro con una etiqueta dentro de un Scatter (widget de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El &lt;a href="https://www.seraph.to/desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy.html#desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy"&gt;art&amp;iacute;culo anterior&lt;/a&gt; se mostr&amp;oacute; una peque&amp;ntilde;a introducci&amp;oacute;n de kivy y como tener una ventana con una etiqueta.&lt;/p&gt;
&lt;p&gt;Tambi&amp;eacute;n se mostr&amp;oacute; como separar el layaout de la programaci&amp;oacute;n.
A continuaci&amp;oacute;n se mostrar&amp;aacute; dos ejemplos, uno utilizando el widget button y otro con una etiqueta dentro de un Scatter (widget de comportamiento que permite drag, rotar y escalar un widget).
El art&amp;iacute;culo se basa del &lt;a href="https://www.youtube.com/watch?v=F7UKmK9eQLY"&gt;v&amp;iacute;deo tutorial No.1&lt;/a&gt; del equipo de kivy:&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo python del ejemplo del bot&amp;oacute;n se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa kivy"&gt;Se importa kivy&lt;/h1&gt;
&lt;p&gt;import kivy&lt;/p&gt;
&lt;h1 id="se valida que se tiene la version 1.8.0 de kivy"&gt;Se valida que se tiene la versi&amp;oacute;n 1.8.0 de kivy&lt;/h1&gt;
&lt;p&gt;kivy.require('1.8.0')&lt;/p&gt;
&lt;h1 id="se importa la clase app y el widget button"&gt;Se importa la clase App y el widget Button&lt;/h1&gt;
&lt;p&gt;from kivy.app import App&lt;/p&gt;
&lt;p&gt;from kivy.uix.button import Button&lt;/p&gt;
&lt;h1 id="se crea la clase hola3app que hereda de app"&gt;Se crea la clase Hola3App que hereda de App&lt;/h1&gt;
&lt;p&gt;class Hola3App(App):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se define el m&amp;eacute;todo build que devuelve el widget Button sin argumentos.

def build(self):

    return Button()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea la instancia de la clase y se ejecuta.

Hola3App().run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;El archivo `hola3.kv` con el layout de `hola3.py` se muestra a continuaci&amp;oacute;n:
Se define el texto del bot&amp;oacute;n, el color ser&amp;aacute; azul y su tama&amp;ntilde;o.&lt;/code&gt;python&lt;/p&gt;
&lt;h1 id="file name: hello2.kv"&gt;File name: hello2.kv&lt;/h1&gt;
&lt;h1 id=":kivy 1.8.0"&gt;:kivy 1.8.0&lt;/h1&gt;
&lt;p&gt;&lt;button&gt;: &lt;/button&gt;&lt;/p&gt;
&lt;p&gt;text: 'Hola mundo v3!'&lt;/p&gt;
&lt;p&gt;font_size:100&lt;/p&gt;
&lt;p&gt;background_color:(0,0,1,1)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El siguiente v&amp;iacute;deo muestra la ejecuci&amp;oacute;n del script:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/gFk4w-p4qhc" title="https://youtu.be/gFk4w-p4qhc"&gt;https://youtu.be/gFk4w-p4qhc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El siguiente ejemplo es del uso del widget de comportamiento Scatter, este widget permite realizar drag, cambiar de escala de lo que contenga el widget y rotar, aparte es un wiget que soporta multitouch.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de &amp;acute;hola4.py&amp;acute; se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa kivy_1"&gt;se importa kivy&lt;/h1&gt;
&lt;p&gt;import kivy&lt;/p&gt;
&lt;h1 id="se valida que la version de kivy sea la 1.8.0"&gt;Se v&amp;aacute;lida que la versi&amp;oacute;n de kivy sea la 1.8.0&lt;/h1&gt;
&lt;p&gt;kivy.require('1.8.0')&lt;/p&gt;
&lt;h1 id="se importa la clase app"&gt;Se importa la clase App&lt;/h1&gt;
&lt;p&gt;from kivy.app import App&lt;/p&gt;
&lt;h1 id="se importa scatter, label y floatlayout"&gt;Se importa Scatter, Label y FloatLayout&lt;/h1&gt;
&lt;p&gt;from kivy.uix.scatter import Scatter&lt;/p&gt;
&lt;p&gt;from kivy.uix.label import Label&lt;/p&gt;
&lt;p&gt;from kivy.uix.floatlayout import FloatLayout&lt;/p&gt;
&lt;h1 id="se crea la clase hola4app que hereda de app"&gt;Se crea la clase Hola4App que hereda de App&lt;/h1&gt;
&lt;p&gt;class Hola4App(App):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se define el m&amp;eacute;todo build

def build(self):

    #Se instancia al objeto FloatLayout

    f = FloatLayout()

    #Se instancia al objeto Scatter

    s = Scatter()

    #Se instancia al objeto Label con el texto y el tama&amp;ntilde;o.

    l = Label(text="Hola v4",font_size=100)

    #Se agrega a FloatLayout la instancia del widget scatter

    f.add_widget(s)

    #Se agrega el widget Label a Scatter

    s.add_widget(l)

    #Se retorna la instancia de FloatLayout

    return f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se ejecuta run de la instancia del objeto Hola4App

Hola4App().run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El siguiente v&amp;iacute;deo muestra el resultado de la ejecuci&amp;oacute;n del script:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/_AeT3LkVwkk" title="https://youtu.be/_AeT3LkVwkk"&gt;https://youtu.be/_AeT3LkVwkk&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="gnome"></category><category term="Python"></category><category term="Ubuntu"></category><category term="kivy"></category></entry><entry><title>Desarrollo de aplicaciones multiplataforma con python y kivy</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy.html" rel="alternate"></link><published>2014-04-18T09:00:00-05:30</published><updated>2014-04-18T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-04-18:/desarrollo-de-aplicaciones-multiplataforma-con-python-y-kivy.html</id><summary type="html">&lt;p&gt;&lt;a href="https://kivy.org/#home"&gt;Kivy&lt;/a&gt; es una librer&amp;iacute;a que permite usar python para crear aplicaciones para el escritorio y dispositivos m&amp;oacute;viles con soporte multitouch.&lt;/p&gt;
&lt;p&gt;Es multiplataforma:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desarrollodeaplicacionesmultiplataformaconpythonykivy-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Soporta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux (Debian, Ubuntu, Fedora, ArchLinux, etc). &lt;/li&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;IOS de Apple&lt;/li&gt;
&lt;li&gt;OSX de Apple&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para descargarlo pueden visitar la p&amp;aacute;gina del &lt;a href="https://kivy.org/#download"&gt;proyecto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En el caso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://kivy.org/#home"&gt;Kivy&lt;/a&gt; es una librer&amp;iacute;a que permite usar python para crear aplicaciones para el escritorio y dispositivos m&amp;oacute;viles con soporte multitouch.&lt;/p&gt;
&lt;p&gt;Es multiplataforma:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desarrollodeaplicacionesmultiplataformaconpythonykivy-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Soporta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux (Debian, Ubuntu, Fedora, ArchLinux, etc). &lt;/li&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;IOS de Apple&lt;/li&gt;
&lt;li&gt;OSX de Apple&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para descargarlo pueden visitar la p&amp;aacute;gina del &lt;a href="https://kivy.org/#download"&gt;proyecto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En el caso de Debian en la versi&amp;oacute;n estable (wheezy) toca instalarlo v&amp;iacute;a &lt;code&gt;pip&lt;/code&gt; o bajar la fuente del enlace anterior.
&lt;code&gt;pip install kivy (aplica para cualquier versi&amp;oacute;n de Debian o distro basada en Debian).&lt;/code&gt;
Para el caso de la versi&amp;oacute;n de pruebas (Jessie) ya viene en los repositorios de Debian:
&lt;code&gt;apt-get install python-kivy python3-kivy python-kivy-examples&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para m&amp;aacute;s informaci&amp;oacute;n del proyecto pueden visitar su &lt;a href="https://github.com/kivy/kivy/wiki"&gt;wiki en github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El ejemplo que se explicar&amp;aacute; es el de una ventana con una etiqueta que diga "Hola Mundo!", la primera versi&amp;oacute;n contendr&amp;aacute; todo el c&amp;oacute;digo en un script en python y la siguiente versi&amp;oacute;n se separa el script python de las caracter&amp;iacute;sticas de los widgets.&lt;/p&gt;
&lt;p&gt;C&amp;oacute;digo del hola mundo versi&amp;oacute;n 1:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa kivy"&gt;Se importa kivy&lt;/h1&gt;
&lt;p&gt;import kivy&lt;/p&gt;
&lt;h1 id="se valida que se este usando la version 1.8.0 de kivy"&gt;Se v&amp;aacute;lida que se est&amp;eacute; usando la versi&amp;oacute;n 1.8.0 de kivy&lt;/h1&gt;
&lt;p&gt;kivy.require('1.8.0')&lt;/p&gt;
&lt;h1 id="se importa la clase app y el widget label"&gt;Se importa la clase App y el widget Label&lt;/h1&gt;
&lt;p&gt;from kivy.app import App&lt;/p&gt;
&lt;p&gt;from kivy.uix.label import Label&lt;/p&gt;
&lt;h1 id="se crea la clase holaapp que hereda de app"&gt;Se crea la clase HolaApp que hereda de App&lt;/h1&gt;
&lt;p&gt;class HolaApp(App):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea la funci&amp;oacute;n build

def build(self):

    #Se retorna el widget Label con un texto y el tama&amp;ntilde;o del mismo

    return Label(text='Hola Mundo!!!',

                 font_size=100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se instancia la clase y se ejecuta

HolaApp().run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El script se llamar&amp;aacute; &lt;code&gt;hola.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la figura del resultado de la ejecuci&amp;oacute;n del script:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desarrollodeaplicacionesmultiplataformaconpythonykivy-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La versi&amp;oacute;n 2 del hola mundo se diferencia del primero por que ahora se manejar&amp;aacute; dos archivos, &lt;code&gt;hola2.py&lt;/code&gt; y &lt;code&gt;hola2.kv&lt;/code&gt;, su nombre tiene relaci&amp;oacute;n con el nombre de la clase que se crea y es la forma como python y kivy reconocen los archivos que necesitan ejecutar.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo de &lt;code&gt;hola2.py&lt;/code&gt;:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se imposta kivy"&gt;Se imposta kivy&lt;/h1&gt;
&lt;p&gt;import kivy&lt;/p&gt;
&lt;h1 id="se valida que se use la version 1.8.0 de kivy"&gt;Se valida que se use la versi&amp;oacute;n 1.8.0 de kivy&lt;/h1&gt;
&lt;p&gt;kivy.require('1.8.0')&lt;/p&gt;
&lt;h1 id="se importa la case app y el widget label"&gt;Se importa la case App y el widget Label&lt;/h1&gt;
&lt;p&gt;from kivy.app import App&lt;/p&gt;
&lt;p&gt;from kivy.uix.label import Label&lt;/p&gt;
&lt;h1 id="se crea la clase hola2app que hereda de app"&gt;Se crea la Clase Hola2App que hereda de App&lt;/h1&gt;
&lt;p&gt;class Hola2App(App):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se define la funci&amp;oacute;n build que retorna el widget Label

#Esta vez sin ning&amp;uacute;n argumento ya que ser&amp;aacute; manejado por el archivo hola2.kv

def build(self):

    return Label()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se instancia la clase Hola2App y se ejecuta.

Hola2App().run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&amp;oacute;digo del archivo hola2.kv:&lt;/p&gt;
&lt;h1 id="file name: hola2.kv"&gt;File name: hola2.kv&lt;/h1&gt;
&lt;h1 id=":kivy 1.8.0"&gt;:kivy 1.8.0&lt;/h1&gt;
&lt;p&gt;&lt;label&gt;:&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;text: 'Hola mundo v 2!'&lt;/p&gt;
&lt;p&gt;font_size:100&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Este archivo tiene la descripci&amp;oacute;n de la etiqueta, con el par&amp;aacute;metro text y font_size, esto facilita tener ordenada y cambiar los par&amp;aacute;metros de los widgets sin tener que modificar c&amp;oacute;digo.&lt;/p&gt;
&lt;p&gt;El resultado de la ejecuci&amp;oacute;n del script &lt;code&gt;hola2.py&lt;/code&gt; se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desarrollodeaplicacionesmultiplataformaconpythonykivy-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;En siguientes art&amp;iacute;culos se seguir&amp;aacute; explicando el uso de los widgets y como instalar la librer&amp;iacute;a en Android y crear aplicaciones para Android.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Android"></category><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="gnome"></category><category term="python"></category><category term="Ubuntu"></category><category term="kivy"></category></entry><entry><title>Crear un demonio de Linux con Python</title><link href="https://ecrespo.github.io/crear-un-demonio-de-linux-con-python.html" rel="alternate"></link><published>2014-02-02T09:00:00-05:30</published><updated>2014-02-02T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-02-02:/crear-un-demonio-de-linux-con-python.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo se basa en el &lt;a href="http://www.gavinj.net/2012/06/building-python-daemon-process.html"&gt;siguiente art&amp;iacute;culo en ingl&amp;eacute;s&lt;/a&gt;.&lt;br/&gt;
La idea es crear un proceso demonio de Linux con Python.&lt;br/&gt;
Para ello se requerir&amp;aacute; los 2 siguientes librer&amp;iacute;as de python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python-daemon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python-lockfile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lo debian se usa el comando &lt;code&gt;apt-get&lt;/code&gt;:
```&lt;/p&gt;
&lt;h1 id="apt-get install python-daemon python-lockfile"&gt;apt-get install python-daemon python-lockfile&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;A lo python se ejecuta …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo se basa en el &lt;a href="http://www.gavinj.net/2012/06/building-python-daemon-process.html"&gt;siguiente art&amp;iacute;culo en ingl&amp;eacute;s&lt;/a&gt;.&lt;br/&gt;
La idea es crear un proceso demonio de Linux con Python.&lt;br/&gt;
Para ello se requerir&amp;aacute; los 2 siguientes librer&amp;iacute;as de python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python-daemon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python-lockfile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lo debian se usa el comando &lt;code&gt;apt-get&lt;/code&gt;:
```&lt;/p&gt;
&lt;h1 id="apt-get install python-daemon python-lockfile"&gt;apt-get install python-daemon python-lockfile&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;A lo python se ejecuta el comando pip:&lt;/code&gt;python&lt;/p&gt;
&lt;h1 id="pip install python-daemon lockfile"&gt;pip install python-daemon lockfile&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;``
A continuaci&amp;oacute;n se muestra el archivo&lt;/code&gt;demonioprueba.py&lt;code&gt;que se colocar&amp;aacute; en el directorio&lt;/code&gt;/usr/share/demonioprueba/`.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="libreria estandar loggin y time"&gt;libreria est&amp;aacute;ndar loggin y time&lt;/h1&gt;
&lt;p&gt;import logging&lt;/p&gt;
&lt;p&gt;import time&lt;/p&gt;
&lt;h1 id="de python-daemon import runner"&gt;de python-daemon import runner&lt;/h1&gt;
&lt;p&gt;from daemon import runner&lt;/p&gt;
&lt;p&gt;class App():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self):


    #Se define unos path est&amp;aacute;ndar en linux.


    self.stdin_path = '/dev/null'


    self.stdout_path = '/dev/tty'


    self.stderr_path = '/dev/tty'


    #Se define la ruta del archivo pid del demonio.


    self.pidfile_path =  '/var/run/demonioprueba/demonioprueba.pid'


    self.pidfile_timeout = 5





def run(self):


    i = 0


    while True:


        #El c&amp;oacute;digo principal va ac&amp;aacute;


        i += 1


        #Diferentes niveles de registro de bitacora


        logger.debug("Debug message %s" %i)


        logger.info("Info message %s" %i)


        logger.warn("Warning message %s" %i)


        logger.error("Error message %s" %i)


        time.sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se crea la instancia de la clase"&gt;Se crea la instancia de la clase&lt;/h1&gt;
&lt;p&gt;app = App()&lt;/p&gt;
&lt;h1 id="define la instancia de la clase logging para generar la bitacora"&gt;define la instancia de la clase logging para generar la bitacora&lt;/h1&gt;
&lt;p&gt;logger = logging.getLogger("demonioprueba log")&lt;/p&gt;
&lt;p&gt;logger.setLevel(logging.INFO)&lt;/p&gt;
&lt;h1 id="se define el forma del log"&gt;Se define el forma del log&lt;/h1&gt;
&lt;p&gt;formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")&lt;/p&gt;
&lt;p&gt;handler = logging.FileHandler("/var/log/demonioprueba/demoniopruebas.log")&lt;/p&gt;
&lt;p&gt;handler.setFormatter(formatter)&lt;/p&gt;
&lt;p&gt;logger.addHandler(handler)&lt;/p&gt;
&lt;h1 id="se ejecuta el demonio llamando al objeto app"&gt;Se ejecuta el demonio llamando al objeto app&lt;/h1&gt;
&lt;p&gt;daemon_runner = runner.DaemonRunner(app)&lt;/p&gt;
&lt;h1 id="esto evita que el archivo log no se cierre durante la ejecucion del demonio"&gt;Esto evita que el archivo log no se cierre durante la ejecuci&amp;oacute;n del demonio&lt;/h1&gt;
&lt;p&gt;daemon_runner.daemon_context.files_preserve=[handler.stream]&lt;/p&gt;
&lt;h1 id="ejecuta el metodo run del objeto app"&gt;Ejecuta el m&amp;eacute;todo run del objeto app&lt;/h1&gt;
&lt;p&gt;daemon_runner.do_action()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El archivo se salva en la ruta &lt;code&gt;/usr/share/demonioprueba/demonioprueba.py&lt;/code&gt;.
Se crean los directorios &lt;code&gt;/var/log/demonioprueba&lt;/code&gt; y &lt;code&gt;/var/run/demonioprueba/&lt;/code&gt;:
```&lt;/p&gt;
&lt;h1 id="mkdir -p /var/log/demonioprueba"&gt;mkdir -p /var/log/demonioprueba&lt;/h1&gt;
&lt;h1 id="mkdir -p /var/run/demonioprueba"&gt;mkdir -p /var/run/demonioprueba&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Se puede probar el demonio al ejecutar el siguiente comando:&lt;/code&gt;python
python/usr/share/demonioprueba/demonioprueba.py start
root@heimdal:~# started with pid 5915
&lt;code&gt;Se muestra que el demonio se inicio con el pid 5915.
Al ejecutar `ps aux  | grep demonioprueba.py` se ver&amp;aacute; el proceso en ejecuci&amp;oacute;n:&lt;/code&gt;
root@heimdal:~# ps aux | grep demonioprueba.py
root      5915  0.0  0.1  38088  6656 ?        S    17:00   0:00 python /usr/share/demonioprueba/demonioprueba.py start
```
Como se ve el proceso se inicio con el pid 5915. &lt;/p&gt;
&lt;p&gt;Se puede ver la bitacora al ejecutar:
&lt;code&gt;tail -f /var/log/demonioprueba/demonioprueba.log&lt;/code&gt;
A continuaci&amp;oacute;n se muestra una parte del log:
&lt;code&gt;2014-02-02 17:01:25,516 - demonioprueba log - WARNING - Warning message 80
2014-02-02 17:01:25,516 - demonioprueba log - ERROR - Error message 80
2014-02-02 17:01:26,517 - demonioprueba log - INFO - Info message 81
2014-02-02 17:01:26,517 - demonioprueba log - WARNING - Warning message 81
2014-02-02 17:01:26,518 - demonioprueba log - ERROR - Error message 81
2014-02-02 17:01:27,519 - demonioprueba log - INFO - Info message 82
2014-02-02 17:01:27,519 - demonioprueba log - WARNING - Warning message 82
2014-02-02 17:01:27,519 - demonioprueba log - ERROR - Error message 82
2014-02-02 17:01:28,520 - demonioprueba log - INFO - Info message 83
2014-02-02 17:01:28,521 - demonioprueba log - WARNING - Warning message 83
2014-02-02 17:01:28,521 - demonioprueba log - ERROR - Error message 83
2014-02-02 17:01:29,522 - demonioprueba log - INFO - Info message 84
2014-02-02 17:01:29,523 - demonioprueba log - WARNING - Warning message 84
2014-02-02 17:01:29,523 - demonioprueba log - ERROR - Error message 84
2014-02-02 17:01:30,523 - demonioprueba log - INFO - Info message 85
2014-02-02 17:01:30,524 - demonioprueba log - WARNING - Warning message 85
2014-02-02 17:01:30,524 - demonioprueba log - ERROR - Error message 85&lt;/code&gt;
Se puede detener el demonio ejecutando:
&lt;code&gt;root@heimdal:~# python /usr/share/demonioprueba/demonioprueba.py stop
Terminating on signal 15&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ahora se crear&amp;aacute; el archivo init de demonio prueba ( salvar el archivo en &lt;code&gt;/etc/init.d/demonioprueba&lt;/code&gt; ):&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el script bash que se usa de plantilla como demonio init:
```python&lt;/p&gt;
&lt;h1 id="!/bin/bash"&gt;!/bin/bash&lt;/h1&gt;
&lt;h1 id="copyright (c) 1996-2012 my company."&gt;Copyright (c) 1996-2012 My Company.&lt;/h1&gt;
&lt;h1 id="all rights reserved."&gt;All rights reserved.&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="author: bob bobson, 2012"&gt;Author: Bob Bobson, 2012&lt;/h1&gt;
&lt;h1 id="_2"&gt;&lt;/h1&gt;
&lt;h1 id="please send feedback to bob@bob.com"&gt;Please send feedback to bob@bob.com&lt;/h1&gt;
&lt;h1 id="_3"&gt;&lt;/h1&gt;
&lt;h1 id="/etc/init.d/demonioprueba"&gt;/etc/init.d/demonioprueba&lt;/h1&gt;
&lt;h1 id="_4"&gt;&lt;/h1&gt;
&lt;h3 id="begin init info"&gt;BEGIN INIT INFO&lt;/h3&gt;
&lt;h1 id="provides: demonioprueba_1"&gt;Provides: demonioprueba&lt;/h1&gt;
&lt;h1 id="required-start:"&gt;Required-Start:&lt;/h1&gt;
&lt;h1 id="should-start:"&gt;Should-Start:&lt;/h1&gt;
&lt;h1 id="required-stop:"&gt;Required-Stop:&lt;/h1&gt;
&lt;h1 id="should-stop:"&gt;Should-Stop:&lt;/h1&gt;
&lt;h1 id="default-start: 3 5"&gt;Default-Start:  3 5&lt;/h1&gt;
&lt;h1 id="default-stop: 0 1 2 6"&gt;Default-Stop:   0 1 2 6&lt;/h1&gt;
&lt;h1 id="short-description: test daemon process"&gt;Short-Description: Test daemon process&lt;/h1&gt;
&lt;h1 id="description: runs up the test daemon process"&gt;Description:    Runs up the test daemon process&lt;/h1&gt;
&lt;h3 id="end init info"&gt;END INIT INFO&lt;/h3&gt;
&lt;h1 id="activate the python virtual environment_1"&gt;Activate the python virtual environment&lt;/h1&gt;
&lt;h1 id=". /path_to_virtualenv/activate"&gt;. /path_to_virtualenv/activate&lt;/h1&gt;
&lt;p&gt;case "$1" in&lt;/p&gt;
&lt;p&gt;start)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "Starting server"

# Start the daemon

python /usr/share/demonioprueba/demonioprueba.py start

;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stop)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "Stopping server"

# Stop the daemon

python /usr/share/demonioprueba/demonioprueba.py stop

;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "Restarting server"

python /usr/share/demonioprueba/demonioprueba.py restart

;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;*)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Refuse to do other stuff


echo "Usage: /etc/init.d/demonioprueba.sh {start|stop|restart}"


exit 1


;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;esac&lt;/p&gt;
&lt;p&gt;exit 0&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Se le cambia el permiso al script:
&lt;code&gt;chmod u+x demonioprueba.sh&lt;/code&gt;
Se habilita el script para la ejecuci&amp;oacute;n autom&amp;aacute;tica:
&lt;code&gt;root@heimdal:/etc/init.d# insserv demonioprueba.sh&lt;/code&gt;
Ac&amp;aacute; les dejo &lt;a href="https://nanvel.name/weblog/python-unix-daemon/"&gt;un ejemplo parecido&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Fedora"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Python-daemon"></category><category term="Python-lockfile"></category></entry><entry><title>Crear URL recortadas con Python (bit.ly)</title><link href="https://ecrespo.github.io/crear-url-recortadas-con-python-bitly.html" rel="alternate"></link><published>2014-01-25T09:00:00-05:30</published><updated>2014-01-25T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-01-25:/crear-url-recortadas-con-python-bitly.html</id><summary type="html">&lt;p&gt;Todos conocemos lo famoso que se han hecho los sitios para recortar URL debido al problema de microblogin a 144 caracteres (donde tenemos que ahorrar en la escritura).&lt;/p&gt;
&lt;p&gt;Los recortadores reducen la cantidad de caracteres que puede llegar a tener una url que queramos compartir.&lt;/p&gt;
&lt;p&gt;Existen varios sitios que facilitan …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos conocemos lo famoso que se han hecho los sitios para recortar URL debido al problema de microblogin a 144 caracteres (donde tenemos que ahorrar en la escritura).&lt;/p&gt;
&lt;p&gt;Los recortadores reducen la cantidad de caracteres que puede llegar a tener una url que queramos compartir.&lt;/p&gt;
&lt;p&gt;Existen varios sitios que facilitan el recortar URL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bit.ly&lt;/li&gt;
&lt;li&gt;Goo.gl&lt;/li&gt;
&lt;li&gt;TinyURL  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En este caso se va a probar con &lt;code&gt;bit.ly&lt;/code&gt;, el sitio tiene un API para poder acceder desde un programa, su documentaci&amp;oacute;n se encuentra &lt;a href="https://dev.bitly.com/api.html"&gt;ac&amp;aacute;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bitly.com/a/sign_in?rd=/a/oauth_apps"&gt;Es necesario registrar la aplicaci&amp;oacute;n&lt;/a&gt; y luego buscar el &lt;a href="https://bitly.com/a/your_api_key"&gt;apikey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El script que se va a hacer tiene de requerimiento los siguientes m&amp;oacute;dulos de python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urllib2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;simplejson&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El script es sencillo, se pasa la serie de m&amp;oacute;dulos a utilizar, se pasa el usuario y el apikey que se obtuvo de ' &lt;code&gt;bit.ly&lt;/code&gt; y se llama a la funci&amp;oacute;n que recorta la url.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/python"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="script que convierte un url a un url recortado por medio de bit.ly"&gt;Script que convierte un url a un url recortado por medio de bit.ly&lt;/h1&gt;
&lt;h1 id="requiere urllib, urllib2, re, simplejson"&gt;requiere urllib, urllib2, re, simplejson&lt;/h1&gt;
&lt;h1 id="se intenta importar los modulos que se necesito si no devuelve mensaje de error"&gt;Se intenta importar los modulos que se necesito si no devuelve mensaje de error&lt;/h1&gt;
&lt;h1 id="donde se menciona que se requiere los los modulos."&gt;donde se menciona que se requiere los los modulos.&lt;/h1&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;p&gt;from re import match&lt;/p&gt;
&lt;p&gt;from urllib2 import urlopen, Request, HTTPError&lt;/p&gt;
&lt;p&gt;from urllib import urlencode&lt;/p&gt;
&lt;p&gt;from simplejson import loads&lt;/p&gt;
&lt;p&gt;except ImportError, e:&lt;/p&gt;
&lt;p&gt;raise Exception('Required module missing: %s' % e.args[0])&lt;/p&gt;
&lt;h1 id="definicion de usuario y clave bit.ly"&gt;Definicion de usuario y clave bit.ly&lt;/h1&gt;
&lt;p&gt;user = "o_5j8ri77vv6aa"&lt;/p&gt;
&lt;p&gt;apikey  = "R_172fe1dcf183470c85ce345aaa784cf9395"&lt;/p&gt;
&lt;h1 id="funcion que recorta el url, se le pasa un url y devuelve el mismo recortado"&gt;Funcion que recorta el url, se le pasa un url y devuelve el mismo recortado&lt;/h1&gt;
&lt;p&gt;def shorten(url):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se maneja la excepcion de error http





try:


    #Se le pasa los parametros url, user, apikey y formato de serializacion en


    #este caso json


    params = urlencode({'longUrl': url, 'login': user, 'apiKey': apikey, 'format': 'json'})


    #Se hace la solicitud al api de bit.ly pasandole los parametros


    req = Request("http://api.bit.ly/v3/shorten?%s" % params)


    #Se abre la respuesta.


    response = urlopen(req)


    #Se lee y se carga


    j = loads(response.read())


    #Si el codigo de estatus de la peticion http es 200


    #se retona el url recortada


    if j['status_code'] == 200:


        return j['data']['url']


    #Si no es 200 se genera una excepcion pasando el mensaje de estatus


    raise Exception('%s'%j['status_txt'])


#Si no se logra la conexion http se devuelve un mensaje de error.


except HTTPError, e:


    raise('HTTP error%s'%e.read())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se importa argv del modulo sys


from sys import argv


#Si no inicia el argumento con http se devuelve un mensaje de error


#solicitando que se coloque el http al url.


if not match('http://',argv[1]):


    raise Exception('Debe iniciar con "http://"')


#Se muestra en la consola el url recortado

print shorten(argv[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Al ejecutar el script se tiene lo siguiente:&lt;br/&gt;
```
ernesto@grievous:~/bin/python$ ./acortarurl.py http://blog.crespo.org.ve&lt;/p&gt;
&lt;p&gt;http://bit.ly/LXP0QB&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Con el script ya se puede ir recortando url de por ejemplo el art&amp;iacute;culo anterior donde se &lt;a href="http://blog.crespo.org.ve/2014/01/jugando-con-rss-del-blog-desde-python.html"&gt;obtiene la lista de art&amp;iacute;culos de un blog por medio de rss&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Ubuntu"></category><category term="bit.ly"></category></entry><entry><title>Obtener información del clima en una ciudad con Python</title><link href="https://ecrespo.github.io/obtener-informacion-del-clima-en-una-ciudad-con-python.html" rel="alternate"></link><published>2014-01-19T09:00:00-05:30</published><updated>2014-01-19T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-01-19:/obtener-informacion-del-clima-en-una-ciudad-con-python.html</id><summary type="html">&lt;p&gt;Existe la librer&amp;iacute;a &lt;a href="https://github.com/csparpa/pyowm"&gt;PyOWM&lt;/a&gt; el cual es un wrapper para el API de OpenWeatherMap. 
La documentaci&amp;oacute;n para utilizar la librer&amp;iacute;a se encuentra en el siguiente &lt;a href="https://github.com/csparpa/pyowm/wiki/Usage-examples"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para poder utilizar la librer&amp;iacute;a es necesario crear una cuenta en OpenWeatherMap y en el perfil del usuario buscar el APPID. En el &lt;a href="https://openweathermap.org/appid"&gt;enlace …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Existe la librer&amp;iacute;a &lt;a href="https://github.com/csparpa/pyowm"&gt;PyOWM&lt;/a&gt; el cual es un wrapper para el API de OpenWeatherMap. 
La documentaci&amp;oacute;n para utilizar la librer&amp;iacute;a se encuentra en el siguiente &lt;a href="https://github.com/csparpa/pyowm/wiki/Usage-examples"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para poder utilizar la librer&amp;iacute;a es necesario crear una cuenta en OpenWeatherMap y en el perfil del usuario buscar el APPID. En el &lt;a href="https://openweathermap.org/appid"&gt;enlace&lt;/a&gt; explican el procedimiento.&lt;/p&gt;
&lt;p&gt;Para instalar la librer&amp;iacute;a se ejecuta &lt;code&gt;pip&lt;/code&gt;:
```&lt;/p&gt;
&lt;h1 id="pip install pyowm"&gt;pip install pyowm&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo de un script que muestra el uso de la librer&amp;iacute;a:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import pyowm&lt;/p&gt;
&lt;h1 id="llave del uso del api"&gt;Llave del uso del API&lt;/h1&gt;
&lt;p&gt;apikey = "abcdefghijklimnopqrstuvxyz"&lt;/p&gt;
&lt;h1 id="se crea la instancia owm pasando la llave para el uso del api."&gt;Se crea la instancia OWM pasando la llave para el uso del API.&lt;/h1&gt;
&lt;p&gt;owm = pyowm.OWM(apikey)&lt;/p&gt;
&lt;h1 id="se obtiene la llave de uso del api"&gt;Se obtiene la llave de uso del API&lt;/h1&gt;
&lt;p&gt;print owm.get_API_key()&lt;/p&gt;
&lt;h1 id="se define la ciudad por nombre o se pasa la coordenada."&gt;Se define la ciudad por nombre o se pasa la coordenada.&lt;/h1&gt;
&lt;p&gt;obs = owm.weather_at('Valencia,ve')&lt;/p&gt;
&lt;h1 id="obs = owm.weather_at_coords(-0.107331,51.503614)"&gt;obs = owm.weather_at_coords(-0.107331,51.503614)&lt;/h1&gt;
&lt;p&gt;print "tiempo: ", obs.get_reception_time()&lt;/p&gt;
&lt;p&gt;print "tiempo: ", obs.get_reception_time(timeformat='iso')&lt;/p&gt;
&lt;h1 id="se instancia los datos de la estacion meterologica."&gt;Se Instancia los datos de la estacion meterologica.&lt;/h1&gt;
&lt;p&gt;w = obs.get_weather()&lt;/p&gt;
&lt;p&gt;print "Fecha y hora ",w.get_reference_time(timeformat='iso')&lt;/p&gt;
&lt;p&gt;print "Nubes:", w.get_clouds()&lt;/p&gt;
&lt;p&gt;print  "lluvias:", w.get_rain()&lt;/p&gt;
&lt;p&gt;print "Nieve: ", w.get_snow()&lt;/p&gt;
&lt;p&gt;print "viento", w.get_wind()&lt;/p&gt;
&lt;p&gt;print "humedad:",w.get_humidity()&lt;/p&gt;
&lt;p&gt;print "presion:", w.get_pressure()&lt;/p&gt;
&lt;p&gt;print "Temperatura:",w.get_temperature()&lt;/p&gt;
&lt;p&gt;print "Temperatura:",w.get_temperature(unit='celsius')&lt;/p&gt;
&lt;p&gt;print "Estatus", w.get_status()&lt;/p&gt;
&lt;p&gt;print "Hora de salida del sol",w.get_sunrise_time("iso")&lt;/p&gt;
&lt;p&gt;print "Hora de ocultarse el sol",w.get_sunset_time('iso')&lt;/p&gt;
&lt;p&gt;l = obs.get_location()&lt;/p&gt;
&lt;p&gt;print "nombre:", l.get_name()&lt;/p&gt;
&lt;p&gt;print "Longitud: %s, Latitud: %s"   %(l.get_lon(),l.get_lat())&lt;/p&gt;
&lt;p&gt;print "Identificador", l.get_ID()
```&lt;/p&gt;
&lt;p&gt;Al ejecutar la aplicaci&amp;oacute;n se tiene lo siguiente:&lt;/p&gt;
&lt;p&gt;```python
ernesto@heimdal:~/bin/python$ ./clima.py &lt;/p&gt;
&lt;p&gt;abcdefghijklimnopqrstuvxyz&lt;/p&gt;
&lt;p&gt;tiempo:  1390165372&lt;/p&gt;
&lt;p&gt;tiempo:  2014-01-19 21:02:52+00&lt;/p&gt;
&lt;p&gt;Fecha y hora  2014-01-19 20:00:00+00&lt;/p&gt;
&lt;p&gt;Nubes: 20&lt;/p&gt;
&lt;p&gt;lluvias: {}&lt;/p&gt;
&lt;p&gt;Nieve:  {}&lt;/p&gt;
&lt;p&gt;viento {u'speed': 2.1, u'deg': 110}&lt;/p&gt;
&lt;p&gt;humedad: 41&lt;/p&gt;
&lt;p&gt;presion: {'press': 1012, 'sea_level': None}&lt;/p&gt;
&lt;p&gt;Temperatura: {'temp_kf': None, 'temp_min': 308.15, 'temp': 308.15, 'temp_max': 308.15}&lt;/p&gt;
&lt;p&gt;Temperatura: {'temp_kf': None, 'temp_max': 35.0, 'temp': 35.0, 'temp_min': 35.0}&lt;/p&gt;
&lt;p&gt;Estatus clouds&lt;/p&gt;
&lt;p&gt;Hora de salida del sol 2014-01-19 10:54:19+00&lt;/p&gt;
&lt;p&gt;Hora de ocultarse el sol 2014-01-19 22:31:34+00&lt;/p&gt;
&lt;p&gt;nombre: Valencia&lt;/p&gt;
&lt;p&gt;Longitud: -68.01, Latitud: 10.16&lt;/p&gt;
&lt;p&gt;Identificador 3625549  &lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Noten que la hora de salida y ocultamiento del sol est&amp;aacute; referente al meridiano 
de greenwich (es necesario ajustar al huso horario correspondiente).&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Python"></category><category term="Ubuntu"></category><category term="PyOWM"></category></entry><entry><title>Jugando con RSS del blog desde Python</title><link href="https://ecrespo.github.io/jugando-con-rss-del-blog-desde-python.html" rel="alternate"></link><published>2014-01-18T09:00:00-05:30</published><updated>2014-01-18T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2014-01-18:/jugando-con-rss-del-blog-desde-python.html</id><summary type="html">&lt;p&gt;Feliz a&amp;ntilde;o a todos.
Ten&amp;iacute;a algo de tiempo sin escribir en el blog. &lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo trata del como usar la librer&amp;iacute;a &lt;code&gt;Feedparser&lt;/code&gt; para extraer informaci&amp;oacute;n del RSS de este blog.&lt;/p&gt;
&lt;p&gt;Al final del blog (blog.crespo.org.ve) aparece la suscripci&amp;oacute;n al Blog por medio de Atom (ver imagen):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/jugandoconrssdelblogdesdepython-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Feliz a&amp;ntilde;o a todos.
Ten&amp;iacute;a algo de tiempo sin escribir en el blog. &lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo trata del como usar la librer&amp;iacute;a &lt;code&gt;Feedparser&lt;/code&gt; para extraer informaci&amp;oacute;n del RSS de este blog.&lt;/p&gt;
&lt;p&gt;Al final del blog (blog.crespo.org.ve) aparece la suscripci&amp;oacute;n al Blog por medio de Atom (ver imagen):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/jugandoconrssdelblogdesdepython-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al darle clip al enlace aparece lo siguiente (http://feeds.feedburner.com/LaLibertadDeDesarrollarNoTienePrecio):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/jugandoconrssdelblogdesdepython-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;El blog est&amp;aacute; sindicalizado desde FeedBurner.&lt;/p&gt;
&lt;p&gt;La idea es utilizar la librer&amp;iacute;a &lt;code&gt;feedparser&lt;/code&gt; para extraer informaci&amp;oacute;n de la sindicalizaci&amp;oacute;n del blog.&lt;/p&gt;
&lt;p&gt;Se importa la librer&amp;iacute;a &lt;code&gt;feedparser&lt;/code&gt;:
```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import feedparser
&lt;code&gt;Se instancia la clase `parse` con el url  de la sindicalizaci&amp;oacute;n del blog:&lt;/code&gt;python
d = feedparser.parse('http://feeds.feedburner.com/LaLibertadDeDesarrollarNoTienePrecio')
&lt;code&gt;Se muestra el t&amp;iacute;tulo del blog:&lt;/code&gt;python
d['feed']['title']&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'La libertad de desarrollar no tiene  precio...'
&lt;code&gt;Otra forma de obtener el t&amp;iacute;tulo del blog:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.feed.title&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'La libertad de desarrollar no tiene  precio...'
&lt;code&gt;Enlace del blog:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.feed.link&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'http://blog.crespo.org.ve/'
&lt;code&gt;Descripci&amp;oacute;n del blog:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.feed.description&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'Blog dedicado al Software Libre en especial Linux Debian, Android y FreeBSD, a la programaci\xf3n en python con gtk, qt y en Android.'
&lt;code&gt;Elementos del diccionario:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.keys()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;['feed', 'status', 'updated', 'updated_parsed', 'encoding', 'bozo', 'headers', 'etag', 'href', 'version', 'entries', 'namespaces']
&lt;code&gt;Para obtener el author del blog, se ejecuta author en feed:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.feed.author&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'Ernesto Crespo (noreply@blogger.com)'
&lt;code&gt;La codificaci&amp;oacute;n del texto del blog es UTF-8:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.encoding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'UTF-8'
&lt;code&gt;Estatus:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;200
&lt;code&gt;Actualizaci&amp;oacute;n:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.updated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;'Sun, 19 Jan 2014 00:03:47 GMT'
&lt;code&gt;En este caso devuelve la hora pero la informaci&amp;oacute;n separada:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.updated_parsed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;time.struct_time(tm_year=2014, tm_mon=1, tm_mday=19, tm_hour=0, tm_min=3, tm_sec=47, tm_wday=6, tm_yday=19, tm_isdst=0)
&lt;code&gt;Encabezados del blog:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.headers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;{'alternate-protocol': '80:quic', 'x-xss-protection': '1; mode=block', 'x-content-type-options': 'nosniff', 'expires': 'Sun, 19 Jan 2014 01:01:50 GMT', 'server': 'GSE', 'last-modified': 'Sun, 19 Jan 2014 00:03:47 GMT', 'connection': 'close', 'etag': 'hSh9ZbFEawbSc3BqlNVkqha27os', 'cache-control': 'private, max-age=0', 'date': 'Sun, 19 Jan 2014 01:01:50 GMT', 'content-type': 'text/xml; charset=UTF-8'}
&lt;code&gt;Enlace:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.href&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'http://feeds.feedburner.com/LaLibertadDeDesarrollarNoTienePrecio'
&lt;code&gt;Tipo de RSS (Atom1.0):&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.version&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'atom10'&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cantidad de entradas:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;len(d.entries)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;25
&lt;code&gt;Si se desea obtener el t&amp;iacute;tulo de la &amp;uacute;ltima entrada en el blog:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.entries[0].title&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'Webscraping con Python Mechanize y BeautifulSoup4'
&lt;code&gt;Si se desea ver el contenido de la &amp;uacute;ltima entrada ( en html) :&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.entries[0]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;.....&lt;/p&gt;
&lt;p&gt;'guidislink': True, 'published': u'2013-10-29T03:30:00.000-04:30', u'thr_total': u'0'}
```
Devuelve un diccionario con dentro c&amp;oacute;digo html  e informaci&amp;oacute;n adicional.&lt;/p&gt;
&lt;p&gt;Para obtener el link del &amp;uacute;ltimo art&amp;iacute;culo:
```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.entries[0].link&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/A9jUi9ATI2g/webscraping-con-python-mechanize-y.html'
&lt;code&gt;La fecha de publicaci&amp;oacute;n del &amp;uacute;ltimo art&amp;iacute;culo:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.entries[0].published&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'2013-10-29T03:30:00.000-04:30'
&lt;code&gt;El id del &amp;uacute;ltimo art&amp;iacute;culo:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;d.entries[0].id&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;u'tag:blogger.com,1999:blog-882744969176160062.post-8013337259867824164'
&lt;code&gt;Si se desea listar los &amp;uacute;ltimos 25 art&amp;iacute;culos con su t&amp;iacute;tulo y enlace se ejecuta un ciclo:&lt;/code&gt;python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for post in d.entries:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;...     print post.title + ": " + post.link + "\n"&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;Webscraping con Python Mechanize y BeautifulSoup4: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/A9jUi9ATI2g/webscraping-con-python-mechanize-y.html&lt;/p&gt;
&lt;p&gt;Extracci&amp;oacute;n de datos con Scraperwiki y Python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/UbQD5y9jbr0/extraccion-de-datos-con-scraperwiki-y.html&lt;/p&gt;
&lt;p&gt;Extracci&amp;oacute;n de datos de p&amp;aacute;gina web con pyquery y Python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/1QbC7CmSqpk/extraccion-de-datos-de-pagina-web-con.html&lt;/p&gt;
&lt;p&gt;Extracci&amp;oacute;n de datos de p&amp;aacute;ginas web con Scrapemark y Python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/g2iUGraxW0M/extraccion-de-datos-de-paginas-web-con.html&lt;/p&gt;
&lt;p&gt;Extracci&amp;oacute;n de datos en p&amp;aacute;ginas web con Webscraping y Python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/W9NyMTnRYok/extraccion-de-datos-en-paginas-web-con.html&lt;/p&gt;
&lt;p&gt;Webscraping o extracci&amp;oacute;n de datos de p&amp;aacute;ginas web con BeautifulSoup4 y Python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/xFr0x9bSo7E/webscraping-o-extraccion-de-datos-de.html&lt;/p&gt;
&lt;p&gt;Un introducci&amp;oacute;n a Beautiful Soup 4 en Python.: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/_7MGtsSCnPg/un-introduccion-beautiful-soup-4-en.html&lt;/p&gt;
&lt;p&gt;Obtener informaci&amp;oacute;n de metadatos EXIF de una imagen con Python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/8U6SjV9RS-w/obtener-informacion-de-metadatos-exif.html&lt;/p&gt;
&lt;p&gt;Mostrar tweets en tiempo real con twython y el API Stream de Twitter: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/jdMIKN04gDs/mostrar-tweets-en-tiempo-real-con.html&lt;/p&gt;
&lt;p&gt;Descrubiendo Trending Topics de Twitter con twython y python: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/hfKN5Cat5Hw/descrubiendo-trending-topics-de-twitter.html&lt;/p&gt;
&lt;p&gt;Probando la librer&amp;iacute;a twython para twitter: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/qfv-BUMniFA/probando-la-libreria-twython-para.html&lt;/p&gt;
&lt;p&gt;Manejo de sesi&amp;oacute;n en el ORM sqlalchemy: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/OjR1D7SxjGQ/manejo-de-sesion-en-el-orm-sqlalchemy.html&lt;/p&gt;
&lt;p&gt;Bajar v&amp;iacute;deos de youtube desde Python con Pafy.: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/IV42QCqWZA8/bajar-videos-de-youtube-desde-python.html&lt;/p&gt;
&lt;p&gt;D&amp;iacute;a Debian en Barquisimeto: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/fK8Q4DtjW8c/dia-debian-en-barquisimeto.html&lt;/p&gt;
&lt;p&gt;Nodos m&amp;aacute;s influenyes en un grafo con networkx. Parte 4.: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/knGC3Agy03M/nodos-mas-influenyes-en-un-grafo-con.html&lt;/p&gt;
&lt;p&gt;Mejorar la privacidad en celulares y tabletas con Android: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/WHiecOQggP4/mejorar-la-privacidad-en-celulares-y.html&lt;/p&gt;
&lt;p&gt;Graficar la tangente de una curva con python, numpy y pylab.: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/YB9pcnkSjPg/graficar-la-tangente-de-una-curva-con.html&lt;/p&gt;
&lt;p&gt;Utilizando el API de Stream de Twitter con Python y tweetstream. Parte 1.: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/4XndFuAR-wQ/utilizando-el-api-de-stream-de-twitter.html&lt;/p&gt;
&lt;p&gt;M&amp;aacute;quinas virtuales con kvm y qemu: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/hBovEziYwnM/maquinas-virtuales-con-kvm-y-qemu.html&lt;/p&gt;
&lt;p&gt;Descubriendo trending topics de twitter con python-twitter.: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/kAqQ7BRC_4w/descubriendo-trending-topics-de-twitter.html&lt;/p&gt;
&lt;p&gt;Descubrir equipos en una Red Local con Python (ipcalc y scapy).: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/KSulfIHpfaA/descubrir-equipos-en-una-red-local-con.html&lt;/p&gt;
&lt;p&gt;Resoluci&amp;oacute;n de sistemas de ecuaciones lineales por descomposi&amp;oacute;n QR usando Numpy: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/KJ6mmAemwzk/resolucion-de-sistemas-de-ecuaciones.html&lt;/p&gt;
&lt;p&gt;Creaci&amp;oacute;n de gr&amp;aacute;fico de burbujas con matplotlib: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/Lu7ps2Z-zQI/creacion-de-grafico-de-burbujas-con.html&lt;/p&gt;
&lt;p&gt;Manejar informaci&amp;oacute;n de un archivo csv con csvkit: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/6opCWEx9RoU/manejar-informacion-de-un-archivo-csv.html&lt;/p&gt;
&lt;p&gt;Teorema de muestreo explicado con numpy: http://feedproxy.google.com/~r/LaLibertadDeDesarrollarNoTienePrecio/~3/VoY_nZzRtwY/teorema-de-muestreo-explicado-con-numpy.html
```
De est&amp;aacute; forma se puede acceder con python al RSS de blogs.
En pr&amp;oacute;ximo art&amp;iacute;culo se buscar&amp;aacute; recortar los urls desde python.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Webscraping con Python Mechanize y BeautifulSoup4</title><link href="https://ecrespo.github.io/webscraping-con-python-mechanize-y-beautifulsoup4.html" rel="alternate"></link><published>2013-10-29T09:00:00-05:30</published><updated>2013-10-29T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-29:/webscraping-con-python-mechanize-y-beautifulsoup4.html</id><summary type="html">&lt;p&gt;Ahora se utilizar&amp;aacute; a &lt;a href="https://www.seraph.to/emulando-la-navegacion-en-python-con-mechanize-parte-1.html"&gt;Python Mechanize&lt;/a&gt;  con &lt;a href="https://www.seraph.to/una-introduccion-a-beautiful-soup-4-en-python.html"&gt;BeautifulSoup4&lt;/a&gt; para extraer la informaci&amp;oacute;n de la salida y ocultamiento del sol en Venezuela con un breve cambio para mostrar el dinamismo que se le puede dar a la extracci&amp;oacute;n de datos de una p&amp;aacute;gina web.&lt;/p&gt;
&lt;p&gt;En este caso se extraer&amp;aacute; informaci&amp;oacute;n del …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ahora se utilizar&amp;aacute; a &lt;a href="https://www.seraph.to/emulando-la-navegacion-en-python-con-mechanize-parte-1.html"&gt;Python Mechanize&lt;/a&gt;  con &lt;a href="https://www.seraph.to/una-introduccion-a-beautiful-soup-4-en-python.html"&gt;BeautifulSoup4&lt;/a&gt; para extraer la informaci&amp;oacute;n de la salida y ocultamiento del sol en Venezuela con un breve cambio para mostrar el dinamismo que se le puede dar a la extracci&amp;oacute;n de datos de una p&amp;aacute;gina web.&lt;/p&gt;
&lt;p&gt;En este caso se extraer&amp;aacute; informaci&amp;oacute;n del mismo sitio &lt;a href="https://www.timeanddate.com/astronomy/venezuela/caracas"&gt;timeanddate&lt;/a&gt;, la diferencia es que en vez de s&amp;oacute;lo pasarle el c&amp;oacute;digo de Venezuela (58), se le pasar&amp;aacute; el mes y el a&amp;ntilde;o.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo muestra la informaci&amp;oacute;n del amanecer y atardecer de todo el mes de Octubre y Noviembre.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa mechanize y cookielib"&gt;Se importa mechanize y cookielib&lt;/h1&gt;
&lt;p&gt;import mechanize&lt;/p&gt;
&lt;p&gt;import cookielib&lt;/p&gt;
&lt;h1 id="se importa beautifulsoup"&gt;Se importa beautifulSoup&lt;/h1&gt;
&lt;p&gt;from BeautifulSoup import BeautifulSoup&lt;/p&gt;
&lt;p&gt;def DefinirUrl(mes,agno):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se pasa el url del sitio timeanddate con la informacion


#de la salida y ocultamiento del sol en Venezuela.


return "http://www.timeanddate.com/worldclock/astronomy.htmln=58&amp;amp;month=%s&amp;amp;year=%s&amp;amp;obj=sun&amp;amp;afl=-11&amp;amp;day=1" %(mes,agno)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def CapturarInformacion(mes,agno):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea una instancia de Browser


br = mechanize.Browser()


#Se crea una instancia para la Cookie


cj = cookielib.LWPCookieJar()


#Se asocia la instancia del cookie con el navegador.


br.set_cookiejar(cj)


#Se deshabilita el manejo de robots.txt


br.set_handle_robots(False)


#Se define el tiempo de refrescamiento


br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)


#Se pasa el url del sitio timeanddate con la informacion


url = DefinirUrl(mes,agno)


#de la salida y ocultamiento del sol en Venezuela.


#Se define las cabeceras del navegador, en este caso se le esta diciendo


# que el navegador es un firefox desde Linux Debian


br.addheaders = [('User-agent',


     'Mozilla/5.0 (X11; U; Linux i686; es-VE; rv:1.9.0.1)Gecko/2008071615 Debian/6.0 Firefox/9')]


#Se abre el url


r = br.open(url)


#Se lee el htmml de la pagina


html = br.response().read()


#Se crea una instancia de BeautifulSoup pasando el html


#a verificar


soup = BeautifulSoup(html)


#Se busca la palabra table, y de ahi class y se


#busca el contenido


#de cada columna de la tabla.


for row in soup('table', {'class': 'spad'})[0].tbody('tr'):


    tds = row('td')


    #Se muestra la fecha y hora de la salida del sol


    print tds[0].string, tds[1].string,tds[2].string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt;== "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print "Se muestra la informacion del mes de Octubre"


print "--------------------------------------------"


CapturarInformacion(10,2013)


print "Se muestra la informacion del mes de Noviembre"


print "--------------------------------------------"

CapturarInformacion(11,2013)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el resultado del script:&lt;/p&gt;
&lt;p&gt;Se muestra la informacion del mes de Octubre
```&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;1 Oct 2013 05:46 17:48&lt;/p&gt;
&lt;p&gt;2 Oct 2013 05:46 17:47&lt;/p&gt;
&lt;p&gt;3 Oct 2013 05:46 17:47&lt;/p&gt;
&lt;p&gt;4 Oct 2013 05:46 17:46&lt;/p&gt;
&lt;p&gt;5 Oct 2013 05:46 17:45&lt;/p&gt;
&lt;p&gt;6 Oct 2013 05:46 17:45&lt;/p&gt;
&lt;p&gt;7 Oct 2013 05:46 17:44&lt;/p&gt;
&lt;p&gt;8 Oct 2013 05:46 17:44&lt;/p&gt;
&lt;p&gt;9 Oct 2013 05:46 17:43&lt;/p&gt;
&lt;p&gt;10 Oct 2013 05:46 17:43&lt;/p&gt;
&lt;p&gt;11 Oct 2013 05:46 17:42&lt;/p&gt;
&lt;p&gt;12 Oct 2013 05:46 17:42&lt;/p&gt;
&lt;p&gt;13 Oct 2013 05:46 17:41&lt;/p&gt;
&lt;p&gt;14 Oct 2013 05:46 17:41&lt;/p&gt;
&lt;p&gt;15 Oct 2013 05:46 17:40&lt;/p&gt;
&lt;p&gt;16 Oct 2013 05:46 17:40&lt;/p&gt;
&lt;p&gt;17 Oct 2013 05:46 17:39&lt;/p&gt;
&lt;p&gt;18 Oct 2013 05:47 17:39&lt;/p&gt;
&lt;p&gt;19 Oct 2013 05:47 17:38&lt;/p&gt;
&lt;p&gt;20 Oct 2013 05:47 17:38&lt;/p&gt;
&lt;p&gt;21 Oct 2013 05:47 17:37&lt;/p&gt;
&lt;p&gt;22 Oct 2013 05:47 17:37&lt;/p&gt;
&lt;p&gt;23 Oct 2013 05:47 17:36&lt;/p&gt;
&lt;p&gt;24 Oct 2013 05:47 17:36&lt;/p&gt;
&lt;p&gt;25 Oct 2013 05:47 17:36&lt;/p&gt;
&lt;p&gt;26 Oct 2013 05:48 17:35&lt;/p&gt;
&lt;p&gt;27 Oct 2013 05:48 17:35&lt;/p&gt;
&lt;p&gt;28 Oct 2013 05:48 17:35&lt;/p&gt;
&lt;p&gt;29 Oct 2013 05:48 17:34&lt;/p&gt;
&lt;p&gt;30 Oct 2013 05:48 17:34&lt;/p&gt;
&lt;p&gt;31 Oct 2013 05:48 17:34&lt;/p&gt;
&lt;p&gt;Se muestra la informacion del mes de Noviembre&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;1 Nov 2013 05:49 17:33&lt;/p&gt;
&lt;p&gt;2 Nov 2013 05:49 17:33&lt;/p&gt;
&lt;p&gt;3 Nov 2013 05:49 17:33&lt;/p&gt;
&lt;p&gt;4 Nov 2013 05:49 17:33&lt;/p&gt;
&lt;p&gt;5 Nov 2013 05:50 17:33&lt;/p&gt;
&lt;p&gt;6 Nov 2013 05:50 17:32&lt;/p&gt;
&lt;p&gt;7 Nov 2013 05:50 17:32&lt;/p&gt;
&lt;p&gt;8 Nov 2013 05:51 17:32&lt;/p&gt;
&lt;p&gt;9 Nov 2013 05:51 17:32&lt;/p&gt;
&lt;p&gt;10 Nov 2013 05:51 17:32&lt;/p&gt;
&lt;p&gt;11 Nov 2013 05:51 17:32&lt;/p&gt;
&lt;p&gt;12 Nov 2013 05:52 17:32&lt;/p&gt;
&lt;p&gt;13 Nov 2013 05:52 17:32&lt;/p&gt;
&lt;p&gt;14 Nov 2013 05:53 17:31&lt;/p&gt;
&lt;p&gt;15 Nov 2013 05:53 17:31&lt;/p&gt;
&lt;p&gt;16 Nov 2013 05:53 17:31&lt;/p&gt;
&lt;p&gt;17 Nov 2013 05:54 17:31&lt;/p&gt;
&lt;p&gt;18 Nov 2013 05:54 17:31&lt;/p&gt;
&lt;p&gt;19 Nov 2013 05:54 17:32&lt;/p&gt;
&lt;p&gt;20 Nov 2013 05:55 17:32&lt;/p&gt;
&lt;p&gt;21 Nov 2013 05:55 17:32&lt;/p&gt;
&lt;p&gt;22 Nov 2013 05:56 17:32&lt;/p&gt;
&lt;p&gt;23 Nov 2013 05:56 17:32&lt;/p&gt;
&lt;p&gt;24 Nov 2013 05:57 17:32&lt;/p&gt;
&lt;p&gt;25 Nov 2013 05:57 17:32&lt;/p&gt;
&lt;p&gt;26 Nov 2013 05:58 17:32&lt;/p&gt;
&lt;p&gt;27 Nov 2013 05:58 17:32&lt;/p&gt;
&lt;p&gt;28 Nov 2013 05:59 17:33&lt;/p&gt;
&lt;p&gt;29 Nov 2013 05:59 17:33&lt;/p&gt;
&lt;p&gt;30 Nov 2013 06:00 17:33
```&lt;/p&gt;
&lt;p&gt;Como se muestra ya se puede agregar dinamismo a las busquedas que se quiera realizar en una p&amp;aacute;gina web, extrayendo su informaci&amp;oacute;n al pasarle datos al url. Adem&amp;aacute;s se muestra como usar &lt;code&gt;Python Mechanize&lt;/code&gt; para la captura de la p&amp;aacute;gina web y &lt;code&gt;BeautifulSoup4&lt;/code&gt; para capturar la informaci&amp;oacute;n necesaria.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Webscraping"></category><category term="Mechanize"></category><category term="Beautiful Soup"></category></entry><entry><title>Extracción de datos de página web con pyquery y Python</title><link href="https://ecrespo.github.io/extraccion-de-datos-de-pagina-web-con-pyquery-y-python.html" rel="alternate"></link><published>2013-10-27T09:00:00-05:30</published><updated>2013-10-27T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-27:/extraccion-de-datos-de-pagina-web-con-pyquery-y-python.html</id><summary type="html">&lt;p&gt;Continuando con los &lt;a href="https://www.seraph.to/tag/webscraping.html"&gt;art&amp;iacute;culos de webscraping&lt;/a&gt; ahora toca el turno a &lt;a href="https://pypi.org/project/pyquery/"&gt;pyquery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ya la explicaci&amp;oacute;n de ubicaci&amp;oacute;n de la informaci&amp;oacute;n que se desea obtener fue explicada en este &lt;a href="http://blog.crespo.org.ve/2013/10/webscraping-o-extraccion-de-datos-de.html"&gt;art&amp;iacute;culo&lt;/a&gt; art&amp;iacute;culo.&lt;/p&gt;
&lt;p&gt;Pyqueary es una librer&amp;iacute;a que permite hacer consultas de jquery y en documentos xml. &lt;/p&gt;
&lt;p&gt;La idea es obtener la informaci&amp;oacute;n …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los &lt;a href="https://www.seraph.to/tag/webscraping.html"&gt;art&amp;iacute;culos de webscraping&lt;/a&gt; ahora toca el turno a &lt;a href="https://pypi.org/project/pyquery/"&gt;pyquery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ya la explicaci&amp;oacute;n de ubicaci&amp;oacute;n de la informaci&amp;oacute;n que se desea obtener fue explicada en este &lt;a href="http://blog.crespo.org.ve/2013/10/webscraping-o-extraccion-de-datos-de.html"&gt;art&amp;iacute;culo&lt;/a&gt; art&amp;iacute;culo.&lt;/p&gt;
&lt;p&gt;Pyqueary es una librer&amp;iacute;a que permite hacer consultas de jquery y en documentos xml. &lt;/p&gt;
&lt;p&gt;La idea es obtener la informaci&amp;oacute;n de la salida y ocultamiento del sol ya explicado en art&amp;iacute;culos anteriores. &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar pyquery"&gt;importar pyquery&lt;/h1&gt;
&lt;p&gt;from pyquery import *&lt;/p&gt;
&lt;h1 id="se crea la instancia de la clase pyquery pasando el url de"&gt;Se Crea la instancia de la Clase PyQuery pasando el url de&lt;/h1&gt;
&lt;h1 id="timeanddate."&gt;timeanddate.&lt;/h1&gt;
&lt;p&gt;html = PyQuery(url='http://www.timeanddate.com/worldclock/astronomy.html?n=58')&lt;/p&gt;
&lt;h1 id="se busca el tag html de la tabla."&gt;Se busca el tag html de la tabla.&lt;/h1&gt;
&lt;h1 id="recibe todos los elementos de la tabla."&gt;Recibe todos los elementos de la tabla.&lt;/h1&gt;
&lt;p&gt;trs = html('table.spad tbody tr')&lt;/p&gt;
&lt;h1 id="se muestra los elementos de la tabla."&gt;Se muestra los elementos de la tabla.&lt;/h1&gt;
&lt;p&gt;print trs&lt;/p&gt;
&lt;h1 id="se recorre los elementos de la tabla"&gt;Se recorre los elementos de la tabla&lt;/h1&gt;
&lt;p&gt;for tr in trs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tds = tr.getchildren()

print tds[1].text, tds[2].text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El resultado de la ejecuci&amp;oacute;n del script se muestra a continuaci&amp;oacute;n:
```
05:47 17:36&lt;/p&gt;
&lt;p&gt;05:47 17:36&lt;/p&gt;
&lt;p&gt;05:48 17:35&lt;/p&gt;
&lt;p&gt;05:48 17:35&lt;/p&gt;
&lt;p&gt;05:48 17:35&lt;/p&gt;
&lt;p&gt;05:48 17:34&lt;/p&gt;
&lt;p&gt;05:48 17:34&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Webscraping"></category></entry><entry><title>Extracción de datos de páginas web con Scrapemark y Python</title><link href="https://ecrespo.github.io/extraccion-de-datos-de-paginas-web-con-scrapemark-y-python.html" rel="alternate"></link><published>2013-10-26T10:00:00-05:30</published><updated>2013-10-26T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-26:/extraccion-de-datos-de-paginas-web-con-scrapemark-y-python.html</id><summary type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre &lt;a href="https://www.seraph.to/tag/webscraping.html"&gt;webscraping&lt;/a&gt;, ahora es el turno de &lt;code&gt;scrapermark&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se sigue usando como p&amp;aacute;gina de ejemplo timeanddate.com. &lt;code&gt;Scrapermark&lt;/code&gt; usa expresiones regulares internamente lo que le da velocidad en la busqueda, utiliza un lenguaje parecido al HTML.&lt;/p&gt;
&lt;p&gt;Para bajar scrapermark se puede bajar el egg o el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre &lt;a href="https://www.seraph.to/tag/webscraping.html"&gt;webscraping&lt;/a&gt;, ahora es el turno de &lt;code&gt;scrapermark&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se sigue usando como p&amp;aacute;gina de ejemplo timeanddate.com. &lt;code&gt;Scrapermark&lt;/code&gt; usa expresiones regulares internamente lo que le da velocidad en la busqueda, utiliza un lenguaje parecido al HTML.&lt;/p&gt;
&lt;p&gt;Para bajar scrapermark se puede bajar el egg o el fuente desde el siguiente &lt;a href="https://arshaw.com/scrapemark/download/"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para el caso del &lt;code&gt;egg&lt;/code&gt; se ejecuta:
```python&lt;/p&gt;
&lt;h1 id="easy_install scrapemark-0.9-py2.7.egg"&gt;easy_install scrapemark-0.9-py2.7.egg&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Para el caso del fuente se descomprime el archivo .tar.gz :&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="tar -xvf scrapemark-0.9.tar.gz"&gt;tar -xvf scrapemark-0.9.tar.gz&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Luego se cambia al directorio y se ejecuta la instalaci&amp;oacute;n por medio del `setup.py`:&lt;/code&gt;python&lt;/p&gt;
&lt;h1 id="cd scrapemark-0.9/"&gt;cd scrapemark-0.9/&lt;/h1&gt;
&lt;h1 id="python setup.py install"&gt;python setup.py install&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;En el siguiente &lt;a href="https://arshaw.com/scrapemark/"&gt;enlace&lt;/a&gt; se muestra un ejemplo de como se usa, para m&amp;aacute;s ejemplos puede visitar este &lt;a href="https://arshaw.com/scrapemark/docs/examples/"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este &lt;a href="http://blog.crespo.org.ve/2013/10/webscraping-o-extraccion-de-datos-de.html"&gt;art&amp;iacute;culo&lt;/a&gt; se explica como buscar la informaci&amp;oacute;n que se necesita extraer de la p&amp;aacute;gina antes &lt;a href="www.timeanddate.com/worldclock/astronomy.html?n=58"&gt;mencionada&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La idea es extraer las hora de salida y ocultamiento del sol para Venezuela.
A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa sys para pasar como argumento al programa"&gt;Se importa sys para pasar como argumento al programa&lt;/h1&gt;
&lt;h1 id="el url del sitio timeanddate"&gt;el url del sitio timeanddate&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="se importa pprint para mostrar la informacion en la"&gt;Se importa pprint para mostrar la informacion en la&lt;/h1&gt;
&lt;h1 id="consola"&gt;consola&lt;/h1&gt;
&lt;p&gt;from pprint import pprint&lt;/p&gt;
&lt;h1 id="se importa scrape"&gt;se importa scrape&lt;/h1&gt;
&lt;p&gt;from scrapemark import scrape&lt;/p&gt;
&lt;h1 id="se ejecuta scrape pasando el tag html de la tabla"&gt;se ejecuta scrape pasando el tag  html de la tabla&lt;/h1&gt;
&lt;h1 id="donde se encuentra la fila de la informacion de la salida"&gt;donde se encuentra la fila de la informacion de la salida&lt;/h1&gt;
&lt;h1 id="y ocultamiento del sol."&gt;y ocultamiento del sol.&lt;/h1&gt;
&lt;h1 id="se le pasa como argumento en la linea de comandos"&gt;se le pasa como argumento en la linea de comandos&lt;/h1&gt;
&lt;h1 id="el url de timeanddate."&gt;el url de timeanddate.&lt;/h1&gt;
&lt;p&gt;resultado = scrape("""&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table class="spad"&amp;gt;


 &amp;lt;tbody&amp;gt;


  {*


   &amp;lt;tr&amp;gt;


      &amp;lt;td&amp;gt;{{[].day}}&amp;lt;/td&amp;gt;


      &amp;lt;td&amp;gt;{{[].sunrise}}&amp;lt;/td&amp;gt;


      &amp;lt;td&amp;gt;{{[].sunset}}&amp;lt;/td&amp;gt;


  {# ... #}


 &amp;lt;/tr&amp;gt;


 *}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;""",url=sys.argv[1] )&lt;/p&gt;
&lt;h1 id="se muestra el resultado en pantalla"&gt;Se muestra el resultado en pantalla&lt;/h1&gt;
&lt;p&gt;pprint (resultado)
&lt;code&gt;El resultado de la ejecuci&amp;oacute;n del script es el siguiente:&lt;/code&gt;python
ernesto@grievous:~$ python ej5.py http://www.timeanddate.com/worldclock/astronomy.html?n=58&lt;/p&gt;
&lt;p&gt;fetching http://www.timeanddate.com/worldclock/astronomy.html?n=58 ...&lt;/p&gt;
&lt;p&gt;DONE fetching.&lt;/p&gt;
&lt;p&gt;[{'day': u'24 Oct 2013', 'sunrise': u'05:47', 'sunset': u'17:36'},&lt;/p&gt;
&lt;p&gt;{'day': u'25 Oct 2013', 'sunrise': u'05:47', 'sunset': u'17:36'},&lt;/p&gt;
&lt;p&gt;{'day': u'26 Oct 2013', 'sunrise': u'05:48', 'sunset': u'17:35'},&lt;/p&gt;
&lt;p&gt;{'day': u'27 Oct 2013', 'sunrise': u'05:48', 'sunset': u'17:35'},&lt;/p&gt;
&lt;p&gt;{'day': u'28 Oct 2013', 'sunrise': u'05:48', 'sunset': u'17:35'},&lt;/p&gt;
&lt;p&gt;{'day': u'29 Oct 2013', 'sunrise': u'05:48', 'sunset': u'17:34'},&lt;/p&gt;
&lt;p&gt;{'day': u'30 Oct 2013', 'sunrise': u'05:48', 'sunset': u'17:34'}]
```&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="webscraping"></category><category term="Scrapermark"></category></entry><entry><title>Extracción de datos en páginas web con Webscraping y Python</title><link href="https://ecrespo.github.io/extraccion-de-datos-en-paginas-web-con-webscraping-y-python.html" rel="alternate"></link><published>2013-10-25T09:00:00-05:30</published><updated>2013-10-25T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-25:/extraccion-de-datos-en-paginas-web-con-webscraping-y-python.html</id><summary type="html">&lt;p&gt;Continuando con la extracci&amp;oacute;n de datos en la p&amp;aacute;gina timeanddate, la informaci&amp;oacute;n de amanecer y atardecer en Venezuela.
En este caso se usar&amp;aacute; la librer&amp;iacute;a webscraping. Para su instalaci&amp;oacute;n se usa el comando &lt;code&gt;pip&lt;/code&gt;:
```&lt;/p&gt;
&lt;h1 id="pip install webscraping"&gt;pip install webscraping&lt;/h1&gt;
&lt;p&gt;```
En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/webscraping-o-extraccion-de-datos-de-paginas-web-con-beautifulsoup4-y-python.html#webscraping-o-extraccion-de-datos-de-paginas-web-con-beautifulsoup4-y-python"&gt;anterior&lt;/a&gt; se muestra como se ubica la informaci&amp;oacute;n que se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con la extracci&amp;oacute;n de datos en la p&amp;aacute;gina timeanddate, la informaci&amp;oacute;n de amanecer y atardecer en Venezuela.
En este caso se usar&amp;aacute; la librer&amp;iacute;a webscraping. Para su instalaci&amp;oacute;n se usa el comando &lt;code&gt;pip&lt;/code&gt;:
```&lt;/p&gt;
&lt;h1 id="pip install webscraping"&gt;pip install webscraping&lt;/h1&gt;
&lt;p&gt;```
En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/webscraping-o-extraccion-de-datos-de-paginas-web-con-beautifulsoup4-y-python.html#webscraping-o-extraccion-de-datos-de-paginas-web-con-beautifulsoup4-y-python"&gt;anterior&lt;/a&gt; se muestra como se ubica la informaci&amp;oacute;n que se requiere.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="de webscraping se importa download y xpath"&gt;De webscraping se importa download y xpath&lt;/h1&gt;
&lt;p&gt;from webscraping import download, xpath&lt;/p&gt;
&lt;h1 id="se define la instancia download"&gt;Se define la instancia Download&lt;/h1&gt;
&lt;p&gt;D = download.Download()&lt;/p&gt;
&lt;h1 id="se obtiene la informacion de la salida y ocultamiento del"&gt;Se obtiene la informacion de la salida y ocultamiento del&lt;/h1&gt;
&lt;h1 id="sol en venezuela desde la pagina timeanddate."&gt;sol en Venezuela desde la pagina timeanddate.&lt;/h1&gt;
&lt;p&gt;html = D.get('http://www.timeanddate.com/worldclock/astronomy.html?n=58')&lt;/p&gt;
&lt;h1 id="se busca la informacion en la tabla donde se muestra."&gt;Se busca la informacion en la tabla donde se muestra.&lt;/h1&gt;
&lt;p&gt;for row in xpath.search(html, '//table[@class="spad"]/tbody/tr'):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se busca en la fila el tag /td


cols = xpath.search(row, '/td')


#Se muestra la informacion en pantalla


print 'Amanecer: %s, Atardecer: %s' % (cols[1], cols[2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el resultado de la ejecuci&amp;oacute;n del script:
```
Amanecer: 05:47, Atardecer: 17:36&lt;/p&gt;
&lt;p&gt;Amanecer: 05:47, Atardecer: 17:36&lt;/p&gt;
&lt;p&gt;Amanecer: 05:47, Atardecer: 17:36&lt;/p&gt;
&lt;p&gt;Amanecer: 05:48, Atardecer: 17:35&lt;/p&gt;
&lt;p&gt;Amanecer: 05:48, Atardecer: 17:35&lt;/p&gt;
&lt;p&gt;Amanecer: 05:48, Atardecer: 17:35&lt;/p&gt;
&lt;p&gt;Amanecer: 05:48, Atardecer: 17:34
```&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Webscraping"></category></entry><entry><title>Webscraping o extracción de datos de páginas web con BeautifulSoup4 y Python</title><link href="https://ecrespo.github.io/webscraping-o-extraccion-de-datos-de-paginas-web-con-beautifulsoup4-y-python.html" rel="alternate"></link><published>2013-10-24T09:00:00-05:30</published><updated>2013-10-24T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-24:/webscraping-o-extraccion-de-datos-de-paginas-web-con-beautifulsoup4-y-python.html</id><summary type="html">&lt;p&gt;El &lt;code&gt;webscraping&lt;/code&gt; es una t&amp;eacute;cnica utilizada para extraer datos de una p&amp;aacute;gina web por medio de herramientas (m&amp;aacute;s informaci&amp;oacute;n en &lt;a href="https://es.wikipedia.org/wiki/Web_scraping"&gt;wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Para Python existen varias herramientas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;urllib&lt;/code&gt; y &lt;code&gt;urlopen&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Beautiful Soup 4&lt;/code&gt; (&lt;a href="https://www.seraph.to/una-introduccion-a-beautiful-soup-4-en-python.html#una-introduccion-a-beautiful-soup-4-en-python"&gt;introducci&amp;oacute;n en art&amp;iacute;culo anterior&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python Mechanize&lt;/code&gt; (&lt;a href="https://www.seraph.to/emulando-la-navegacion-en-python-con-mechanize-parte-1.html"&gt;un art&amp;iacute;culo inicial&lt;/a&gt; y espero publicar algunos m&amp;aacute;s).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Selenium&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyquery&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scrapemark …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;El &lt;code&gt;webscraping&lt;/code&gt; es una t&amp;eacute;cnica utilizada para extraer datos de una p&amp;aacute;gina web por medio de herramientas (m&amp;aacute;s informaci&amp;oacute;n en &lt;a href="https://es.wikipedia.org/wiki/Web_scraping"&gt;wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Para Python existen varias herramientas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;urllib&lt;/code&gt; y &lt;code&gt;urlopen&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Beautiful Soup 4&lt;/code&gt; (&lt;a href="https://www.seraph.to/una-introduccion-a-beautiful-soup-4-en-python.html#una-introduccion-a-beautiful-soup-4-en-python"&gt;introducci&amp;oacute;n en art&amp;iacute;culo anterior&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python Mechanize&lt;/code&gt; (&lt;a href="https://www.seraph.to/emulando-la-navegacion-en-python-con-mechanize-parte-1.html"&gt;un art&amp;iacute;culo inicial&lt;/a&gt; y espero publicar algunos m&amp;aacute;s).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Selenium&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyquery&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scrapemark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Webscraping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScraperWiki&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En otros art&amp;iacute;culos se explicar&amp;aacute; el uso de cada herramienta mencionada. Ahora toca mostrar otro par de ejemplos de &lt;code&gt;BeautifulSoup4&lt;/code&gt;.
El primer ejemplo captura la fecha y hora de la salida del sol para Venezuela del sitio timeanddate.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra una imagen de la p&amp;aacute;gina timeanddate de la salida del sol en Venezuela.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/webscrapingoextracciondedatosdepaginaswebconbeautifulsoup4ypython-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la p&amp;aacute;gina timeanddate donde se va a inspeccionar el elemento de la fila mostrada en la imagen anterior:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/webscrapingoextracciondedatosdepaginaswebconbeautifulsoup4ypython-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Luego se muestra la imagen el c&amp;oacute;digo html de la fila mostrada en la imagen anterior:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/webscrapingoextracciondedatosdepaginaswebconbeautifulsoup4ypython-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar urllib2 y beautifulsoup"&gt;Importar urllib2 y BeautifulSoup&lt;/h1&gt;
&lt;p&gt;import urllib2&lt;/p&gt;
&lt;p&gt;from BeautifulSoup import BeautifulSoup&lt;/p&gt;
&lt;h1 id="se crea la instancia y se abre el url de timeanddate"&gt;Se crea la instancia y se abre el url de timeanddate&lt;/h1&gt;
&lt;h1 id="buscando la informacion de la hora de salir el sol en venezuela"&gt;buscando la informacion de la hora de salir el sol en Venezuela&lt;/h1&gt;
&lt;p&gt;soup = BeautifulSoup(urllib2.urlopen('http://www.timeanddate.com/worldclock/astronomy.html?n=58').read())&lt;/p&gt;
&lt;h1 id="se busca la palabra table, y de ahi class y se busca el contenido"&gt;Se busca la palabra table, y de ahi class y se busca el contenido&lt;/h1&gt;
&lt;h1 id="de cada columna de la tabla."&gt;de cada columna de la tabla.&lt;/h1&gt;
&lt;p&gt;for row in soup('table', {'class': 'spad'})[0].tbody('tr'):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tds = row('td')


#Se muestra la fecha y hora de la salida del sol


print tds[0].string, tds[1].string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El resultado de la ejecuci&amp;oacute;n es la siguiente:
```
23 Oct 2013 05:47&lt;/p&gt;
&lt;p&gt;24 Oct 2013 05:47&lt;/p&gt;
&lt;p&gt;25 Oct 2013 05:47&lt;/p&gt;
&lt;p&gt;26 Oct 2013 05:48&lt;/p&gt;
&lt;p&gt;27 Oct 2013 05:48&lt;/p&gt;
&lt;p&gt;28 Oct 2013 05:48&lt;/p&gt;
&lt;p&gt;29 Oct 2013 05:48
```&lt;/p&gt;
&lt;p&gt;El otro ejemplo es un c&amp;oacute;digo m&amp;aacute;s ordenado de como extraer los enlaces de una p&amp;aacute;gina web.
En este caso se pedir&amp;aacute; desde la l&amp;iacute;nea de comandos el url del sitio que se desea extraer los urls, en vez de usar &lt;code&gt;urllib2&lt;/code&gt; se usar&amp;aacute; con &lt;code&gt;beautifulsoup4&lt;/code&gt; la librer&amp;iacute;a &lt;code&gt;request&lt;/code&gt;.
A continuaci&amp;oacute;n el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa beautifulsoup"&gt;Se importa BeautifulSoup&lt;/h1&gt;
&lt;p&gt;from bs4 import BeautifulSoup&lt;/p&gt;
&lt;h1 id="se importa requests"&gt;Se importa requests&lt;/h1&gt;
&lt;p&gt;import requests&lt;/p&gt;
&lt;h1 id="se crea la clase extraer"&gt;Se crea la clase Extraer&lt;/h1&gt;
&lt;p&gt;class Extraer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self,url):

    #Se asocia el url a self.__url

    self.__url = url

#Se crea el m&amp;eacute;todo Enlaces, donde se crea una lista vac&amp;iacute;a

#donde se lee el url con requests.get y se busca el tag a

#luego se agrega a la lista cada link donde aparece el texo href
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#Se retorna la lista&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def Enlaces(self):

    self.__enlaces = []

    for link in BeautifulSoup(requests.get("http://" +url).text).find_all('a'):

        self.__enlaces.append((link.get('href')))

    return self.__enlaces
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta este script"&gt;Se ejecuta este script&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;h1 id="se pide el url desde la linea de comandos"&gt;Se pide el url desde la l&amp;iacute;nea de comandos&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;url = raw_input("Escriba el url del sitio que desea extraer informacion: ")
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se crea la instancia de la clase donde se le pasa el url"&gt;Se crea la instancia de la clase donde se le pasa el url&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;ws = Extraer(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se muestra el texto enlaces"&gt;Se muestra el texto Enlaces&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;print "Enlaces: "
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se muestra cada enlace extraido"&gt;Se muestra cada enlace extra&amp;iacute;do&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;for enlace in  ws.Enlaces():

print enlace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;El resultado se muestra a continuaci&amp;oacute;n:&lt;/code&gt;python
ernesto@grievous:~/bin/python/webscraping$ python ej1.py &lt;/p&gt;
&lt;p&gt;Escriba el url del sitio que desea extraer informacion: 127.0.0.1:8000&lt;/p&gt;
&lt;p&gt;Enlaces: &lt;/p&gt;
&lt;p&gt;/&lt;/p&gt;
&lt;p&gt;/radios/pagina/1/&lt;/p&gt;
&lt;p&gt;/acerca/&lt;/p&gt;
&lt;p&gt;/login/
```&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="webscraping"></category><category term="Beautiful Soup"></category></entry><entry><title>Una introducción a Beautiful Soup 4 en Python.</title><link href="https://ecrespo.github.io/una-introduccion-a-beautiful-soup-4-en-python.html" rel="alternate"></link><published>2013-10-23T09:00:00-05:30</published><updated>2013-10-23T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-23:/una-introduccion-a-beautiful-soup-4-en-python.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Beautiful Soup&lt;/code&gt; es una librer&amp;iacute;a de Python que facilita la extracci&amp;oacute;n de datos de archivos html y xml.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo de &lt;a href="www.pythonforbeginners.com/python-on-the-web/beautifulsoup-4-python/"&gt;Python For Beginners&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n oficial se puede leer en el siguiente &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalar &lt;code&gt;beautifulsoup&lt;/code&gt; es necesario tener instalado la librer&amp;iacute;a &lt;code&gt;python-bs4&lt;/code&gt; el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Beautiful Soup&lt;/code&gt; es una librer&amp;iacute;a de Python que facilita la extracci&amp;oacute;n de datos de archivos html y xml.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo de &lt;a href="www.pythonforbeginners.com/python-on-the-web/beautifulsoup-4-python/"&gt;Python For Beginners&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n oficial se puede leer en el siguiente &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalar &lt;code&gt;beautifulsoup&lt;/code&gt; es necesario tener instalado la librer&amp;iacute;a &lt;code&gt;python-bs4&lt;/code&gt; el cual es un parser html.
```&lt;/p&gt;
&lt;h1 id="apt-get install python-bs4"&gt;apt-get install python-bs4&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Luego se instala `beautiful soup 4`:&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="pip install beautifulsoup4"&gt;pip install beautifulsoup4&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;``
Para utilizar&lt;/code&gt;beautifulsoup&lt;code&gt;se le puede pasar un archivo html o un URL, pero para capturar el archivo html se tiene que usar&lt;/code&gt;urllib2&lt;code&gt;,&lt;/code&gt;beautifulsoup` no lo hace s&amp;oacute;lo.&lt;/p&gt;
&lt;p&gt;El API tiene varias formas de realizar filtros para la busqueda:
1. Busqueda por string, se usa la funci&amp;oacute;nn &lt;code&gt;find_all&lt;/code&gt;:
&lt;code&gt;python
soup.find_all("Prueba)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;De esta forma se busca todas las palabras Prueba en el archivo.
2. Expresi&amp;oacute;n regular:
El siguiente c&amp;oacute;digo muestra todos los tags html que comiencen con la letra b.
```python
import re&lt;/p&gt;
&lt;p&gt;for tag in soup.find_all(re.compile("^b")):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(tag.name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;El siguiente c&amp;oacute;digo muestra todos los tags html que contenga la letra b:&lt;/code&gt;python
import re&lt;/p&gt;
&lt;p&gt;for tag in soup.find_all(re.compile("b")):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(tag.name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Una lista.
Al pasar una lista &lt;code&gt;beautifulsoup&lt;/code&gt; encontrar&amp;aacute; cualquier elemento de la lista.
El siguiente c&amp;oacute;digo muestra como se encuentra todas las a y todas las b que aparezca:
&lt;code&gt;python
print soup.find_all(["a","b"])&lt;/code&gt;
Para demostrar el uso de &lt;code&gt;beautifulsoup&lt;/code&gt; se utilizar&amp;aacute; una aplicaci&amp;oacute;n en django que maneja un registro de radios por internet para la aplicaci&amp;oacute;n radiotray de Linux.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A continuaci&amp;oacute;n una captura de pantalla:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/unaintroduccionabeautifulsoup4enpython-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de ejemplo es el siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;from bs4 import BeautifulSoup&lt;/p&gt;
&lt;p&gt;import urllib2&lt;/p&gt;
&lt;h1 id="se crea la instancia de bs pasando la url con urllib2."&gt;Se crea la instancia de BS pasando la URL con urllib2.&lt;/h1&gt;
&lt;p&gt;soup = BeautifulSoup(urllib2.urlopen("http://127.0.0.1:8000").read())&lt;/p&gt;
&lt;p&gt;print "--------------------"&lt;/p&gt;
&lt;h1 id="se muestra todo el contenido de la pagina"&gt;Se muestra todo el contenido de la pagina&lt;/h1&gt;
&lt;p&gt;print soup.prettify()&lt;/p&gt;
&lt;p&gt;print "---------------------"&lt;/p&gt;
&lt;h1 id="se muestra el titulo de la pagina"&gt;Se muestra el titulo de la pagina&lt;/h1&gt;
&lt;p&gt;print "Titulo" ,soup.title.string&lt;/p&gt;
&lt;p&gt;print "----------------------"&lt;/p&gt;
&lt;h1 id="se muestra el tag p de html que contiene la pagina"&gt;Se muestra el tag p de html que contiene la pagina&lt;/h1&gt;
&lt;p&gt;print soup.p&lt;/p&gt;
&lt;p&gt;print "----------------------"&lt;/p&gt;
&lt;h1 id="se muestra el tag a de html que contiene la pagina"&gt;Se muestra el tag a de html que contiene la pagina&lt;/h1&gt;
&lt;p&gt;print soup.a
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra una imagen con el resultado del programa:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/unaintroduccionabeautifulsoup4enpython-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Para extraer URLs de la p&amp;aacute;gina se busca el tag html a, luego lo que contenga la palabra href:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;from bs4 import BeautifulSoup&lt;/p&gt;
&lt;p&gt;import urllib2&lt;/p&gt;
&lt;h1 id="se crea la instancia de bs pasando la url con urllib2._1"&gt;Se crea la instancia de BS pasando la URL con urllib2.&lt;/h1&gt;
&lt;p&gt;soup = BeautifulSoup(urllib2.urlopen("http://127.0.0.1:8000").read())&lt;/p&gt;
&lt;p&gt;print "--------------------"&lt;/p&gt;
&lt;h1 id="para extraer url de la pagina."&gt;Para extraer url de la pagina.&lt;/h1&gt;
&lt;p&gt;for link in soup.find_all('a'):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(link.get('href'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;El resultado se muestra a continuaci&amp;oacute;n:&lt;/code&gt;python&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;/
/radios/pagina/1/
/acerca/
/login/
```&lt;/p&gt;
&lt;p&gt;Para extraer todo el texto de la p&amp;aacute;gina:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_2"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;from bs4 import BeautifulSoup&lt;/p&gt;
&lt;p&gt;import urllib2&lt;/p&gt;
&lt;h1 id="se crea la instancia de bs pasando la url con urllib2._2"&gt;Se crea la instancia de BS pasando la URL con urllib2.&lt;/h1&gt;
&lt;p&gt;soup = BeautifulSoup(urllib2.urlopen("http://127.0.0.1:8000").read())&lt;/p&gt;
&lt;p&gt;print "--------------------"&lt;/p&gt;
&lt;h1 id="para extraer todo el texto de la pagina."&gt;Para extraer todo el texto de la pagina.&lt;/h1&gt;
&lt;p&gt;print(soup.get_text())
&lt;code&gt;El resultado se muestra a continuaci&amp;oacute;n:&lt;/code&gt;python
....
 Bienvenido 
/span
Radio
                L
/.well 
Nuevas radios
/.well 
/span
/row
&amp;copy; Registro Radiotray 2013&lt;br/&gt;
/.fluid-container
 Le javascript
    ================================================== 
 Placed at the end of the document so the pages load faster
```&lt;/p&gt;
&lt;p&gt;Esta es la base para realizar &lt;a href="es.wikipedia.org/wiki/Web_scraping"&gt;webscraping&lt;/a&gt; que se explicar&amp;aacute; en el siguiente art&amp;iacute;culo.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Beautiful Soup"></category><category term="webscraping"></category></entry><entry><title>Obtener información de metadatos EXIF de una imagen con Python</title><link href="https://ecrespo.github.io/obtener-informacion-de-metadatos-exif-de-una-imagen-con-python.html" rel="alternate"></link><published>2013-10-14T09:00:00-05:30</published><updated>2013-10-14T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-10-14:/obtener-informacion-de-metadatos-exif-de-una-imagen-con-python.html</id><summary type="html">&lt;p&gt;Se probar&amp;aacute; con un simple script como obtener metadatos EXIF de dos im&amp;aacute;genes, son dos fotos, la primera directamente del dispositivo m&amp;oacute;vil con que se tom&amp;oacute; la foto, la segunda imagen se baj&amp;oacute; desde Google+.&lt;/p&gt;
&lt;p&gt;La idea es notar la diferencia de informaci&amp;oacute;n que se obtiene de los metadatos de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se probar&amp;aacute; con un simple script como obtener metadatos EXIF de dos im&amp;aacute;genes, son dos fotos, la primera directamente del dispositivo m&amp;oacute;vil con que se tom&amp;oacute; la foto, la segunda imagen se baj&amp;oacute; desde Google+.&lt;/p&gt;
&lt;p&gt;La idea es notar la diferencia de informaci&amp;oacute;n que se obtiene de los metadatos de dos fotos id&amp;eacute;nticas para obtenidas de dos formas diferentes.&lt;/p&gt;
&lt;p&gt;Lo primero que se tiene que hacer es instalar el m&amp;oacute;dulo python llamado &lt;code&gt;pyexiv2&lt;/code&gt;. Su documentaci&amp;oacute;n la pueden encontrar &lt;a href="tilloy.net/dev/pyexiv2/index.html"&gt;aqu&amp;iacute;&lt;/a&gt;.
Se puede instalar en Debian wheezy de la siguiente forma:
```&lt;/p&gt;
&lt;h1 id="apt-get install python-pyexiv2 python-pyexiv2-doc"&gt;apt-get install python-pyexiv2 python-pyexiv2-doc&lt;/h1&gt;
&lt;p&gt;```
La imagen original fue tomada desde un celular Motorola Razr XT910 y la segunda imagen se bajo desde Google+.
Imagen original con md5:
md5sum ecrespo-orig.jpg
a74977dbbd40d228658435b03db9a4c3  ecrespo-orig.jpg&lt;/p&gt;
&lt;p&gt;El tama&amp;ntilde;o de la imagen es de 248k:
du  ecrespo-orig.jpg
248 ecrespo-orig.jpg&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/obtenerinformaciondemetadatosexifdeunaimagenconpython-1.jpg"/&gt; 
ecrespo-orig.jpg&lt;/p&gt;
&lt;p&gt;Imagen bajada de Google+ con md5:
md5sum ecrespo.jpg
d1d41f5865bbb8360e6a748e38ae5ee1  ecrespo.jpg
El tama&amp;ntilde;o de la imagen es de 32k:
du ecrespo.jpg
32  ecrespo.jpg&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/obtenerinformaciondemetadatosexifdeunaimagenconpython-2.jpg"/&gt; &lt;/p&gt;
&lt;p&gt;ecrespo.jpg&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo que muestra los metadatos de exif de cada imagen es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa el modulo para analisis de metadatos de exif"&gt;Se importa el modulo para analisis de metadatos de exif&lt;/h1&gt;
&lt;p&gt;import pyexiv2&lt;/p&gt;
&lt;h1 id="se crea una funcion que devuelve en pantalla la informacion exif"&gt;Se crea una funcion que devuelve en pantalla la informacion exif&lt;/h1&gt;
&lt;p&gt;def Meta(archivo):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea la instancia metadata al pasarle el archivo que se quiere analizar

metadata = pyexiv2.ImageMetadata(archivo)

#Se lee el metadato

metadata.read()

#Se muestra en pantalla un mensaje

print "Se muestra la informacion exif del archivo %s" %archivo

print  "---------------------------------------------"

#Se despliega la informacion de metadatos exif que contiene la imagen

for metadato in metadata.exif_keys:

    texto = metadato + ": " + metadata[metadato].raw_value

    print texto
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Meta("ecrespo-orig.jpg")

print "********************************************"

Meta("ecrespo.jpg")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;La salida del script es la siguiente:&lt;/code&gt;python
Se muestra la informacion exif del archivo ecrespo-orig.jpg&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Exif.Image.YCbCrPositioning: 1&lt;/p&gt;
&lt;p&gt;Exif.Image.XResolution: 72/1&lt;/p&gt;
&lt;p&gt;Exif.Image.YResolution: 72/1&lt;/p&gt;
&lt;p&gt;Exif.Image.ResolutionUnit: 2&lt;/p&gt;
&lt;p&gt;Exif.Image.DateTime: 2013:09:08 13:10:00&lt;/p&gt;
&lt;p&gt;Exif.Image.Make: Motorola&lt;/p&gt;
&lt;p&gt;Exif.Image.Model: XT910&lt;/p&gt;
&lt;p&gt;Exif.Image.ExifTag: 449&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExifVersion: 48 50 50 48&lt;/p&gt;
&lt;p&gt;Exif.Photo.FlashpixVersion: 48 48 48 48&lt;/p&gt;
&lt;p&gt;Exif.Photo.ColorSpace: 1&lt;/p&gt;
&lt;p&gt;Exif.Photo.ComponentsConfiguration: 1 2 3 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.CompressedBitsPerPixel: 0/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExposureTime: 0/1000000&lt;/p&gt;
&lt;p&gt;Exif.Photo.FNumber: 24/10&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExposureProgram: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.ISOSpeedRatings: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.ShutterSpeedValue: 0/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.ApertureValue: 3/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.BrightnessValue: 0/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExposureBiasValue: 0/10&lt;/p&gt;
&lt;p&gt;Exif.Photo.MaxApertureValue: 3/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.SubjectDistance: 0/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.MeteringMode: 1&lt;/p&gt;
&lt;p&gt;Exif.Photo.LightSource: 3&lt;/p&gt;
&lt;p&gt;Exif.Photo.Flash: 24&lt;/p&gt;
&lt;p&gt;Exif.Photo.FocalLength: 460/100&lt;/p&gt;
&lt;p&gt;Exif.Photo.FlashEnergy: 0/1&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExposureIndex: 0/0&lt;/p&gt;
&lt;p&gt;Exif.Photo.SceneType: 1&lt;/p&gt;
&lt;p&gt;Exif.Photo.CustomRendered: 1&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExposureMode: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.WhiteBalance: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.DigitalZoomRatio: 65536/65535&lt;/p&gt;
&lt;p&gt;Exif.Photo.SceneCaptureType: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.GainControl: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.Contrast: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.Saturation: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.Sharpness: 0&lt;/p&gt;
&lt;p&gt;Exif.Photo.SubjectDistanceRange: 0&lt;/p&gt;
&lt;p&gt;Exif.Image.GPSTag: 1243&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.ImageWidth: 200&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.ImageLength: 120&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.Compression: 6&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.XResolution: 72/1&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.YResolution: 72/1&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.ResolutionUnit: 2&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.JPEGInterchangeFormat: 2027&lt;/p&gt;
&lt;p&gt;Exif.Thumbnail.JPEGInterchangeFormatLength: 8033&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Se muestra la informacion exif del archivo ecrespo.jpg&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Exif.Image.Software: Google&lt;/p&gt;
&lt;p&gt;Exif.Image.ExifTag: 46&lt;/p&gt;
&lt;p&gt;Exif.Photo.ExifVersion: 48 50 50 48&lt;/p&gt;
&lt;p&gt;Exif.Photo.0x9009: 10 39 8 1 16 1 24 0 32 0 40 0 48 0 56 0 64 0 72 1 80 0 88 0 96 1 104 1 112 0 120 1 128 1 1 136 1 1 144 1 1&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Como se puede observar la imagen original bajada del dispositivo con Android tiene m&amp;aacute;s informaci&amp;oacute;n de metadatos exif que la imagen bajada de Google+, la primera foto tiene informaci&amp;oacute;n del dispositivo, modelo entre otras cosas mientras que la segunda foto maneja informaci&amp;oacute;n del software que proceso la imagen que es de Google.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="exif"></category></entry><entry><title>Mostrar tweets en tiempo real con twython y el API Stream de Twitter</title><link href="https://ecrespo.github.io/mostrar-tweets-en-tiempo-real-con-twython-y-el-api-stream-de-twitter.html" rel="alternate"></link><published>2013-09-26T09:00:00-05:30</published><updated>2013-09-26T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-09-26:/mostrar-tweets-en-tiempo-real-con-twython-y-el-api-stream-de-twitter.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se usar&amp;aacute; el API Stream de twitter para ver el flujo de tweets que recibe el usuario o lo que se publica en general en twitter.&lt;/p&gt;
&lt;p&gt;La idea es usar &lt;code&gt;twython&lt;/code&gt; con la clase &lt;a href="https://twython.readthedocs.org/en/latest/usage/streaming_api.html"&gt;TwythonStreamer&lt;/a&gt; para acceder a la API stream de twitter.&lt;/p&gt;
&lt;p&gt;Del API de twitter …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se usar&amp;aacute; el API Stream de twitter para ver el flujo de tweets que recibe el usuario o lo que se publica en general en twitter.&lt;/p&gt;
&lt;p&gt;La idea es usar &lt;code&gt;twython&lt;/code&gt; con la clase &lt;a href="https://twython.readthedocs.org/en/latest/usage/streaming_api.html"&gt;TwythonStreamer&lt;/a&gt; para acceder a la API stream de twitter.&lt;/p&gt;
&lt;p&gt;Del API de twitter se mostrar&amp;aacute; &lt;a href="https://developer.twitter.com/docs/api/1.1/get/user"&gt;GET user&lt;/a&gt;  el cual muestra los mensajes en flujo de un s&amp;oacute;lo usuario.&lt;/p&gt;
&lt;p&gt;Tambi&amp;eacute;n se mostrar&amp;aacute; como usar &lt;a href="https://developer.twitter.com/docs/api/1.1/post/statuses/filter"&gt;POST status filter&lt;/a&gt;, el cual muestra todos los tweets p&amp;uacute;blicos que contengan una palabra (track).&lt;/p&gt;
&lt;p&gt;El primer ejemplo es con el &lt;code&gt;GET user&lt;/code&gt;, el c&amp;oacute;digo a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se define el token de la aplicacion"&gt;Se define el token de la aplicacion&lt;/h1&gt;
&lt;p&gt;CONSUMER_KEY = 'xxxxx'&lt;/p&gt;
&lt;p&gt;CONSUMER_SECRET = 'xxxxx'&lt;/p&gt;
&lt;h1 id="se define el acceso al usuario"&gt;Se define el acceso al usuario&lt;/h1&gt;
&lt;p&gt;ACCESS_KEY = 'xxxxx'&lt;/p&gt;
&lt;p&gt;ACCESS_SECRET = 'xxxxx'&lt;/p&gt;
&lt;h1 id="se importa twythonstreamer"&gt;Se importa TwythonStreamer&lt;/h1&gt;
&lt;p&gt;from twython import TwythonStreamer&lt;/p&gt;
&lt;h1 id="se crea la clase mistream que hereda de twythonstreamer"&gt;Se crea la clase MiStream que hereda de TwythonStreamer&lt;/h1&gt;
&lt;p&gt;class MiStream(TwythonStreamer):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea el metodo on_success que recibe data

def on_success(self, data):

    #Si la palabra 'text' se encuentra en data se muestra en pantalla

    #su contenido

    if 'text' in data:

        print data['text'].encode('utf-8')

        #Si se desea desconectar luego del primer resultado?

        #self.disconnect()

#Se crea el metodo on_error que recibe el codigo de estatus y data y se muestra en pantalla

def on_error(self, status_code, data):

    print status_code, data
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="requires authentication as of twitter api v1.1"&gt;Requires Authentication as of Twitter API v1.1&lt;/h1&gt;
&lt;h1 id="se crea la instancia de la clase mistream con los parametros de autenticacion del api v1.1 de twittter."&gt;Se crea la instancia de la clase MiStream con los parametros de autenticacion del API v1.1 de twittter.&lt;/h1&gt;
&lt;p&gt;stream = MiStreame(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)&lt;/p&gt;
&lt;h1 id="se recibe los tweets del usuario."&gt;Se recibe los tweets del usuario.&lt;/h1&gt;
&lt;p&gt;stream.user()
```
El resultado se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python
NASA puts papers from Curiosity rover behind paywall; @mbeisen points out this is illegal &amp;amp; shares them http://t.co/UB1jQfRpLR #openaccess&lt;/p&gt;
&lt;p&gt;ICYMI: Boost Mobile now offering Boost Warp 4G http://t.co/qvZKtZXqOn&lt;/p&gt;
&lt;p&gt;Empoderando a la ciudadan&amp;iacute;a para mejorar la educaci&amp;oacute;n en M&amp;eacute;xico http://t.co/GnTqhDWqzv&lt;/p&gt;
&lt;p&gt;BREAKING: Dodgers say man killed in altercation with Giants fans in SF was son of team security guard: http://t.co/CkB75Nkt0V&lt;/p&gt;
&lt;p&gt;RT @Anonymous_Prodi: Posible bomba nuclear de baja intensidad en Siria http://t.co/uSjjVI1T3A @Famelica_legion @AquiyAhora_2013 @wikinotici&amp;hellip;&lt;/p&gt;
&lt;p&gt;gu&amp;iacute;a de gobierno electr&amp;oacute;nico local: http://t.co/X6i7f8NHFe  servicios electr&amp;oacute;nicos orientados al ciudadano #eGov&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Felicidades tambi&amp;eacute;n a @jenniferpsayago por ser la ganadora de estos incre&amp;iacute;bles productos #Samsung y @Oakley_VE! http://t.co/ZfZnNtZtCf&lt;/p&gt;
&lt;h1 id="linux #fedora #art re: request to join the design team http://t.co/cuauncffpu"&gt;linux #fedora  #art  Re: Request to join the Design Team http://t.co/CuAuncfFPU&lt;/h1&gt;
&lt;p&gt;Del Gobierno Abierto como Pol&amp;iacute;tica y la Apertura de Datos como Programa P&amp;uacute;blico http://t.co/4fmZAHA8x6  #OpenData #OGov&lt;/p&gt;
&lt;h1 id="linux #fedora #art re: request to join the design team http://t.co/rihsmifvbq"&gt;linux #fedora  #art  Re: Request to join the Design Team http://t.co/RiHSMifvBQ&lt;/h1&gt;
&lt;p&gt;3D printer duplicates paintings down to the last brush stroke http://t.co/suC4T3P2Lr #3DPrinting #art&lt;/p&gt;
&lt;p&gt;Maduro: Mi ausencia en la ONU se debi&amp;oacute; a provocaciones que hab&amp;iacute;an en mi contra http://t.co/Ed1ufBiPCW&lt;/p&gt;
&lt;p&gt;Venezuela: Turismo &amp;ldquo;raspatarjetas&amp;rdquo; mat&amp;oacute; al turismo http://t.co/Rd18XiZYZu @kaosenlarednet mm&lt;/p&gt;
&lt;p&gt;Como las iniciativas de Datos Abiertos pueden mejorar la vida en las Ciudades? http://t.co/j8FJOUd5mk  #OpenData&lt;/p&gt;
&lt;p&gt;RT @csoghoian: Want to read the details of some NSA #LOVEINT surveillance abuses? Now you can, thanks to Senator @ChuckGrassley http://t.co&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;iquest;Me est&amp;aacute; diciendo usted q su teor&amp;iacute;a m&amp;aacute;gica es: no tener teor&amp;iacute;a? Creo que eso no es muy anarquista, ni l&amp;oacute;gico tampoco @fascaso @loadupyourgun&lt;/p&gt;
&lt;p&gt;Venezuela: Turismo &amp;ldquo;raspatarjetas&amp;rdquo; mat&amp;oacute; al turismo http://t.co/Rd18XiZYZu @kaosenlarednetmmmmm&lt;/p&gt;
&lt;p&gt;RT @C354R_B3RMUD3Z: Te interesa saber de #Soporte Tecnico en #Gnu/Linux? #inscribete, es totalmente #gratuito informate por 04243165766&lt;/p&gt;
&lt;p&gt;RT @csoghoian: Are you an NSA analyst? Suspect that your husband is cheating on you? Tap his phone, don't get prosecuted. Page 3 of http://&amp;hellip;&lt;/p&gt;
&lt;p&gt;Saturday Night Live lanza canal oficial de YouTube disponible para todo el mundo http://t.co/LDFcwFxsx0&lt;/p&gt;
&lt;p&gt;Microsoft donated $100k to IPython http://t.co/sU2UP07dJ8&lt;/p&gt;
&lt;p&gt;Crece el hurac&amp;aacute;n: exitosos Ni&amp;ntilde;os Cantores de diversas tendencias pol&amp;iacute;ticas nos dieron hoy p&amp;uacute;blicamente su apoyo http://t.co/SGDvxPrczA&lt;/p&gt;
&lt;p&gt;How is everyone? I feel like I've been away for years when it's only been a few days.
```&lt;/p&gt;
&lt;p&gt;Ahora se muestran todos los tweets p&amp;uacute;blicos que contengan la palabra python, esto se logra al  sustituir la &amp;uacute;ltima l&amp;iacute;nea del c&amp;oacute;digo anterior por &lt;code&gt;stream.statuses.filter&lt;/code&gt; pasando el argumento &lt;code&gt;track&lt;/code&gt; con la palabra a buscar:
&lt;code&gt;python
stream.statuses.filter(track='python')&lt;/code&gt;
El resultado se muestra a continuaci&amp;oacute;n:
```python
lunes que viene #PUG  con pizza, cerveza, #python en @Dlabs_co . Yo no me la perder&amp;iacute;a...&lt;/p&gt;
&lt;p&gt;Monty Python - The man who is alternately rude and polite: :#NowPlaying.#ClassicComedies..#ComedyGreats ,,,#Comedy.  http://t.co/IO3juw6nfD&lt;/p&gt;
&lt;p&gt;Like a Kungfu master, a Pythonista knows how to kill with a single finger, and never to actually do it. http://t.co/xx0Sb8SsWV&lt;/p&gt;
&lt;p&gt;RT @jpcolino: Python + Hadoop: Real Python in Pig trunk http://t.co/i4NZXrofvq&lt;/p&gt;
&lt;p&gt;Affiliate Freelancer, Freelancing September 26, 2013 at 04:51PM Python web front end development by vishalchavda... http://t.co/V45nPv3LVI&lt;/p&gt;
&lt;p&gt;Compressed 4h of Python, Win32 dbg API and Intel PIN in 2h. Still people seemed to like it. I guess a lot of people are into BSDM at @brucon&lt;/p&gt;
&lt;p&gt;Go vs. Python: 10% longer, 10 times faster. http://t.co/v640YolHW4 and concurrent, statically compiled, and the libraries are all modern.&lt;/p&gt;
&lt;p&gt;Quantitative Economics | #python #ebook http://t.co/eVjlO9VBoE&lt;/p&gt;
&lt;p&gt;@MikeKellyofEM Hopefully a Monty Python style parrot...&lt;/p&gt;
&lt;p&gt;por um tutorial de como aprender python em um dia&lt;/p&gt;
&lt;p&gt;@tommyd_95 this could descend into a scene from a Monty Python movie ))
```&lt;/p&gt;
&lt;p&gt;De esta forma se puede mejorar la captura de tweets en tiempo real  del timeline de un usuario o de todos los tweets p&amp;uacute;blicos. &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Twitter"></category><category term="Ubuntu"></category></entry><entry><title>Probando la librería twython para twitter</title><link href="https://ecrespo.github.io/probando-la-libreria-twython-para-twitter.html" rel="alternate"></link><published>2013-09-22T10:00:00-05:30</published><updated>2013-09-22T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-09-22:/probando-la-libreria-twython-para-twitter.html</id><summary type="html">&lt;p&gt;Retomando los &lt;a href="https://www.seraph.to/tag/twitter.html"&gt;art&amp;iacute;culos sobre librer&amp;iacute;as de python para acceder a twitter&lt;/a&gt;, en el &amp;uacute;ltimo art&amp;iacute;culo explique como &lt;a href="http://blog.crespo.org.ve/2013/04/descubriendo-trending-topics-de-twitter.html"&gt;descubrir trending topic con la librer&amp;iacute;a python-twitter&lt;/a&gt;, ahora le toca el turno a twython.
La p&amp;aacute;gina del proyecto se encuentra en &lt;a href="https://github.com/ryanmcgrath/twython"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Twython soporta lo siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Busqueda para:&lt;ul&gt;
&lt;li&gt;Informaci&amp;oacute;n de usuario.&lt;/li&gt;
&lt;li&gt;Lista de …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Retomando los &lt;a href="https://www.seraph.to/tag/twitter.html"&gt;art&amp;iacute;culos sobre librer&amp;iacute;as de python para acceder a twitter&lt;/a&gt;, en el &amp;uacute;ltimo art&amp;iacute;culo explique como &lt;a href="http://blog.crespo.org.ve/2013/04/descubriendo-trending-topics-de-twitter.html"&gt;descubrir trending topic con la librer&amp;iacute;a python-twitter&lt;/a&gt;, ahora le toca el turno a twython.
La p&amp;aacute;gina del proyecto se encuentra en &lt;a href="https://github.com/ryanmcgrath/twython"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Twython soporta lo siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Busqueda para:&lt;ul&gt;
&lt;li&gt;Informaci&amp;oacute;n de usuario.&lt;/li&gt;
&lt;li&gt;Lista de twitter.&lt;/li&gt;
&lt;li&gt;L&amp;iacute;neas de tiempo (timeline).&lt;/li&gt;
&lt;li&gt;Mensajes directos (DM).&lt;/li&gt;
&lt;li&gt;Cualquier cosa que se encuentre en la documentaci&amp;oacute;n del API de twitter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actualizaci&amp;oacute;n de imagen:&lt;ul&gt;
&lt;li&gt;Actualizaci&amp;oacute;n de un estatus de un usuario con una imagen.&lt;/li&gt;
&lt;li&gt;Cambiar el avatar de un usuario.&lt;/li&gt;
&lt;li&gt;Cambiar imagen de fondo.&lt;/li&gt;
&lt;li&gt;Cambiar banner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Soporte de s&amp;oacute;lo lectura para OAuth2&lt;/li&gt;
&lt;li&gt;Soporte para el API de stream de twitter.&lt;/li&gt;
&lt;li&gt;Soporte para Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para m&amp;aacute;s informaci&amp;oacute;n sobre la documentaci&amp;oacute;n la pueden visitar en el siguiente &lt;a href="https://twython.readthedocs.org/en/latest/index.html"&gt;enlace&lt;/a&gt;.
Para manejar la autenticaci&amp;oacute;n de la aplicaci&amp;oacute;n y del c&amp;oacute;digo pueden revisar el art&amp;iacute;culo de Efrain Valles, &lt;a href="https://effiejayx.wordpress.com/2010/10/25/jugando-con-las-apis-de-twitter-y-python/"&gt;jugando con las APis de twitter y python&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Para instalar twython se usa &lt;code&gt;pip&lt;/code&gt; o &lt;code&gt;easy_install&lt;/code&gt; como root desde la l&amp;iacute;nea de comandos:
&lt;code&gt;root@grievous:~# pip install twython&lt;/code&gt;
Lo primero que se va a hacer es env&amp;iacute;ar un tweet con una imagen y luego s&amp;oacute;lo texto, la implementaci&amp;oacute;n usa un proxy para enviar los tweets, luego se muestra en pantalla el timeline del usuario y por &amp;uacute;ltimo el resultado de la busqueda de la palabra python.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se define el token de la aplicacion"&gt;Se define el token de la aplicacion&lt;/h1&gt;
&lt;p&gt;CONSUMER_KEY = 'xxxxx'&lt;/p&gt;
&lt;p&gt;CONSUMER_SECRET = 'xxxxx'&lt;/p&gt;
&lt;h1 id="se define el acceso al usuario"&gt;Se define el acceso al usuario&lt;/h1&gt;
&lt;p&gt;ACCESS_KEY = 'xxxxx'&lt;/p&gt;
&lt;p&gt;ACCESS_SECRET = 'xxxxx'&lt;/p&gt;
&lt;h1 id="se importa twython y de time a sleep"&gt;Se importa twython y de time a  sleep&lt;/h1&gt;
&lt;p&gt;from twython import Twython&lt;/p&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="se define los argumentos del cliente, la ip y puerto del proxy, el tiempo de intento de la conexion y el nombre de la"&gt;Se define los argumentos del cliente, la ip y puerto del proxy, el tiempo de intento de la conexion y el nombre de la&lt;/h1&gt;
&lt;h1 id="aplicacion cliente"&gt;aplicacion cliente&lt;/h1&gt;
&lt;p&gt;client_args = {'headers': {'User-Agent': 'cmdtweetpy'},'proxies': {'http': '127.0.0.1:xxxx'},'timeout': 300}&lt;/p&gt;
&lt;h1 id="conectar a twitter y enviar un tweet,"&gt;Conectar a twitter y enviar un tweet,&lt;/h1&gt;
&lt;h1 id="si no se logra la conexion se devuelve un mensaje."&gt;Si no se logra la conexion se devuelve un mensaje.&lt;/h1&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;api = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET,client_args = client_args)

photo = open('linux.jpg','rb')

api.update_status_with_media(media=photo, status='May the source be with you=&amp;gt; ')

api.update_status(status="Enviando tweets con twython por medio de un proxy")

print("Tweet enviado con exito")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except twython.exceptions.TwythonAuthError:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(u"Error de autenticaci&amp;oacute;n, no se pudo env&amp;iacute;ar el tweet")
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="listar el timeline del usuario"&gt;Listar el timeline del usuario&lt;/h1&gt;
&lt;p&gt;listado = api.get_home_timeline()&lt;/p&gt;
&lt;p&gt;print("Timeline del usuario _seraph1")&lt;/p&gt;
&lt;p&gt;print("-----------------------------")&lt;/p&gt;
&lt;p&gt;for i in listado:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print i[u'text']


sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print("-----------------------------")&lt;/p&gt;
&lt;h1 id="se realiza una busqueda de la palabra python con tipo de resultado popular"&gt;Se realiza una busqueda de la palabra python con tipo de resultado popular&lt;/h1&gt;
&lt;p&gt;resultados = api.search(q='python',result_type='popular')&lt;/p&gt;
&lt;h1 id="resultados = api.search(q='python')"&gt;resultados = api.search(q='python')&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;p&gt;datos= resultados.keys()&lt;/p&gt;
&lt;p&gt;print("Elementos del diccionario: %s" %datos)&lt;/p&gt;
&lt;p&gt;print("Resultado de la busqueda: python")&lt;/p&gt;
&lt;p&gt;print("--------------------------------")&lt;/p&gt;
&lt;p&gt;for i in range(len(resultados[datos[1]])):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    print resultados[datos[1]][i][u'text']


    print "***********************************"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print("--------------------------------")&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la salida de la aplicaci&amp;oacute;n:
```
Tweet enviado con exito
Timeline del usuario _seraph1&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Bo Xilai Gets Life Sentence http://t.co/oWBTgTBJKv
(Starting with "A") Armstrong, Aslan, Atran: Who will be the first to say this has nothing to do with religion?
http://t.co/8IacERuHN7
All About Team Building &amp;amp; #Leadership Exercises at Work! http://t.co/SEI89zGp8P #managers&lt;/p&gt;
&lt;h1 id="linux #netdev re: [xen-devel] [patch net-next] xen-netfront: convert to gro api and advertise this feature http://t.co/3nwdlbv7pt"&gt;linux #netdev  Re: [Xen-devel] [PATCH net-next] xen-netfront: convert to GRO API and advertise this feature http://t.co/3nWDlbv7pT&lt;/h1&gt;
&lt;h1 id="linux #netdev [patch net 3/5] bnx2x: 57840 non-external loopback test fail on 1g http://t.co/ti6azgkcbz"&gt;linux #netdev  [PATCH net 3/5] bnx2x: 57840 non-external loopback test fail on 1G http://t.co/tI6azgkcBZ&lt;/h1&gt;
&lt;p&gt;"Read the collective bargaining agreement, we can do that" RT @BradStone: ESPN reports #Browns now fielding offers for their fans' souls.
&amp;ldquo;@SoftwareHollis: @CloudExpo - can't wait for November.  Looking forward to presenting! http://t.co/b3dc2a08KU #Cloud #SocialMedia #SaaS&amp;rdquo;
.@jeancase - this is really about the democratization of ideas - the smartest people in the room probably don't work for you #2030NOW
Achieving Accountability With Talk of Infidelity - via @toddbnielsen http://t.co/hZktGZZ3EK #leadership
RT @les_leopold: Solution to the Student Debt Crisis: No More Debt
http://t.co/hsvdZj9uJQ
Recuerda cerrar sesi&amp;oacute;n cuando entres a #Clavenet desde cualquier equipo. #TipdeSeguridad&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Elementos del diccionario: [u'search_metadata', u'statuses']
Resultado de la busqueda: python&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;"Well, everday's a workout when you gotta carry around a 20 pound python in your jeans." -Will Forte 'MacGruber' 2010&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Aprende Python desde cero [Gu&amp;iacute;a completa] http://t.co/ZZE2NXEOVG #YoComparto&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;「d3はシングルスレッドなのでHadoopからデータ直接流し込んで大規模処理するわけにはいかないから、サーバ側でPythonとか走らせ、集計やサンプリング済みデータをJSに渡して可視化してる」的なこと言ったら「フリーソフトでは大規模なデータマイニングは難しい」っていう纏め方された&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Please RT! The most significant fact about today's Raspberry Jam for kids at PyconUK is the gender split: 50/50. #python #progress&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;先方、データマイニングについての記事のインタビューなのにPythonとか全く知らない（名前すらしらない）ようで、RやPython、果てはd3.jsとか全部ひっくるめて「フリーソフトを利用して分析している」っていうすごいざっくりしたまとめられ方してて、前後の話に矛盾が出てる&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Obviously Monty Python was never shown on JA TV as the Reggae Charts out there have Silly Walks Record label listed as err..'Silky Walks".&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Air Jordan IV &amp;ldquo;Black Python&amp;rdquo; Customs. WIN or BIN? #CurtienFashion http://t.co/SHu9MKOOB5&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Defenders of Obamacare dismissing "glitches" increasingly sound like the Black Knight from Monty Python http://t.co/SGV8ys8hMF&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Without this Beatle, Monty Python's "Life of Brian" would never have been made http://t.co/85ys7bLo6S #5facts&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Indonesia adalah Tempat ditemukannya ular terpanjang di dunia yaitu, Python Reticulates sepanjang 10 meter di Sulawesi. #7d&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Recruiter: "I came across your resume in a Google search. You seem to have an awesome expertise on python" To Guido. https://t.co/lAbeQVgo1I&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Mozilla Webdev is looking for a Web Engineer - Python, Django, jQuery, OSS - http://t.co/9hg8GFOeSl&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Writing a High Performance Python book: I'm terribly excited to announce that I'm co-authoring an O'Reilly... http://t.co/ZctbSoZGqa&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;If you can write PHP, you can write C/C++/Java/Python/Ruby/whatever.  These language aren't all that different.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;'El sentido de la vida' cumple 30 a&amp;ntilde;os: 12 cosas que probablemente no sab&amp;iacute;as de la peli de los Monty Python http://t.co/hBVKUCIMFJ&lt;/p&gt;
&lt;hr/&gt;
&lt;hr/&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestran dos im&amp;aacute;genes de los tweets enviados:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/probandolalibreriatwythonparatwitter-1.jpg"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/probandolalibreriatwythonparatwitter-2.jpg"/&gt; &lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Twitter"></category><category term="Ubuntu"></category></entry><entry><title>Descubriendo Trending Topics de Twitter con twython y python</title><link href="https://ecrespo.github.io/descubriendo-trending-topics-de-twitter-con-twython-y-python.html" rel="alternate"></link><published>2013-09-22T09:00:00-05:30</published><updated>2013-09-22T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-09-22:/descubriendo-trending-topics-de-twitter-con-twython-y-python.html</id><summary type="html">&lt;p&gt;Siguiendo con los art&amp;iacute;culos sobre &lt;a href="https://www.seraph.to/tag/twitter.html"&gt;librer&amp;iacute;as de python para twitter&lt;/a&gt;, hace poco se mostr&amp;oacute; en un art&amp;iacute;culo como &lt;a href="https://www.seraph.to/descubriendo-trending-topics-de-twitter-con-python-twitter.html#descubriendo-trending-topics-de-twitter-con-python-twitter"&gt;ver los Trending Topics usando la librer&amp;iacute;a python-twitter&lt;/a&gt; , ahora se mostrar&amp;aacute; como desplegar los topics usando la librer&amp;iacute;a twython.&lt;/p&gt;
&lt;p&gt;El script mostrar&amp;aacute; la conexi&amp;oacute;n a twitter, luego despliega los identificadores de las …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siguiendo con los art&amp;iacute;culos sobre &lt;a href="https://www.seraph.to/tag/twitter.html"&gt;librer&amp;iacute;as de python para twitter&lt;/a&gt;, hace poco se mostr&amp;oacute; en un art&amp;iacute;culo como &lt;a href="https://www.seraph.to/descubriendo-trending-topics-de-twitter-con-python-twitter.html#descubriendo-trending-topics-de-twitter-con-python-twitter"&gt;ver los Trending Topics usando la librer&amp;iacute;a python-twitter&lt;/a&gt; , ahora se mostrar&amp;aacute; como desplegar los topics usando la librer&amp;iacute;a twython.&lt;/p&gt;
&lt;p&gt;El script mostrar&amp;aacute; la conexi&amp;oacute;n a twitter, luego despliega los identificadores de las ciudades que tienen Trending Topics en Venezuela y por &amp;uacute;ltimo se despliega los Trending Topics de Venezuela en este momento.&lt;/p&gt;
&lt;p&gt;Para saber como obtener el valor del token de la aplicaci&amp;oacute;n o de acceso se recomienda revisar el &lt;a href="http://blog.crespo.org.ve/2013/09/probando-la-libreria-twython-para.html"&gt;art&amp;iacute;culo anterior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se define el token de la aplicacion"&gt;Se define el token de la aplicacion&lt;/h1&gt;
&lt;p&gt;CONSUMER_KEY = 'xxxxx'&lt;/p&gt;
&lt;p&gt;CONSUMER_SECRET = 'xxxxx'&lt;/p&gt;
&lt;h1 id="se define el acceso al usuario"&gt;Se define el acceso al usuario&lt;/h1&gt;
&lt;p&gt;ACCESS_KEY = 'xxxxx'&lt;/p&gt;
&lt;p&gt;ACCESS_SECRET = 'xxxxx'&lt;/p&gt;
&lt;h1 id="se importa twython y de time a sleep"&gt;Se importa twython y de time a  sleep&lt;/h1&gt;
&lt;p&gt;from twython import Twython&lt;/p&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="se define los argumentos del cliente, la ip y puerto del proxy, el tiempo de intento de la conexion y el nombre de la"&gt;Se define los argumentos del cliente, la ip y puerto del proxy, el tiempo de intento de la conexion y el nombre de la&lt;/h1&gt;
&lt;h1 id="aplicacion cliente"&gt;aplicacion cliente&lt;/h1&gt;
&lt;p&gt;client_args = {'headers': {'User-Agent': 'cmdtweetpy'},'proxies': {'http': '127.0.0.1:xxx'},'timeout': 300}&lt;/p&gt;
&lt;h1 id="conectar a twitter y enviar un tweet,"&gt;Conectar a twitter y enviar un tweet,&lt;/h1&gt;
&lt;h1 id="si no se logra la conexion se devuelve un mensaje."&gt;Si no se logra la conexion se devuelve un mensaje.&lt;/h1&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;api = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET,client_args = client_args)

print(u"Autenticaci&amp;oacute;n con exito")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except twython.exceptions.TwythonAuthError:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(u"Error de autenticaci&amp;oacute;n")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print ""&lt;/p&gt;
&lt;p&gt;trending = api.get_available_trends()&lt;/p&gt;
&lt;p&gt;print u"Identificaci&amp;oacute;n de woeid de Venezuela"&lt;/p&gt;
&lt;p&gt;print "-------------------------------------"&lt;/p&gt;
&lt;p&gt;c = 0   &lt;/p&gt;
&lt;p&gt;pos = 0&lt;/p&gt;
&lt;p&gt;woeid = 0&lt;/p&gt;
&lt;h1 id="se despliega los woeid de las ciudades de venezuela y de venezuela en si"&gt;Se despliega los woeid de las ciudades de Venezuela y de Venezuela en si&lt;/h1&gt;
&lt;p&gt;for i in trending:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if i[u'countryCode'] == u'VE':


    print i[u'name'],i[u'woeid']


    #Se toma el woeid de Venezuela


    woeid = i[u'woeid']


    pos = c


c += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print ""&lt;/p&gt;
&lt;h1 id="se despliega los topics de venezuela."&gt;Se despliega los topics de Venezuela.&lt;/h1&gt;
&lt;p&gt;print "Lista de Trending Topics en Venezuela"&lt;/p&gt;
&lt;p&gt;print "-------------------------------------"&lt;/p&gt;
&lt;p&gt;for i in api.get_place_trends(id=woeid):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for k in i[u'trends']:


    print k[u'name']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el resultado de la ejecuci&amp;oacute;n del script:&lt;/p&gt;
&lt;p&gt;```python
Identificaci&amp;oacute;n de woeid de Venezuela&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Caracas 395269&lt;/p&gt;
&lt;p&gt;Maracaibo 395270&lt;/p&gt;
&lt;p&gt;Maracay 395271&lt;/p&gt;
&lt;p&gt;Valencia 395272&lt;/p&gt;
&lt;p&gt;Barcelona 395273&lt;/p&gt;
&lt;p&gt;Ciudad Guayana 395275&lt;/p&gt;
&lt;p&gt;Turmero 395277&lt;/p&gt;
&lt;p&gt;Barquisimeto 468382&lt;/p&gt;
&lt;p&gt;Matur&amp;iacute;n 468384&lt;/p&gt;
&lt;p&gt;Venezuela 23424982&lt;/p&gt;
&lt;p&gt;Lista de Trending Topics en Venezuela&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="10cosasqueodio"&gt;10CosasQueOdio&lt;/h1&gt;
&lt;h1 id="alfombrarojae"&gt;AlfombraRojaE&lt;/h1&gt;
&lt;h1 id="emmysporwarner"&gt;EmmysPorWarner&lt;/h1&gt;
&lt;h1 id="chavezelgranarquitecto"&gt;ChavezElGranArquitecto&lt;/h1&gt;
&lt;h1 id="obamanervioso"&gt;ObamaNervioso&lt;/h1&gt;
&lt;p&gt;Angela Merkel&lt;/p&gt;
&lt;p&gt;Titanic&lt;/p&gt;
&lt;p&gt;Kenia&lt;/p&gt;
&lt;p&gt;GNB&lt;/p&gt;
&lt;p&gt;Sofia Vergara
```&lt;/p&gt;
&lt;p&gt;Como se ve, se puede obtener el topics de cada ciudad o Pa&amp;iacute;s al obtener el &lt;code&gt;woeid&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Twitter"></category><category term="Ubuntu"></category></entry><entry><title>Nodos más influyentes en un grafo con networkx. Parte 4.</title><link href="https://ecrespo.github.io/nodos-mas-influyentes-en-un-grafo-con-networkx-parte-4.html" rel="alternate"></link><published>2013-08-11T09:00:00-05:30</published><updated>2013-08-11T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-08-11:/nodos-mas-influyentes-en-un-grafo-con-networkx-parte-4.html</id><summary type="html">&lt;p&gt;En la &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-3.html#creacion-de-grafos-con-networkx-parte-3"&gt;parte 3&lt;/a&gt; de creaci&amp;oacute;n de grafos se muestra los tipos de grafos que existen, en la &lt;a href="http://blog.crespo.org.ve/2013/02/creacion-de-grafos-con-networkx-parte-2.html"&gt;parte 2&lt;/a&gt; se muestra como obtener los datos de un archivo que contiene las relaciones de los personajes de la novela Los miserables y en la &lt;a href="http://blog.crespo.org.ve/2012/11/creacion-de-grafos-con-networkx-parte-1.html"&gt;parte 1&lt;/a&gt; se muestra la creaci&amp;oacute;n …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En la &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-3.html#creacion-de-grafos-con-networkx-parte-3"&gt;parte 3&lt;/a&gt; de creaci&amp;oacute;n de grafos se muestra los tipos de grafos que existen, en la &lt;a href="http://blog.crespo.org.ve/2013/02/creacion-de-grafos-con-networkx-parte-2.html"&gt;parte 2&lt;/a&gt; se muestra como obtener los datos de un archivo que contiene las relaciones de los personajes de la novela Los miserables y en la &lt;a href="http://blog.crespo.org.ve/2012/11/creacion-de-grafos-con-networkx-parte-1.html"&gt;parte 1&lt;/a&gt; se muestra la creaci&amp;oacute;n de grafos.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se toma el archivo de la parte 2 para obtener los nodos del grafo m&amp;aacute;s influyentes, los que m&amp;aacute;s se enlazan con otros personajes de la novela. &lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo en Ingl&amp;eacute;s &lt;a href="https://glowingpython.blogspot.com/2013/02/betweenness-centrality.html"&gt;Betweenness Centrality&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Se usar&amp;aacute; la librer&amp;iacute;a networkx para tomar la informaci&amp;oacute;n del archivo &lt;a href="https://gephi.org/datasets/lesmiserables.gml.zip"&gt;lesmiserables.gml&lt;/a&gt; , para obtener los nodos m&amp;aacute;s influyentes se usar&amp;aacute; la centralidad por intermediaci&amp;oacute;n. &lt;/p&gt;
&lt;p&gt;La centralidad por intermediaci&amp;oacute;n se centra en el n&amp;uacute;mero de visitas a trav&amp;eacute;s de los caminos m&amp;aacute;s cortos.&lt;/p&gt;
&lt;p&gt;La centralidad por intermediaci&amp;oacute;n se define como: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/nodosmasinfluyentesenungrafoconnetworkx4-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Donde s(s,t) es el n&amp;uacute;mero total de rutas m&amp;aacute;s cortas desde el nodo s al nodo t, y sv(s,t) es el n&amp;uacute;mero de los camions que pasan a trav&amp;eacute;s de v. &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo python que permite calcular los nodos m&amp;aacute;s influyentes por medio de la centralidad por intermediaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;import networkx as nx&lt;/p&gt;
&lt;p&gt;from pylab import show, hist, figure&lt;/p&gt;
&lt;h1 id="leer los datos del archivo lesmiserables.gml"&gt;Leer los datos del archivo lesmiserables.gml&lt;/h1&gt;
&lt;p&gt;G = nx.read_gml('lesmiserables.gml',relabel=True)&lt;/p&gt;
&lt;h1 id="funcion que devuelve los nodos mas importantes"&gt;Funcion que devuelve los nodos mas importantes&lt;/h1&gt;
&lt;p&gt;def most_important(G):&lt;/p&gt;
&lt;p&gt;""" retorna una copia de G con los nodos mas importantes(mas influencia, conexion entre nodos) """ &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se calcula el ranking segun la centralidad

ranking = nx.betweenness_centrality(G).items(

#Se imprime los nodos mas importantes

print ranking

r = [x[1] for x in ranking]

m = sum(r)/len(r) # centralidad

t = m*3 # se mantiene los nodos  con promedio de aparicion de 3 veces


Gt = G.copy()


#Se remueve los nodos que no aparecen


for k, v in ranking:


    if v &amp;lt; t:


        Gt.remove_node(k)


#Se retorna los nodos mas importantes


return Gt
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se recibe los nodos mas importantes"&gt;Se recibe los nodos mas importantes&lt;/h1&gt;
&lt;p&gt;Gt = most_important(G) # trimming&lt;/p&gt;
&lt;h1 id="se crea el layout"&gt;se crea el layout&lt;/h1&gt;
&lt;p&gt;pos = nx.spring_layout(G)&lt;/p&gt;
&lt;h1 id="se dibuja los nodos y sus bordes"&gt;Se dibuja los nodos y sus bordes&lt;/h1&gt;
&lt;p&gt;nx.draw_networkx_nodes(G,pos,node_color='b',alpha=0.2,node_size=8)&lt;/p&gt;
&lt;p&gt;nx.draw_networkx_edges(G,pos,alpha=0.1)&lt;/p&gt;
&lt;h1 id="se dibuja los nodos mas importantes con un estilo diferente"&gt;Se dibuja los nodos mas importantes con un estilo diferente&lt;/h1&gt;
&lt;p&gt;nx.draw_networkx_nodes(Gt,pos,node_color='r',alpha=0.4,node_size=254)&lt;/p&gt;
&lt;h1 id="se define las etiquetas"&gt;se define las etiquetas&lt;/h1&gt;
&lt;p&gt;nx.draw_networkx_labels(Gt,pos,font_size=12,font_color='b')&lt;/p&gt;
&lt;h1 id="se muestra la grafica"&gt;Se muestra la grafica&lt;/h1&gt;
&lt;p&gt;show()
```&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica donde se ve los personajes m&amp;aacute;s influyentes en la novela Los miserables se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/nodosmasinfluyentesenungrafoconnetworkx4-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;Esto es &amp;uacute;til a la hora de manejar la influencia en redes sociales como twitter.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Networkx"></category><category term="Python"></category></entry><entry><title>Graficar la tangente de una curva con python, numpy y pylab.</title><link href="https://ecrespo.github.io/graficar-la-tangente-de-una-curva-con-python-numpy-y-pylab.html" rel="alternate"></link><published>2013-07-26T09:00:00-05:30</published><updated>2013-07-26T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-07-26:/graficar-la-tangente-de-una-curva-con-python-numpy-y-pylab.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo  "&lt;a href="https://glowingpython.blogspot.com/2013/02/visualizing-tangent.html"&gt;Visualizing the tangent&lt;/a&gt;" . &lt;/p&gt;
&lt;p&gt;La tangente de una curva es una l&amp;iacute;nea recta que toca a la curva en un punto. Est&amp;aacute; l&amp;iacute;nea recta da la pendiente de la curva. Si la curva representa una serie de tiempo se puede decir la relaci&amp;oacute;n de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo  "&lt;a href="https://glowingpython.blogspot.com/2013/02/visualizing-tangent.html"&gt;Visualizing the tangent&lt;/a&gt;" . &lt;/p&gt;
&lt;p&gt;La tangente de una curva es una l&amp;iacute;nea recta que toca a la curva en un punto. Est&amp;aacute; l&amp;iacute;nea recta da la pendiente de la curva. Si la curva representa una serie de tiempo se puede decir la relaci&amp;oacute;n de cambio de valores con s&amp;oacute;lo mirar la tangente.&lt;/p&gt;
&lt;p&gt;Suponga que la curva se da como la gr&amp;aacute;fica de la funci&amp;oacute;n y = f(x), se tiene que la pendiente de la curva en el punto (a,f(a)) es igual a su derivada en un&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarlatangentedeunacurvaconpythonnumpyypylab-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;y la ecuaci&amp;oacute;n de la recta tangente puede enunciarse&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarlatangentedeunacurvaconpythonnumpyypylab-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo de la tangente de &lt;code&gt;x*sen(x^3)&lt;/code&gt; en el punto 1.6:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="de numpy se importa sin, linspace y power"&gt;De numpy se importa sin, linspace y power&lt;/h1&gt;
&lt;p&gt;from numpy import sin,linspace,power&lt;/p&gt;
&lt;h1 id="de pylab se importa plot y show"&gt;De pylab se importa plot y show&lt;/h1&gt;
&lt;p&gt;from pylab import plot,show&lt;/p&gt;
&lt;h1 id="se define la funcion de la curva"&gt;Se define la funcion de la curva&lt;/h1&gt;
&lt;p&gt;def f(x): # sample function
 return x*sin(power(x,3))&lt;/p&gt;
&lt;h1 id="se evalua la funcion en el rango de -2 a 4 con 150 intervalos"&gt;Se evalua la funcion en el rango de -2 a 4 con 150 intervalos&lt;/h1&gt;
&lt;p&gt;x = linspace(-2,4,150)&lt;/p&gt;
&lt;h1 id="se le pasa a la funcion los valores definidos en x."&gt;Se le pasa a la funcion los valores definidos en x.&lt;/h1&gt;
&lt;p&gt;y = f(x)&lt;/p&gt;
&lt;h1 id="se le pasa el punto a calcular la tangente de la curva."&gt;Se le pasa el punto a calcular la tangente de la curva.&lt;/h1&gt;
&lt;p&gt;a = 1.6&lt;/p&gt;
&lt;h1 id="se le pasa el diferencial con un valor de 0.1"&gt;Se le pasa el diferencial con un valor de 0.1&lt;/h1&gt;
&lt;p&gt;h = 0.1&lt;/p&gt;
&lt;h1 id="se calcula la derivada."&gt;Se calcula la derivada.&lt;/h1&gt;
&lt;p&gt;fprime = (f(a+h)-f(a))/h # derivative&lt;/p&gt;
&lt;h1 id="se calcula la tangente"&gt;Se calcula la tangente&lt;/h1&gt;
&lt;p&gt;tan = f(a)+fprime*(x-a)  # tangent&lt;/p&gt;
&lt;h1 id="se grafica la funcion y la tangente."&gt;Se grafica la funcion y la tangente.&lt;/h1&gt;
&lt;p&gt;plot(x,y,'b',a,f(a),'om',x,tan,'--r')&lt;/p&gt;
&lt;h1 id="se muestra la grafica."&gt;Se muestra la grafica.&lt;/h1&gt;
&lt;p&gt;show()
```
A continuaci&amp;oacute;n se muestra las gr&amp;aacute;ficas que se generan:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarlatangentedeunacurvaconpythonnumpyypylab-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;En el art&amp;iacute;culo original se muestra otro ejemplo.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="matplotlib"></category><category term="numpy"></category><category term="Python"></category></entry><entry><title>Utilizando el API de Stream de Twitter con Python y tweetstream. Parte 1.</title><link href="https://ecrespo.github.io/utilizando-el-api-de-stream-de-twitter-con-python-y-tweetstream-parte-1.html" rel="alternate"></link><published>2013-06-04T09:00:00-05:30</published><updated>2013-06-04T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-06-04:/utilizando-el-api-de-stream-de-twitter-con-python-y-tweetstream-parte-1.html</id><summary type="html">&lt;p&gt;Siguiendo con los art&amp;iacute;culos de &lt;a href="https://www.seraph.to/tag/twitter.html"&gt;Twitter con Python&lt;/a&gt;, ahora mostrar&amp;eacute; como usar el &lt;code&gt;API Stream&lt;/code&gt; de Twitter.&lt;/p&gt;
&lt;p&gt;En este caso como la librer&amp;iacute;a twitter no maneja stream es necesario instalar otra librer&amp;iacute;a llamada &lt;a href="https://pypi.org/project/tweetstream/"&gt;tweetstream&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n del API Stream de twiitter se encuentra en el &lt;a href="https://developer.twitter.com/docs/api/1"&gt;enlace&lt;/a&gt;, y  en espec&amp;iacute;fico para …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siguiendo con los art&amp;iacute;culos de &lt;a href="https://www.seraph.to/tag/twitter.html"&gt;Twitter con Python&lt;/a&gt;, ahora mostrar&amp;eacute; como usar el &lt;code&gt;API Stream&lt;/code&gt; de Twitter.&lt;/p&gt;
&lt;p&gt;En este caso como la librer&amp;iacute;a twitter no maneja stream es necesario instalar otra librer&amp;iacute;a llamada &lt;a href="https://pypi.org/project/tweetstream/"&gt;tweetstream&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;La documentaci&amp;oacute;n del API Stream de twiitter se encuentra en el &lt;a href="https://developer.twitter.com/docs/api/1"&gt;enlace&lt;/a&gt;, y  en espec&amp;iacute;fico para obtener informaci&amp;oacute;n  objeto tweets lo pueden revisar en el &lt;a href="https://developer.twitter.com/docs/platform-objects/tweets"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ah&amp;iacute; encontrar&amp;aacute;n la estructura json de este objeto. El campo que se uso en el ejemplo son 'text' y 'user', text contiene el texto del tweet y user contiene otro objeto que contiene informaci&amp;oacute;n del usuario, para este caso se usar&amp;aacute; el campo 'screen_name' que maneja el nombre del usuario twitter que env&amp;iacute;a el tweet.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo de la aplicaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="import tweetstram, sleep y exit"&gt;Import tweetstram, sleep y exit&lt;/h1&gt;
&lt;p&gt;import tweetstream&lt;/p&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;p&gt;from sys import exit&lt;/p&gt;
&lt;h1 id="se crea la funcion streamtweet donde se le pasa el usuario y la clave de una cuenta twitter."&gt;Se crea la funcion StreamTweet donde se le pasa el usuario y la clave de una cuenta twitter.&lt;/h1&gt;
&lt;p&gt;def StreamTweet(usuario,clave):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se captura la excepcion de error de conexion e interrupcion por teclado

try:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#Se intenta conectar a la funcion de stream de tweetstream con el usuario y la clave&lt;/p&gt;
&lt;p&gt;#Asignando a stream el resultado&lt;/p&gt;
&lt;p&gt;with tweetstream.TweetStream(usuario,clave) as stream:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; #Se genera un ciclo de cada tweet

 for tweet in stream:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#Se captura la excepcion de KeyError e Interrupcion de teclado, de esa forma&lt;/p&gt;
&lt;p&gt;#Se devuelve un mensaje de error y se termina el programa respectivamente.&lt;/p&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  #Se crea un texto con el numero de tweet y la velocidad de cada tweet.

  adicional = "|| tweet %d || velocidad %.5f tweets/seg" %(stream.count,stream.rate)

  #Se crea un texto final donde se le pasa el nombre del usuario que envia el tweet,

  #el texto del tweet y el texto anterior

  texto = tweet['user']['screen_name'] + "||" + tweet['text'] + adicional

  #Se imprime dicho texto en pantalla

  print texto
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except KeyError:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  print "No hay tweet"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except KeyboardInterrupt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  exit()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#Se espera 5 segundos para continuar al siguiente ciclo del lazo&lt;/p&gt;
&lt;p&gt;sleep(5)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;except tweetstream.ConnectionError, e:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print "Desconectado de twitter. Razon: ", e.reason&lt;/p&gt;
&lt;p&gt;exit()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;except KeyboardInterrupt:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exit()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se llama a la funcion pasando el usuario y la clave.

StreamTweet(usuario,clave)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra la captura de pantalla del programa en funcionamiento:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/utilizandoelapidestreamdetwitterconpythonytweetstream1-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Se muestra en cada tweet, el usuario que env&amp;iacute;a el tweet, el tweet en si, el n&amp;uacute;mero de tweet enviado y la velocidad con que se env&amp;iacute;a el tweet.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="API Stream"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Twitter"></category></entry><entry><title>Descubriendo trending topics de twitter con python-twitter.</title><link href="https://ecrespo.github.io/descubriendo-trending-topics-de-twitter-con-python-twitter.html" rel="alternate"></link><published>2013-04-27T09:00:00-05:30</published><updated>2013-04-27T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-04-27:/descubriendo-trending-topics-de-twitter-con-python-twitter.html</id><summary type="html">&lt;p&gt;Recuerdo la presentaci&amp;oacute;n de Efrain en el PyDay en M&amp;eacute;rida, donde hablo de la librer&amp;iacute;a tweepy (&lt;a href="https://effiejayx.wordpress.com/2010/10/25/jugando-con-las-apis-de-twitter-y-python/"&gt;ac&amp;aacute; art&amp;iacute;culo de Efrain sobre el tema&lt;/a&gt;) que permite acceder a una cuenta de twitter, actualizar estado entre otras cosas.&lt;/p&gt;
&lt;p&gt;Con el auge de twitter como red social en el pa&amp;iacute;s me dispuse a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recuerdo la presentaci&amp;oacute;n de Efrain en el PyDay en M&amp;eacute;rida, donde hablo de la librer&amp;iacute;a tweepy (&lt;a href="https://effiejayx.wordpress.com/2010/10/25/jugando-con-las-apis-de-twitter-y-python/"&gt;ac&amp;aacute; art&amp;iacute;culo de Efrain sobre el tema&lt;/a&gt;) que permite acceder a una cuenta de twitter, actualizar estado entre otras cosas.&lt;/p&gt;
&lt;p&gt;Con el auge de twitter como red social en el pa&amp;iacute;s me dispuse a probar otra librer&amp;iacute;a de python para twitter llamada &lt;a href="https://github.com/bear/python-twitter"&gt;python-twitter&lt;/a&gt;, la documentaci&amp;oacute;n de la librer&amp;iacute;a se puede acceder desde &lt;a href="https://github.com/bear/python-twitter/wiki"&gt;ac&amp;aacute;&lt;/a&gt;. Existe una serie de ejemplos de como usar la librer&amp;iacute;a python-twitter en &lt;a href="https://github.com/ideoforms/python-twitter-examples/"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instalar la librer&amp;iacute;a de twitter:
Se usar&amp;aacute; el comando &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt; como &lt;code&gt;root&lt;/code&gt;:
&lt;code&gt;easy_install twitter&lt;/code&gt;
&amp;oacute;
&lt;code&gt;pip install twitter&lt;/code&gt;
El c&amp;oacute;digo que se muestra a continuaci&amp;oacute;n lista el ID de los Pa&amp;iacute;ses, el n&amp;uacute;mero ID de cada Pa&amp;iacute;s. El c&amp;oacute;digo original lo pueden ver en el siguiente &lt;a href="https://github.com/ideoforms/python-twitter-examples/blob/master/twitter-trends-available.py"&gt;enlace&lt;/a&gt;:
Se ejecuta python:
```python
(python2.7)ernesto@jewel:~/prueba$ python&lt;/p&gt;
&lt;p&gt;Python 2.7.3 (default, Jan  2 2013, 16:53:07) &lt;/p&gt;
&lt;p&gt;[GCC 4.7.2] on linux2&lt;/p&gt;
&lt;p&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Se importa el m&amp;oacute;dulo `python-twitter`:&lt;/code&gt;python
import twitter
&lt;code&gt;Se instancia la clase Twitter pasando el dominio (el url de la api de twitter) y la versi&amp;oacute;n del api que en este caso es la versi&amp;oacute;n 1:&lt;/code&gt;python
twitter_api = twitter.Twitter(domain="api.twitter.com", api_version='1')
&lt;code&gt;Se captura los trends disponibles:&lt;/code&gt;python
trends1 = twitter_api.trends.available()
```
Se lista los ID de los Pa&amp;iacute;ses:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for location in trends1:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;...     name = location["name"].encode('ascii', 'replace')&lt;/p&gt;
&lt;p&gt;...     print "(%d) %s" % (location["woeid"], name)&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;(1) Worldwide&lt;/p&gt;
&lt;p&gt;(2972) Winnipeg&lt;/p&gt;
&lt;p&gt;(3369) Ottawa&lt;/p&gt;
&lt;p&gt;(3444) Quebec&lt;/p&gt;
&lt;p&gt;(3534) Montreal&lt;/p&gt;
&lt;p&gt;(4118) Toronto&lt;/p&gt;
&lt;p&gt;(8676) Edmonton&lt;/p&gt;
&lt;p&gt;(8775) Calgary&lt;/p&gt;
&lt;p&gt;(9807) Vancouver&lt;/p&gt;
&lt;p&gt;(12723) Birmingham&lt;/p&gt;
&lt;p&gt;(13911) Brighton&lt;/p&gt;
&lt;p&gt;(13963) Bristol&lt;/p&gt;
&lt;p&gt;(15127) Cardiff&lt;/p&gt;
&lt;p&gt;(19344) Edinburgh&lt;/p&gt;
&lt;p&gt;(21125) Glasgow&lt;/p&gt;
&lt;p&gt;(26042) Leeds&lt;/p&gt;
&lt;p&gt;(26062) Leicester&lt;/p&gt;
&lt;p&gt;(26734) Liverpool&lt;/p&gt;
&lt;p&gt;(28218) Manchester&lt;/p&gt;
&lt;p&gt;(30079) Newcastle&lt;/p&gt;
&lt;p&gt;(30720) Nottingham&lt;/p&gt;
&lt;p&gt;(32452) Portsmouth&lt;/p&gt;
&lt;p&gt;(34503) Sheffield&lt;/p&gt;
&lt;p&gt;(44418) London&lt;/p&gt;
&lt;p&gt;(44544) Belfast&lt;/p&gt;
&lt;p&gt;(76456) Santo Domingo&lt;/p&gt;
&lt;p&gt;(116545) Mexico City&lt;/p&gt;
&lt;p&gt;(124162) Guadalajara&lt;/p&gt;
&lt;p&gt;(131068) Le?n&lt;/p&gt;
&lt;p&gt;(134047) Monterrey&lt;/p&gt;
&lt;p&gt;(137612) Puebla&lt;/p&gt;
&lt;p&gt;(149361) Tijuana&lt;/p&gt;
&lt;p&gt;(332471) Mendoza&lt;/p&gt;
&lt;p&gt;(349859) Santiago&lt;/p&gt;
&lt;p&gt;(349860) Concepcion&lt;/p&gt;
&lt;p&gt;(349861) Valparaiso&lt;/p&gt;
&lt;p&gt;(368148) Bogot?&lt;/p&gt;
&lt;p&gt;(395269) Caracas&lt;/p&gt;
&lt;p&gt;(395270) Maracaibo&lt;/p&gt;
&lt;p&gt;(395272) Valencia&lt;/p&gt;
&lt;p&gt;(418440) Lima&lt;/p&gt;
&lt;p&gt;(455819) Bras?lia&lt;/p&gt;
&lt;p&gt;(455820) Bel?m&lt;/p&gt;
&lt;p&gt;(455821) Belo Horizonte&lt;/p&gt;
&lt;p&gt;(455822) Curitiba&lt;/p&gt;
&lt;p&gt;(455823) Porto Alegre&lt;/p&gt;
&lt;p&gt;(455824) Recife&lt;/p&gt;
&lt;p&gt;(455825) Rio de Janeiro&lt;/p&gt;
&lt;p&gt;(455826) Salvador&lt;/p&gt;
&lt;p&gt;(455827) S?o Paulo&lt;/p&gt;
&lt;p&gt;(455828) Campinas&lt;/p&gt;
&lt;p&gt;(455830) Fortaleza&lt;/p&gt;
&lt;p&gt;(455831) Goi?nia&lt;/p&gt;
&lt;p&gt;(455833) Manaus&lt;/p&gt;
&lt;p&gt;(455834) S?o Lu?s&lt;/p&gt;
&lt;p&gt;(455867) Guarulhos&lt;/p&gt;
&lt;p&gt;(466861) C?rdoba&lt;/p&gt;
&lt;p&gt;(466862) Rosario&lt;/p&gt;
&lt;p&gt;(468382) Barquisimeto&lt;/p&gt;
&lt;p&gt;(468739) Buenos Aires&lt;/p&gt;
&lt;p&gt;(560743) Dublin&lt;/p&gt;
&lt;p&gt;(580778) Bordeaux&lt;/p&gt;
&lt;p&gt;(608105) Lille&lt;/p&gt;
&lt;p&gt;(609125) Lyon&lt;/p&gt;
&lt;p&gt;(610264) Marseille&lt;/p&gt;
&lt;p&gt;(612977) Montpellier&lt;/p&gt;
&lt;p&gt;(613858) Nantes&lt;/p&gt;
&lt;p&gt;(615702) Paris&lt;/p&gt;
&lt;p&gt;(619163) Rennes&lt;/p&gt;
&lt;p&gt;(627791) Strasbourg&lt;/p&gt;
&lt;p&gt;(628886) Toulouse&lt;/p&gt;
&lt;p&gt;(638242) Berlin&lt;/p&gt;
&lt;p&gt;(641142) Bremen&lt;/p&gt;
&lt;p&gt;(645458) Dortmund&lt;/p&gt;
&lt;p&gt;(645686) Dresden&lt;/p&gt;
&lt;p&gt;(646099) Dusseldorf&lt;/p&gt;
&lt;p&gt;(648820) Essen&lt;/p&gt;
&lt;p&gt;(650272) Frankfurt&lt;/p&gt;
&lt;p&gt;(656958) Hamburg&lt;/p&gt;
&lt;p&gt;(667931) Cologne&lt;/p&gt;
&lt;p&gt;(671072) Leipzig&lt;/p&gt;
&lt;p&gt;(676757) Munich&lt;/p&gt;
&lt;p&gt;(698064) Stuttgart&lt;/p&gt;
&lt;p&gt;(718345) Milan&lt;/p&gt;
&lt;p&gt;(719258) Naples&lt;/p&gt;
&lt;p&gt;(721943) Rome&lt;/p&gt;
&lt;p&gt;(725003) Turin&lt;/p&gt;
&lt;p&gt;(726874) Den Haag&lt;/p&gt;
&lt;p&gt;(727232) Amsterdam&lt;/p&gt;
&lt;p&gt;(733075) Rotterdam&lt;/p&gt;
&lt;p&gt;(753692) Barcelona&lt;/p&gt;
&lt;p&gt;(766273) Madrid&lt;/p&gt;
&lt;p&gt;(766356) Malaga&lt;/p&gt;
&lt;p&gt;(774508) Seville&lt;/p&gt;
&lt;p&gt;(776688) Valencia&lt;/p&gt;
&lt;p&gt;(779063) Zaragoza&lt;/p&gt;
&lt;p&gt;(906057) Stockholm&lt;/p&gt;
&lt;p&gt;(1030077) Bekasi&lt;/p&gt;
&lt;p&gt;(1044316) Surabaya&lt;/p&gt;
&lt;p&gt;(1047180) Bandung&lt;/p&gt;
&lt;p&gt;(1047378) Jakarta&lt;/p&gt;
&lt;p&gt;(1062617) Singapore&lt;/p&gt;
&lt;p&gt;(1098081) Perth&lt;/p&gt;
&lt;p&gt;(1099805) Adelaide&lt;/p&gt;
&lt;p&gt;(1100661) Brisbane&lt;/p&gt;
&lt;p&gt;(1100968) Canberra&lt;/p&gt;
&lt;p&gt;(1101597) Darwin&lt;/p&gt;
&lt;p&gt;(1103816) Melbourne&lt;/p&gt;
&lt;p&gt;(1105779) Sydney&lt;/p&gt;
&lt;p&gt;(1110809) Kitakyushu&lt;/p&gt;
&lt;p&gt;(1117034) Chiba&lt;/p&gt;
&lt;p&gt;(1117099) Fukuoka&lt;/p&gt;
&lt;p&gt;(1117227) Hiroshima&lt;/p&gt;
&lt;p&gt;(1117502) Kawasaki&lt;/p&gt;
&lt;p&gt;(1117545) Kobe&lt;/p&gt;
&lt;p&gt;(1117817) Nagoya&lt;/p&gt;
&lt;p&gt;(1118108) Sapporo&lt;/p&gt;
&lt;p&gt;(1118129) Sendai&lt;/p&gt;
&lt;p&gt;(1118285) Takamatsu&lt;/p&gt;
&lt;p&gt;(1118370) Tokyo&lt;/p&gt;
&lt;p&gt;(1118550) Yokohama&lt;/p&gt;
&lt;p&gt;(1132447) Busan&lt;/p&gt;
&lt;p&gt;(1132466) Daegu&lt;/p&gt;
&lt;p&gt;(1132481) Gwangju&lt;/p&gt;
&lt;p&gt;(1132496) Incheon&lt;/p&gt;
&lt;p&gt;(1132567) Suwon&lt;/p&gt;
&lt;p&gt;(1132578) Ulsan&lt;/p&gt;
&lt;p&gt;(1132599) Seoul&lt;/p&gt;
&lt;p&gt;(1154726) Klang&lt;/p&gt;
&lt;p&gt;(1154781) Kuala Lumpur&lt;/p&gt;
&lt;p&gt;(1167715) Calocan&lt;/p&gt;
&lt;p&gt;(1199136) Davao City&lt;/p&gt;
&lt;p&gt;(1199477) Manila&lt;/p&gt;
&lt;p&gt;(1199682) Quezon City&lt;/p&gt;
&lt;p&gt;(1398823) Lagos&lt;/p&gt;
&lt;p&gt;(1582504) Johannesburg&lt;/p&gt;
&lt;p&gt;(2077746) Samara&lt;/p&gt;
&lt;p&gt;(2112237) Yekaterinburg&lt;/p&gt;
&lt;p&gt;(2122265) Moscow&lt;/p&gt;
&lt;p&gt;(2122471) Nizhny Novgorod&lt;/p&gt;
&lt;p&gt;(2122541) Novosibirsk&lt;/p&gt;
&lt;p&gt;(2122641) Omsk&lt;/p&gt;
&lt;p&gt;(2123260) Saint Petersburg&lt;/p&gt;
&lt;p&gt;(2282863) Nagpur&lt;/p&gt;
&lt;p&gt;(2295377) Lucknow&lt;/p&gt;
&lt;p&gt;(2295378) Kanpur&lt;/p&gt;
&lt;p&gt;(2295386) Kolkata&lt;/p&gt;
&lt;p&gt;(2295388) Amritsar&lt;/p&gt;
&lt;p&gt;(2295401) Jaipur&lt;/p&gt;
&lt;p&gt;(2295402) Ahmedabad&lt;/p&gt;
&lt;p&gt;(2295408) Indore&lt;/p&gt;
&lt;p&gt;(2295411) Mumbai&lt;/p&gt;
&lt;p&gt;(2295412) Pune&lt;/p&gt;
&lt;p&gt;(2295414) Hyderabad&lt;/p&gt;
&lt;p&gt;(2295420) Bangalore&lt;/p&gt;
&lt;p&gt;(2295424) Chennai&lt;/p&gt;
&lt;p&gt;(2343678) Adana&lt;/p&gt;
&lt;p&gt;(2343732) Ankara&lt;/p&gt;
&lt;p&gt;(2343843) Bursa&lt;/p&gt;
&lt;p&gt;(2344116) Istanbul&lt;/p&gt;
&lt;p&gt;(2344117) Izmir&lt;/p&gt;
&lt;p&gt;(2345896) Okinawa&lt;/p&gt;
&lt;p&gt;(2345975) Daejeon&lt;/p&gt;
&lt;p&gt;(2357024) Atlanta&lt;/p&gt;
&lt;p&gt;(2357536) Austin&lt;/p&gt;
&lt;p&gt;(2358820) Baltimore&lt;/p&gt;
&lt;p&gt;(2359991) Baton Rouge&lt;/p&gt;
&lt;p&gt;(2364559) Birmingham&lt;/p&gt;
&lt;p&gt;(2367105) Boston&lt;/p&gt;
&lt;p&gt;(2378426) Charlotte&lt;/p&gt;
&lt;p&gt;(2379574) Chicago&lt;/p&gt;
&lt;p&gt;(2380358) Cincinnati&lt;/p&gt;
&lt;p&gt;(2381475) Cleveland&lt;/p&gt;
&lt;p&gt;(2383660) Columbus&lt;/p&gt;
&lt;p&gt;(2388929) Dallas-Ft. Worth&lt;/p&gt;
&lt;p&gt;(2391279) Denver&lt;/p&gt;
&lt;p&gt;(2391585) Detroit&lt;/p&gt;
&lt;p&gt;(2414469) Greensboro&lt;/p&gt;
&lt;p&gt;(2418046) Harrisburg&lt;/p&gt;
&lt;p&gt;(2424766) Houston&lt;/p&gt;
&lt;p&gt;(2427032) Indianapolis&lt;/p&gt;
&lt;p&gt;(2428184) Jackson&lt;/p&gt;
&lt;p&gt;(2436704) Las Vegas&lt;/p&gt;
&lt;p&gt;(2442047) Los Angeles&lt;/p&gt;
&lt;p&gt;(2449323) Memphis&lt;/p&gt;
&lt;p&gt;(2450022) Miami&lt;/p&gt;
&lt;p&gt;(2451822) Milwaukee&lt;/p&gt;
&lt;p&gt;(2452078) Minneapolis&lt;/p&gt;
&lt;p&gt;(2457170) Nashville&lt;/p&gt;
&lt;p&gt;(2458410) New Haven&lt;/p&gt;
&lt;p&gt;(2458833) New Orleans&lt;/p&gt;
&lt;p&gt;(2459115) New York&lt;/p&gt;
&lt;p&gt;(2460389) Norfolk&lt;/p&gt;
&lt;p&gt;(2466256) Orlando&lt;/p&gt;
&lt;p&gt;(2471217) Philadelphia&lt;/p&gt;
&lt;p&gt;(2471390) Phoenix&lt;/p&gt;
&lt;p&gt;(2473224) Pittsburgh&lt;/p&gt;
&lt;p&gt;(2475687) Portland&lt;/p&gt;
&lt;p&gt;(2477058) Providence&lt;/p&gt;
&lt;p&gt;(2478307) Raleigh&lt;/p&gt;
&lt;p&gt;(2480894) Richmond&lt;/p&gt;
&lt;p&gt;(2486340) Sacramento&lt;/p&gt;
&lt;p&gt;(2486982) St. Louis&lt;/p&gt;
&lt;p&gt;(2487610) Salt Lake City&lt;/p&gt;
&lt;p&gt;(2487796) San Antonio&lt;/p&gt;
&lt;p&gt;(2487889) San Diego&lt;/p&gt;
&lt;p&gt;(2487956) San Francisco&lt;/p&gt;
&lt;p&gt;(2490383) Seattle&lt;/p&gt;
&lt;p&gt;(2503713) Tallahassee&lt;/p&gt;
&lt;p&gt;(2503863) Tampa&lt;/p&gt;
&lt;p&gt;(2514815) Washington&lt;/p&gt;
&lt;p&gt;(15015370) Osaka&lt;/p&gt;
&lt;p&gt;(15015372) Kyoto&lt;/p&gt;
&lt;p&gt;(20070458) Delhi&lt;/p&gt;
&lt;p&gt;(23424738) United Arab Emirates&lt;/p&gt;
&lt;p&gt;(23424747) Argentina&lt;/p&gt;
&lt;p&gt;(23424748) Australia&lt;/p&gt;
&lt;p&gt;(23424768) Brazil&lt;/p&gt;
&lt;p&gt;(23424775) Canada&lt;/p&gt;
&lt;p&gt;(23424782) Chile&lt;/p&gt;
&lt;p&gt;(23424787) Colombia&lt;/p&gt;
&lt;p&gt;(23424800) Dominican Republic&lt;/p&gt;
&lt;p&gt;(23424801) Ecuador&lt;/p&gt;
&lt;p&gt;(23424803) Ireland&lt;/p&gt;
&lt;p&gt;(23424819) France&lt;/p&gt;
&lt;p&gt;(23424829) Germany&lt;/p&gt;
&lt;p&gt;(23424834) Guatemala&lt;/p&gt;
&lt;p&gt;(23424846) Indonesia&lt;/p&gt;
&lt;p&gt;(23424848) India&lt;/p&gt;
&lt;p&gt;(23424853) Italy&lt;/p&gt;
&lt;p&gt;(23424856) Japan&lt;/p&gt;
&lt;p&gt;(23424868) Korea&lt;/p&gt;
&lt;p&gt;(23424900) Mexico&lt;/p&gt;
&lt;p&gt;(23424901) Malaysia&lt;/p&gt;
&lt;p&gt;(23424908) Nigeria&lt;/p&gt;
&lt;p&gt;(23424909) Netherlands&lt;/p&gt;
&lt;p&gt;(23424916) New Zealand&lt;/p&gt;
&lt;p&gt;(23424919) Peru&lt;/p&gt;
&lt;p&gt;(23424922) Pakistan&lt;/p&gt;
&lt;p&gt;(23424934) Philippines&lt;/p&gt;
&lt;p&gt;(23424936) Russia&lt;/p&gt;
&lt;p&gt;(23424942) South Africa&lt;/p&gt;
&lt;p&gt;(23424948) Singapore&lt;/p&gt;
&lt;p&gt;(23424950) Spain&lt;/p&gt;
&lt;p&gt;(23424954) Sweden&lt;/p&gt;
&lt;p&gt;(23424969) Turkey&lt;/p&gt;
&lt;p&gt;(23424975) United Kingdom&lt;/p&gt;
&lt;p&gt;(23424977) United States&lt;/p&gt;
&lt;p&gt;(23424982) Venezuela&lt;/p&gt;
&lt;p&gt;(56013632) Petaling&lt;/p&gt;
&lt;p&gt;(56013645) Hulu Langat
```&lt;/p&gt;
&lt;p&gt;EL ID 1 es para listar los trending topics  mundial, para Venezuela se tiene el ID 23424982, se resalta en negrita los IDs de las ciudades de Venezuela. &lt;/p&gt;
&lt;p&gt;Ahora se va a desplegar la lista de trending topic global(1): 
Se define el valor 1 a WOE_ID para capturar el trending topic global, se instancia la clase Twitter con el dominio api.twitter.com y se define la versi&amp;oacute;n del api como la versi&amp;oacute;n 1. A continuaci&amp;oacute;n se captura los trending topic, se muestra los 10 t&amp;oacute;picos del mundo.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;WORLD_WOE_ID = 1&lt;/p&gt;
&lt;p&gt;twitter_api = twitter.Twitter(domain="api.twitter.com", api_version='1')&lt;/p&gt;
&lt;p&gt;world_trends = twitter_api.trends._(WORLD_WOE_ID)&lt;/p&gt;
&lt;p&gt;trends = world_trends()&lt;/p&gt;
&lt;p&gt;for i in range(10):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;...     print trends[0]['trends'][i][u'name']&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;h1 id="ilovecheese"&gt;ILoveCheese&lt;/h1&gt;
&lt;h1 id="caprilesvenezuelayelmundoestacontigo"&gt;CaprilesVenezuelayELMUNDOest&amp;aacute;contigo&lt;/h1&gt;
&lt;h1 id="mimamadice"&gt;MiMam&amp;aacute;Dice&lt;/h1&gt;
&lt;h1 id="vamosmaravilla"&gt;VamosMaravilla&lt;/h1&gt;
&lt;h1 id="ajuiciocaprilesasesino"&gt;AJuicioCaprilesAsesino&lt;/h1&gt;
&lt;p&gt;Sara McMann&lt;/p&gt;
&lt;p&gt;Rene de Calle 13&lt;/p&gt;
&lt;p&gt;Sheila Gaff&lt;/p&gt;
&lt;p&gt;RDMA&lt;/p&gt;
&lt;p&gt;Rene&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Al cambiar el valor de la variable WORLD_WOE_ID a la de Venezuela (23424982) se tiene:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;WORLD_WOE_ID = 23424982&lt;/p&gt;
&lt;p&gt;twitter_api = twitter.Twitter(domain="api.twitter.com", api_version='1')&lt;/p&gt;
&lt;p&gt;world_trends = twitter_api.trends._(WORLD_WOE_ID)&lt;/p&gt;
&lt;p&gt;trends = world_trends()&lt;/p&gt;
&lt;p&gt;for i in range(10):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;...     print trends[0]['trends'][i][u'name']&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;h1 id="caprilesvenezuelayelmundoestacontigo_1"&gt;CaprilesVenezuelayELMUNDOest&amp;aacute;contigo&lt;/h1&gt;
&lt;h1 id="ajuiciocaprilesasesino_1"&gt;AJuicioCaprilesAsesino&lt;/h1&gt;
&lt;h1 id="mimamadice_1"&gt;MiMam&amp;aacute;Dice&lt;/h1&gt;
&lt;h1 id="mearrechocuando"&gt;MeArrechoCuando&lt;/h1&gt;
&lt;h1 id="quevivan"&gt;QueVivan&lt;/h1&gt;
&lt;p&gt;Feliz D&amp;iacute;a del Dise&amp;ntilde;ador Gr&amp;aacute;fico&lt;/p&gt;
&lt;p&gt;Estuvimos 5&lt;/p&gt;
&lt;p&gt;Dayana Mendoza&lt;/p&gt;
&lt;p&gt;Omar Borkan Al Gala&lt;/p&gt;
&lt;p&gt;Antonio Rivero&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Para el caso de Valencia (395272):&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;WORLD_WOE_ID = 395272&lt;/p&gt;
&lt;p&gt;twitter_api = twitter.Twitter(domain="api.twitter.com", api_version='1')&lt;/p&gt;
&lt;p&gt;world_trends = twitter_api.trends._(WORLD_WOE_ID)&lt;/p&gt;
&lt;p&gt;trends = world_trends()&lt;/p&gt;
&lt;p&gt;for i in range(10):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;...     print trends[0]['trends'][i][u'name']&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;h1 id="caprilesvenezuelayelmundoestacontigo_2"&gt;CaprilesVenezuelayELMUNDOest&amp;aacute;contigo&lt;/h1&gt;
&lt;h1 id="ajuiciocaprilesasesino_2"&gt;AJuicioCaprilesAsesino&lt;/h1&gt;
&lt;h1 id="mearrechocuando_1"&gt;MeArrechoCuando&lt;/h1&gt;
&lt;h1 id="mimamadice_2"&gt;MiMam&amp;aacute;Dice&lt;/h1&gt;
&lt;p&gt;Omar Borkan Al Gala&lt;/p&gt;
&lt;h1 id="tropa"&gt;TROPA&lt;/h1&gt;
&lt;p&gt;Feliz D&amp;iacute;a del Dise&amp;ntilde;ador Gr&amp;aacute;fico&lt;/p&gt;
&lt;p&gt;Estuvimos 5&lt;/p&gt;
&lt;p&gt;Dayana Mendoza&lt;/p&gt;
&lt;p&gt;Antonio Rivero&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;De esta forma se puede listar los 10 t&amp;oacute;picos  seg&amp;uacute;n el Pa&amp;iacute;s o ciudad utilizando Python. &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Python"></category><category term="Twitter"></category></entry><entry><title>Descubrir equipos en una Red Local con Python (ipcalc y scapy).</title><link href="https://ecrespo.github.io/descubrir-equipos-en-una-red-local-con-python-ipcalc-y-scapy.html" rel="alternate"></link><published>2013-04-22T09:00:00-05:30</published><updated>2013-04-22T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-04-22:/descubrir-equipos-en-una-red-local-con-python-ipcalc-y-scapy.html</id><summary type="html">&lt;p&gt;Si se tiene una red con asignaci&amp;oacute;n abierta de IPs, la administraci&amp;oacute;n se hace algo complicada, as&amp;iacute; que se necesita tener un registro de la asignaci&amp;oacute;n de IPs a los equipos de la red local.&lt;/p&gt;
&lt;p&gt;Una amiga administradora hizo un registro con una herramienta propietaria en Windows. Record&amp;eacute; la librer&amp;iacute;a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Si se tiene una red con asignaci&amp;oacute;n abierta de IPs, la administraci&amp;oacute;n se hace algo complicada, as&amp;iacute; que se necesita tener un registro de la asignaci&amp;oacute;n de IPs a los equipos de la red local.&lt;/p&gt;
&lt;p&gt;Una amiga administradora hizo un registro con una herramienta propietaria en Windows. Record&amp;eacute; la librer&amp;iacute;a de python ipcalc que facilita el c&amp;aacute;lculo de direcciones IP y redes (un art&amp;iacute;culo de su uso &lt;a href="https://scapy.readthedocs.io/en/latest/#about-scapy"&gt;ac&amp;aacute;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Adem&amp;aacute;s existe la librer&amp;iacute;a o herramienta scapy, el cual permite capturar y modificar paquetes de red (la documentaci&amp;oacute;n se puede revisar en el siguiente &lt;a href="https://scapy.readthedocs.io/en/latest/#about-scapy"&gt;enlace&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Una alternativa es usar los comandos ping y arp por medio de python con el m&amp;oacute;dulo commands; es preferible usar scapy que permite descubrir la direcci&amp;oacute;n MAC de los equipos que tienen asignado las IPs.&lt;/p&gt;
&lt;p&gt;As&amp;iacute; que por un lado se usa ipcalc para definir el rango de la red seg&amp;uacute;n la mascara y luego con scapy se descubre las direcciones MAC.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo que devuelve la direcci&amp;oacute;n MAC de cada IP utilizada en la red:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa los modulos necesarios."&gt;Se importa los modulos necesarios.&lt;/h1&gt;
&lt;p&gt;from ipcalc import IP, Network&lt;/p&gt;
&lt;p&gt;from scapy.all import srp,Ether,ARP,conf&lt;/p&gt;
&lt;h1 id="se desactiva el verbose de la captura y envio de paquetes."&gt;Se desactiva el verbose de la captura y envio de paquetes.&lt;/h1&gt;
&lt;p&gt;conf.verb=0&lt;/p&gt;
&lt;h1 id="se genera un ciclo con el rango de ips dando la red y la mascara"&gt;Se genera un ciclo con el rango de IPs dando la RED y la mascara&lt;/h1&gt;
&lt;p&gt;for ip in Network('192.168.12.128/25'):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se realiza un broadcast de MAC pasando cada IP el cual devuelve la

#direccion MAC de la IP consultada.

ans,unans=srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=str(ip)),timeout=2)

for snd,rcv in ans:

    #Se muestra en pantalla la direccion MAC y la direccion IP

    print rcv.sprintf(r"%Ether.src% y %ARP.psrc%")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Al ejecutar el programa se tiene lo siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;ernesto@jewel:~/bin/python$ sudo ./descubrir.py&lt;/p&gt;
&lt;p&gt;WARNING: No route found for IPv6 destination :: (no default route?)&lt;/p&gt;
&lt;p&gt;00:26:35:c6:93:0d y 192.168.12.130&lt;/p&gt;
&lt;p&gt;00:2e:0b:c5:70:3c y 192.168.12.132&lt;/p&gt;
&lt;p&gt;00:2e:90:c2:ec:51 y 192.168.12.134&lt;/p&gt;
&lt;p&gt;00:50:ca:c1:71:8a y 192.168.12.136&lt;/p&gt;
&lt;p&gt;00:32:57:ce:81:e7 y 192.168.12.138&lt;/p&gt;
&lt;p&gt;00:2e:90:c4:58:7c y 192.168.12.139&lt;/p&gt;
&lt;p&gt;00:2c:25:ce:ae:be y 192.168.12.140&lt;/p&gt;
&lt;p&gt;d0:37:88:c4:11:ed y 192.168.12.141&lt;/p&gt;
&lt;p&gt;00:2e:90:cc:f5:16 y 192.168.12.142&lt;/p&gt;
&lt;p&gt;00:2c:c4:c4:26:28 y 192.168.12.148&lt;/p&gt;
&lt;p&gt;40:7a:ab:ce:11:c0 y 192.168.12.150&lt;/p&gt;
&lt;p&gt;3c:53:8e:cc:4d:89 y 192.168.12.161&lt;/p&gt;
&lt;p&gt;1c:5b:d6:c9:6d:a9 y 192.168.12.169&lt;/p&gt;
&lt;p&gt;00:2e:7f:c4:8d:d7 y 192.168.12.170&lt;/p&gt;
&lt;p&gt;00:24:c2:c8:23:8d y 192.168.12.172&lt;/p&gt;
&lt;p&gt;68:19:ed:c75:44:31 y 192.168.12.174&lt;/p&gt;
&lt;p&gt;74:3f:68:c2:91:d6 y 192.168.12.196&lt;/p&gt;
&lt;p&gt;00:30:aa:c2:6d:3c y 192.168.12.201&lt;/p&gt;
&lt;p&gt;c8:3c:dc:c8:a9:53 y 192.168.12.208&lt;/p&gt;
&lt;p&gt;00:34:f2:c5:2f:21 y 192.168.12.211&lt;/p&gt;
&lt;p&gt;00:34:f2:cc:2e:d0 y 192.168.12.212&lt;/p&gt;
&lt;p&gt;00:34:f2:c5:35:70 y 192.168.12.214&lt;/p&gt;
&lt;p&gt;00:34:f2:c3:1a:ee y 192.168.12.215&lt;/p&gt;
&lt;p&gt;00:34:f2:c3:1b:4c y 192.168.12.216&lt;/p&gt;
&lt;p&gt;00:34:f2:c5:33:49 y 192.168.12.224&lt;/p&gt;
&lt;p&gt;00:3c:02:c6:b5:3f y 192.168.12.225&lt;/p&gt;
&lt;p&gt;00:3e:90:c8:bb:d6 y 192.168.12.251
```&lt;/p&gt;
&lt;p&gt;As&amp;iacute; pues desde Linux y con Python se puede capturar la informaci&amp;oacute;n de las direcciones MAC de las IPs asignadas con pocas l&amp;iacute;neas de c&amp;oacute;digo.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="scapy"></category><category term="ipcalc"></category></entry><entry><title>Resolución de sistemas de ecuaciones lineales por descomposión QR usando Numpy</title><link href="https://ecrespo.github.io/resolucion-de-sistemas-de-ecuaciones-lineales-por-descomposion-qr-usando-numpy.html" rel="alternate"></link><published>2013-02-21T09:00:00-05:30</published><updated>2013-02-21T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-21:/resolucion-de-sistemas-de-ecuaciones-lineales-por-descomposion-qr-usando-numpy.html</id><summary type="html">&lt;p&gt;En Diciembre se  public&amp;oacute; un &lt;a href="https://www.seraph.to/resolucion-de-sistemas-de-ecuaciones-con-numpy.html"&gt;art&amp;iacute;culo&lt;/a&gt; donde se explica como resolver sistemas de ecuaciones.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa de un art&amp;iacute;culo en Ingl&amp;eacute;s &lt;a href="glowingpython.blogspot.com/2011/05/qr-decomposition-with-numpy.html"&gt;QR descomposition with numpy &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si se desea averiguar m&amp;aacute;s sobre la descomposici&amp;oacute;n QR se puede consultar a la p&amp;aacute;gina de &lt;a href="es.wikipedia.org/wiki/Descomposici%C3%B3n_QR"&gt;wikipedia&lt;/a&gt; &amp;oacute; de la siguiente &lt;a href="rkb.home.cern.ch/rkb/AN16pp/node224.html#SECTION0002240000000000000000"&gt;p&amp;aacute;gina&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Las …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En Diciembre se  public&amp;oacute; un &lt;a href="https://www.seraph.to/resolucion-de-sistemas-de-ecuaciones-con-numpy.html"&gt;art&amp;iacute;culo&lt;/a&gt; donde se explica como resolver sistemas de ecuaciones.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa de un art&amp;iacute;culo en Ingl&amp;eacute;s &lt;a href="glowingpython.blogspot.com/2011/05/qr-decomposition-with-numpy.html"&gt;QR descomposition with numpy &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si se desea averiguar m&amp;aacute;s sobre la descomposici&amp;oacute;n QR se puede consultar a la p&amp;aacute;gina de &lt;a href="es.wikipedia.org/wiki/Descomposici%C3%B3n_QR"&gt;wikipedia&lt;/a&gt; &amp;oacute; de la siguiente &lt;a href="rkb.home.cern.ch/rkb/AN16pp/node224.html#SECTION0002240000000000000000"&gt;p&amp;aacute;gina&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Las ecuaciones que se usaron son:
&lt;code&gt;3x+9y-10z  =   24
x-6y+4z      =   -4
10x-2y+8z  =  20&lt;/code&gt;
Donde &lt;code&gt;Ax = b.&lt;/code&gt;
&lt;code&gt;A = [[3 9 -10][1 -6 4][10 -2 8]] y
B  = [[24][-4[[20]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;from numpy import *&lt;/p&gt;
&lt;h1 id="se define los valores de la matriz a"&gt;Se define los valores de la matriz A&lt;/h1&gt;
&lt;p&gt;A = array([[3,9,-10],[1,-6,4],[10,-2,8]])&lt;/p&gt;
&lt;p&gt;Q,R = linalg.qr(A) # qr decomposition of A&lt;/p&gt;
&lt;h1 id="se definen los valores de la matriz b"&gt;Se definen los valores de la matriz B&lt;/h1&gt;
&lt;p&gt;b = array([[24],[-4],[20]])&lt;/p&gt;
&lt;h1 id="resolver ax=b usando la funcion estandar numpy"&gt;resolver Ax=b usando la funcion estandar numpy&lt;/h1&gt;
&lt;p&gt;x = linalg.solve(A,b)&lt;/p&gt;
&lt;h1 id="resolver ax = b usando q y r."&gt;resolver Ax = b usando Q y R.&lt;/h1&gt;
&lt;p&gt;y = dot(Q.T,b)
xQR = linalg.solve(R,y) &lt;/p&gt;
&lt;p&gt;print "\nComparacion de Soluciones:"
print x.T,'Ax=b'
print xQR.T,'Rx=y'
```
Al ejecutar el script se tiene lo siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
python qr.py&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Comparacion de Soluciones:
```python
[[ 2.99029126  0.40776699 -1.13592233]] Ax=b&lt;/p&gt;
&lt;p&gt;[[ 2.99029126  0.40776699 -1.13592233]] Rx=y
```&lt;/p&gt;
&lt;p&gt;Como se puede ver, la soluci&amp;oacute;n usando la funci&amp;oacute;n est&amp;aacute;ndar de numpy y por la descomposici&amp;oacute;n QR generan el mismo resultado.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="numpy"></category><category term="Python"></category></entry><entry><title>Creación de gráfico de burbujas con matplotlib</title><link href="https://ecrespo.github.io/creacion-de-grafico-de-burbujas-con-matplotlib.html" rel="alternate"></link><published>2013-02-20T09:00:00-05:30</published><updated>2013-02-20T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-20:/creacion-de-grafico-de-burbujas-con-matplotlib.html</id><summary type="html">&lt;p&gt;Los gr&amp;aacute;ficos de burbuja presentan los datos como una serie de burbujas, el tama&amp;ntilde;o de las cuales es proporcional a la cantidad de datos. &lt;/p&gt;
&lt;p&gt;Un gr&amp;aacute;fico de este tipo resulta muy efectivo para mostrar el n&amp;uacute;mero de productos vendidos en cierta regi&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Existe una herramienta que se llama Trendalyzer  desarrollada …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Los gr&amp;aacute;ficos de burbuja presentan los datos como una serie de burbujas, el tama&amp;ntilde;o de las cuales es proporcional a la cantidad de datos. &lt;/p&gt;
&lt;p&gt;Un gr&amp;aacute;fico de este tipo resulta muy efectivo para mostrar el n&amp;uacute;mero de productos vendidos en cierta regi&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Existe una herramienta que se llama Trendalyzer  desarrollada por la Fundaci&amp;oacute;n Gapminder, est&amp;aacute; herramienta permite convertir series de estad&amp;iacute;sticas en gr&amp;aacute;ficos interactivos. &lt;/p&gt;
&lt;p&gt;Es &lt;a href="https://es.wikipedia.org/wiki/Hans_Rosling"&gt;Hans Rosling&lt;/a&gt;  uno de los fundadores de Gapminder quien ha mostrado el potencial de la herramienta.
El siguiente v&amp;iacute;deo es una demostraci&amp;oacute;n de la herramienta:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/-C-hXn2RY3M"&gt;https://youtu.be/-C-hXn2RY3M&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Con matplotlib en Python tambi&amp;eacute;n se pueden crear gr&amp;aacute;ficas de burbuja, el art&amp;iacute;culo se basa en un art&amp;iacute;culo en Ingl&amp;eacute;s llamado "&lt;a href="glowingpython.blogspot.com/2011/11/how-to-make-bubble-charts-with.html"&gt;How to make Bubble charts with matplotlib&lt;/a&gt; ". &lt;/p&gt;
&lt;p&gt;Los datos se obtendr&amp;aacute;n de un archivo csv, estos datos son de estad&amp;iacute;stica del crimen en los Estados Unidos por estado del a&amp;ntilde;o 2005. El archivo csv se puede bajar &lt;a href="datasets.flowingdata.com/crimeRatesByState2005.csv"&gt;aqu&amp;iacute;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;La informaci&amp;oacute;n en el archivo csv se tiene de la siguiente forma (se muestra las primeras l&amp;iacute;neas del archivo):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;state,murder,forcible_rape,robbery,aggravated_assault,burglary,larceny_theft,motor_vehicle_theft,population
United States,5.6,31.7,140.7,291.1,726.7,2286.3,416.7,295753151
Alabama,8.2,34.3,141.4,247.8,953.8,2650,288.3,4545049
Alaska,4.8,81.1,80.9,465.1,622.5,2599.1,391,669488
Arizona,7.5,33.8,144.4,327.4,948.4,2965.2,924.4,5974834
Arkansas,6.7,42.9,91.1,386.8,1084.6,2711.2,262.1,2776221
California,6.9,26,176.1,317.3,693.3,1916.5,712.8,35795255&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Como se ve la primera l&amp;iacute;nea se tiene el t&amp;iacute;tulo de cada columna, en la segunda l&amp;iacute;nea se tiene la informaci&amp;oacute;n total de Estados Unidos y luego se muestra la informaci&amp;oacute;n por Estado.&lt;/p&gt;
&lt;p&gt;Para efectos de programaci&amp;oacute;n la primera y segunda l&amp;iacute;nea no son relevantes para la gr&amp;aacute;fica de burbuja.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo del programa:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;from pylab import *
from scipy import *&lt;/p&gt;
&lt;h1 id="leer los datos desde el archivo csv"&gt;Leer los datos desde el archivo csv&lt;/h1&gt;
&lt;h1 id="archivo original"&gt;Archivo original&lt;/h1&gt;
&lt;h1 id="durl = 'http://datasets.flowingdata.com/crimeratesbystate2005.csv'"&gt;durl = 'http://datasets.flowingdata.com/crimeRatesByState2005.csv'&lt;/h1&gt;
&lt;h1 id="archivo modificado."&gt;Archivo modificado.&lt;/h1&gt;
&lt;p&gt;durl = 'http://127.0.0.1/descargas/crimeRatesByState2005-es.csv'&lt;/p&gt;
&lt;h1 id="se captura los datos del archivo csv."&gt;Se captura los datos del archivo csv.&lt;/h1&gt;
&lt;p&gt;rdata = genfromtxt(durl,dtype='S8,f,f,f,f,f,f,f,i',delimiter=',')&lt;/p&gt;
&lt;p&gt;rdata[0] = zeros(8) # se elimina los titulos 
rdata[1] = zeros(8) # se elimina la estadistica total de estados unidos (2da linea)
x = []
y = []
color = []
area = []&lt;/p&gt;
&lt;h1 id="se captura los datos de cada fila"&gt;Se captura los datos de cada fila&lt;/h1&gt;
&lt;p&gt;for data in rdata:
    x.append(data[1]) # asesinatos
    y.append(data[5]) # robo
    color.append(data[6]) # hurtos
    area.append(sqrt(data[8])) # poblacion
    # graficando las primeras 8 letras del nombre del estado
    text(data[1], data[5],data[0],size=11,horizontalalignment='center')&lt;/p&gt;
&lt;h1 id="se crea la grafica"&gt;se crea la grafica&lt;/h1&gt;
&lt;p&gt;sct = scatter(x, y, c=color, s=area, linewidths=2, edgecolor='w')
sct.set_alpha(0.75)&lt;/p&gt;
&lt;h1 id="se define los ejes"&gt;Se define los ejes&lt;/h1&gt;
&lt;p&gt;axis([0,11,200,1280])&lt;/p&gt;
&lt;h1 id="las etiquetas de cada eje"&gt;Las etiquetas de cada eje&lt;/h1&gt;
&lt;p&gt;xlabel('Asesinatos por cada 100.000 habitantes')
ylabel('Robos por cada 100.000 habitantes')
show()
```&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado de la ejecuci&amp;oacute;n del programa:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegraficodeburbujasconmatplotlib.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="matplotlib"></category><category term="Python"></category><category term="pylab"></category><category term="scipy"></category></entry><entry><title>Manejar información de un archivo csv con csvkit</title><link href="https://ecrespo.github.io/manejar-informacion-de-un-archivo-csv-con-csvkit.html" rel="alternate"></link><published>2013-02-19T10:00:00-05:30</published><updated>2013-02-19T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-19:/manejar-informacion-de-un-archivo-csv-con-csvkit.html</id><summary type="html">&lt;p&gt;El programa &lt;code&gt;csvkit&lt;/code&gt; es una herramienta desarrollada en Python que facilita la manipulaci&amp;oacute;n de la informaci&amp;oacute;n contenida en un archivo con formato &lt;code&gt;csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute; como ejemplo los datos de la p&amp;aacute;gina data.gov. Los datos que se utilizar&amp;aacute; son del Departamento de Asuntos de Veteranos de beneficios educativos de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El programa &lt;code&gt;csvkit&lt;/code&gt; es una herramienta desarrollada en Python que facilita la manipulaci&amp;oacute;n de la informaci&amp;oacute;n contenida en un archivo con formato &lt;code&gt;csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se utilizar&amp;aacute; como ejemplo los datos de la p&amp;aacute;gina data.gov. Los datos que se utilizar&amp;aacute; son del Departamento de Asuntos de Veteranos de beneficios educativos de los Estatos Unidos (disculpen la traducci&amp;oacute;n) del a&amp;ntilde;o 2009.&lt;/p&gt;
&lt;p&gt;Es necesario instalar &lt;code&gt;csvkit&lt;/code&gt;, en este caso se usa el comando &lt;code&gt;pip&lt;/code&gt; de python:&lt;br/&gt;
&lt;code&gt;python
pip install csvkit&lt;/code&gt;
Obtener los datos:
```
mkdir beneficios&lt;/p&gt;
&lt;p&gt;cd beneficios 
&lt;code&gt;Bajar archivo `2009.csv` con el comando `wget`:&lt;/code&gt;
wget -O 2009.csv -U "Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/534.16 (JHTML, like Gecko) chrome/10.0.648.205 Safari/534.16" http://www.data.gob/download/4029/csv 
&lt;code&gt;Verificar las primeras 5 l&amp;iacute;neas del archivo:&lt;/code&gt;
head -n 5 2009.csv &lt;/p&gt;
&lt;p&gt;State Name,State Abbreviate,Code,Montgomery GI Bill-Active Duty,Montgomery GI Bill- Selective Reserve,Dependents' Educational Assistance,Reserve Educational Assistance Program,Post-Vietnam Era Veteran's Educational Assistance Program,TOTAL,&lt;/p&gt;
&lt;p&gt;ALABAMA,AL,01,"6,718","1,728","2,703","1,269",8,"12,426",&lt;/p&gt;
&lt;p&gt;ALASKA,AK,02,776,154,166,60,2,"1,158",&lt;/p&gt;
&lt;p&gt;ARIZONA,AZ,04,"26,822","2,005","3,137","2,011",11,"33,986",&lt;/p&gt;
&lt;p&gt;ARKANSAS,AR,05,"2,061",988,"1,575",886,3,"5,513",
&lt;code&gt;``
Se puede usar el mismo comando&lt;/code&gt;wget` para bajar los archivos de los a&amp;ntilde;os 2010.csv, 2011.csv y 2012.csv.&lt;/p&gt;
&lt;p&gt;Obtener la informaci&amp;oacute;n de las columnas con &lt;code&gt;csvcut&lt;/code&gt;:
```
csvcut -n 2009.csv&lt;/p&gt;
&lt;p&gt;1: State Name&lt;/p&gt;
&lt;p&gt;2: State Abbreviate&lt;/p&gt;
&lt;p&gt;3: Code&lt;/p&gt;
&lt;p&gt;4: Montgomery GI Bill-Active Duty&lt;/p&gt;
&lt;p&gt;5: Montgomery GI Bill- Selective Reserve&lt;/p&gt;
&lt;p&gt;6: Dependents' Educational Assistance&lt;/p&gt;
&lt;p&gt;7: Reserve Educational Assistance Program&lt;/p&gt;
&lt;p&gt;8: Post-Vietnam Era Veteran's Educational Assistance Program&lt;/p&gt;
&lt;p&gt;9: TOTAL&lt;/p&gt;
&lt;p&gt;10: 
```&lt;/p&gt;
&lt;p&gt;Como se puede observar, el archivo &lt;code&gt;csv&lt;/code&gt; maneja 9 columnas. &lt;/p&gt;
&lt;p&gt;Con el comando &lt;code&gt;csvcut&lt;/code&gt; se puede obtener informaci&amp;oacute;n entre la fila 2 y 3 (State Abbreviate y Code), s&amp;oacute;lo se desea mostrar las primeras 5 l&amp;iacute;neas del archivo: 
```
csvcut -c 2,3 2009.csv | head -n 5&lt;/p&gt;
&lt;p&gt;State Abbreviate,Code
AL,01
AK,02
AZ,04
AR,05
```&lt;/p&gt;
&lt;p&gt;Se puede tambi&amp;eacute;n manejar estadisticas bajo demanda con &lt;code&gt;csvstat&lt;/code&gt;. Se genera la estadistica de la informaci&amp;oacute;n de las columnas 1,4,9 y 10. Para este caso se utiliza &lt;code&gt;csvcut&lt;/code&gt; y se pasa la informaci&amp;oacute;n a &lt;code&gt;csvstat&lt;/code&gt;:
```
csvcut -c 1,4,9,10 2009.csv | csvstat&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;State Name
    &lt;type 'unicode'=""&gt;
    Nulls: True
    Unique values: 52
    Max length: 17&lt;/type&gt;&lt;/li&gt;
&lt;li&gt;Montgomery GI Bill-Active Duty
    &lt;type 'int'=""&gt;
    Nulls: True
    Min: 435
    Max: 34942
    Sum: 325723
    Mean: 6263.90384615
    Median: 3548.0
    Standard Deviation: 7537.86225373
    Unique values: 52&lt;/type&gt;&lt;/li&gt;
&lt;li&gt;TOTAL
    &lt;type 'int'=""&gt;
    Nulls: True
    Min: 768
    Max: 46897
    Sum: 506914
    Mean: 9748.34615385
    Median: 6520.0
    Standard Deviation: 10070.4022127
    Unique values: 52&lt;/type&gt;&lt;/li&gt;
&lt;li&gt;_unnamed
    &lt;type 'nonetype'=""&gt;
    Nulls: True
    Values: 
```&lt;/type&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Se puede realizar busquedas por filas con &lt;code&gt;csvgrep&lt;/code&gt;. En este caso la informaci&amp;oacute;n total del Estado de Illinois:
```
csvcut -c 1,"TOTAL" 2009.csv | csvgrep -c 1 -m ILLINOIS&lt;/p&gt;
&lt;p&gt;State Name,TOTAL&lt;/p&gt;
&lt;p&gt;ILLINOIS,"21,964"
```&lt;/p&gt;
&lt;p&gt;Voltear orden de las columnas con &lt;code&gt;csvcut&lt;/code&gt;: 
```
csvcut -c 9,1 2009.csv | head -n 5&lt;/p&gt;
&lt;p&gt;TOTAL,State Name
"12,426",ALABAMA
"1,158",ALASKA
"33,986",ARIZONA
"5,513",ARKANSAS
```
En este caso se cambia el orden de las columnas al decirle a csvcut el orden de las columnas. &lt;/p&gt;
&lt;p&gt;Ordenar con &lt;code&gt;csvsort&lt;/code&gt;: 
```
csvcut -c 9,1 2009.csv | csvsort -r | head -n 5&lt;/p&gt;
&lt;p&gt;TOTAL,State Name
46897,CALIFORNIA
40402,TEXAS
36394,FLORIDA
33986,ARIZONA
&lt;code&gt;Se puede dar un formato para que sea legible la informaci&amp;oacute;n con `csvlook`:&lt;/code&gt;
csvcut -c 9,1 2009.csv | csvsort -r -l | csvlook&lt;/p&gt;
&lt;p&gt;|--------------+-------+--------------------|
|  line_number | TOTAL | State Name         |
|--------------+-------+--------------------|
|  1           | 46897 | CALIFORNIA         |
|  2           | 40402 | TEXAS              |
|  3           | 36394 | FLORIDA            |
|  4           | 33986 | ARIZONA            |
|  5           | 21964 | ILLINOIS           |
|  6           | 20541 | VIRGINIA           |
|  7           | 18236 | GEORGIA            |
|  8           | 15730 | NORTH CAROLINA     |
|  9           | 13967 | NEW YORK           |
|  10          | 13962 | MISSOURI           |
|  11          | 13614 | COLORADO           |
|  12          | 13314 | OHIO               |
|  13          | 13011 | PENNSYLVANIA       |
|  14          | 12426 | ALABAMA            |
|  15          | 11492 | WASHINGTON         |
|  16          | 10085 | MARYLAND           |
|  17          | 9791  | MINNESOTA          |
|  18          | 9344  | MICHIGAN           |
|  19          | 9206  | OKLAHOMA           |
|  20          | 9013  | IOWA               |
|  21          | 8840  | WEST VIRGINIA      |
|  22          | 8757  | TENNESSEE          |
|  23          | 8081  | WISCONSIN          |
|  24          | 7872  | SOUTH CAROLINA     |
|  25          | 7809  | INDIANA            |
|  26          | 6652  | LOUISIANA          |
|  27          | 6388  | KENTUCKY           |
|  28          | 6009  | MASSACHUSETTS      |
|  29          | 5870  | OREGON             |
|  30          | 5513  | ARKANSAS           |
|  31          | 5511  | NEW JERSEY         |
|  32          | 5416  | NEBRASKA           |
|  33          | 5345  | UTAH               |
|  34          | 4947  | KANSAS             |
|  35          | 4551  | NEW MEXICO         |
|  36          | 4424  | PUERTO RICO        |
|  37          | 4299  | MISSISSIPPI        |
|  38          | 3728  | NEVADA             |
|  39          | 2997  | CONNECTICUT        |
|  40          | 2751  | IDAHO              |
|  41          | 2521  | HAWAII             |
|  42          | 1992  | SOUTH DAKOTA       |
|  43          | 1920  | MAINE              |
|  44          | 1795  | MONTANA            |
|  45          | 1778  | NORTH DAKOTA       |
|  46          | 1326  | NEW HAMPSHIRE      |
|  47          | 1175  | RHODE ISLAND       |
|  48          | 1158  | ALASKA             |
|  49          | 1145  | DELAWARE           |
|  50          | 1117  | WYOMING            |
|  51          | 1084  | DIST. OF COLUMBIA  |
|  52          | 768   | VERMONT            |
|  53          |       |                    |
|--------------+-------+--------------------|
```&lt;/p&gt;
&lt;p&gt;Para finalizar se puede salvar el trabajo en un nuevo archivo csv:
&lt;code&gt;csvcut -c 9,1 2009.csv | csvsort -r -l &amp;gt; 2009_ranking.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Si se desea aprender m&amp;aacute;s de la herramienta &lt;code&gt;csvkit&lt;/code&gt; se puede revisar la p&amp;aacute;gina de la &lt;a href="https://csvkit.readthedocs.io/en/latest/index.html"&gt;documentaci&amp;oacute;n&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;En pr&amp;oacute;ximo art&amp;iacute;culo se mostrar&amp;aacute; como usar &lt;code&gt;csvkit&lt;/code&gt; desde un programa en Python.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Python"></category><category term="csv"></category><category term="csvkit"></category></entry><entry><title>Teorema de muestreo explicado con numpy</title><link href="https://ecrespo.github.io/teorema-de-muestreo-explicado-con-numpy.html" rel="alternate"></link><published>2013-02-19T10:00:00-05:30</published><updated>2013-02-19T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-19:/teorema-de-muestreo-explicado-con-numpy.html</id><summary type="html">&lt;p&gt;El teorema demuestra que la reconstrucci&amp;oacute;n exacta de una se&amp;ntilde;al peri&amp;oacute;dica continua en banda base a partir de sus muestras, es matem&amp;aacute;ticamente posible si la se&amp;ntilde;al est&amp;aacute; limitada en banda y la tasa de muestreo es superior al doble de su ancho de banda. 
En el art&amp;iacute;culo se mostrar&amp;aacute; una …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El teorema demuestra que la reconstrucci&amp;oacute;n exacta de una se&amp;ntilde;al peri&amp;oacute;dica continua en banda base a partir de sus muestras, es matem&amp;aacute;ticamente posible si la se&amp;ntilde;al est&amp;aacute; limitada en banda y la tasa de muestreo es superior al doble de su ancho de banda. 
En el art&amp;iacute;culo se mostrar&amp;aacute; una tasa de muestreo a diferentes frecuencias, desde el valor doble a la frecuencia base, luego a un valor menor.&lt;/p&gt;
&lt;p&gt;Algo m&amp;aacute;s de teor&amp;iacute;a:
El teorema de muestreo de una se&amp;ntilde;al continua que x (t) limitada en banda a B Hz pueden ser recuperados de sus muestras x [n] = x (n * T), donde n es un n&amp;uacute;mero entero, si T es mayor que o igual a 1 / (2B) sin p&amp;eacute;rdida de ninguna informaci&amp;oacute;n. Y llamamos 2B la tasa de Nyquist.&lt;/p&gt;
&lt;p&gt;El muestreo a una tasa inferior a la tasa de Nyquist se denomina submuestreo, se produce el efecto aliasing.&lt;/p&gt;
&lt;p&gt;Si se desea m&amp;aacute;s informaci&amp;oacute;n sobre el Teorema de Muestreo se puede consultar a &lt;a href="https://es.wikipedia.org/wiki/Teorema_de_muestreo_de_Nyquist-Shannon"&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en un art&amp;iacute;culo en Ingl&amp;eacute;s "&lt;a href="glowingpython.blogspot.com/2011/09/sampling-theorem-explained-with-numpy.html"&gt;The sampling theorem explained with numpy&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="de numpy se importa lo necesario para graficar la"&gt;De numpy se importa lo necesario para graficar la&lt;/h1&gt;
&lt;h1 id="funcion seno"&gt;funcion seno&lt;/h1&gt;
&lt;p&gt;from numpy import linspace,sin,cos,pi,ceil,floor,arange&lt;/p&gt;
&lt;h1 id="de pylab se importa plot, show y axis. lo necesario para crear"&gt;De pylab se importa plot, show y axis. Lo necesario para crear&lt;/h1&gt;
&lt;h1 id="la grafica"&gt;la grafica&lt;/h1&gt;
&lt;p&gt;from pylab import plot,show,axis&lt;/p&gt;
&lt;h1 id="muestreo de una seganl de ancho de banda 40 hz"&gt;Muestreo de una seganl de ancho de banda 40 hz&lt;/h1&gt;
&lt;h1 id="con velocidad de muestreo de 80 hz"&gt;con velocidad de muestreo de 80 Hz&lt;/h1&gt;
&lt;p&gt;f = 40;  # Hz&lt;/p&gt;
&lt;h1 id="tiempo minimo y maximo"&gt;Tiempo minimo y maximo&lt;/h1&gt;
&lt;p&gt;tmin = -0.3;&lt;/p&gt;
&lt;p&gt;tmax = 0.3;&lt;/p&gt;
&lt;h1 id="se define el tiempo de la segnal."&gt;Se define el tiempo de la segnal.&lt;/h1&gt;
&lt;p&gt;t = linspace(tmin, tmax, 400);&lt;/p&gt;
&lt;h1 id="se define la segnal de muestreo"&gt;Se define la segnal de muestreo&lt;/h1&gt;
&lt;p&gt;x = cos(2&lt;em&gt;pi&lt;/em&gt;t) + cos(2&lt;em&gt;pi&lt;/em&gt;f*t)&lt;/p&gt;
&lt;h1 id="se grafica el tiempo y la segnal."&gt;Se grafica el tiempo y la segnal.&lt;/h1&gt;
&lt;p&gt;plot(t, x)&lt;/p&gt;
&lt;h1 id="sampling the signal with a sampling rate of 80 hz"&gt;sampling the signal with a sampling rate of 80 Hz&lt;/h1&gt;
&lt;h1 id="in this case, we are using the nyquist rate."&gt;in this case, we are using the Nyquist rate.&lt;/h1&gt;
&lt;h1 id="muestreo de la segnal con una velocidad de muestreo de 80 hz."&gt;Muestreo de la segnal con una velocidad de muestreo de 80 Hz.&lt;/h1&gt;
&lt;h1 id="periodo de muestreo"&gt;Periodo de muestreo&lt;/h1&gt;
&lt;p&gt;T = 1/80.0;&lt;/p&gt;
&lt;h1 id="tiempo minimo"&gt;Tiempo minimo&lt;/h1&gt;
&lt;p&gt;nmin = ceil(tmin / T);&lt;/p&gt;
&lt;h1 id="tiempo maximo"&gt;Tiempo maximo&lt;/h1&gt;
&lt;p&gt;nmax = floor(tmax / T);&lt;/p&gt;
&lt;h1 id="tiempo de la segnal."&gt;Tiempo de la segnal.&lt;/h1&gt;
&lt;p&gt;n = arange(nmin,nmax);&lt;/p&gt;
&lt;h1 id="segnal a la velocidad de muestreo"&gt;Segnal a la velocidad de muestreo&lt;/h1&gt;
&lt;p&gt;x1 = cos(2&lt;em&gt;pi&lt;/em&gt;n&lt;em&gt;T) + cos(2&lt;/em&gt;pi&lt;em&gt;f&lt;/em&gt;n*T);&lt;/p&gt;
&lt;h1 id="se grafica la segnal."&gt;Se grafica la segnal.&lt;/h1&gt;
&lt;p&gt;plot(n*T, x1, 'bo')&lt;/p&gt;
&lt;h1 id="muestreo de la segnal con una velocidad de muestreo de 35hz."&gt;Muestreo de la segnal con una velocidad de muestreo de 35Hz.&lt;/h1&gt;
&lt;h1 id="note que 35hz esta por debajo de la velocidad de nyquist."&gt;Note que 35Hz esta por debajo de la velocidad de Nyquist.&lt;/h1&gt;
&lt;p&gt;T = 1/35.0;&lt;/p&gt;
&lt;p&gt;nmin = ceil(tmin / T);&lt;/p&gt;
&lt;p&gt;nmax = floor(tmax / T);&lt;/p&gt;
&lt;p&gt;n = arange(nmin,nmax);&lt;/p&gt;
&lt;p&gt;x2 = cos(2&lt;em&gt;pi&lt;/em&gt;n&lt;em&gt;T) + cos(2&lt;/em&gt;pi&lt;em&gt;f&lt;/em&gt;n*T);&lt;/p&gt;
&lt;p&gt;plot(n*T, x2, '-r.',markersize=15)&lt;/p&gt;
&lt;p&gt;axis([-0.3, 0.3, -1.5, 2.3])&lt;/p&gt;
&lt;p&gt;show()
```&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica generada es la siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/teoremademuestreoexplicadoconnumpy-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Con puntos azules se tiene el muestreo a 80Hz, con puntos rojos se tiene el muestreo a 35 Hz, se nota que el muestreo a 80 Hz es suficiente para capturar la oscilaci&amp;oacute;n de la se&amp;ntilde;al.&lt;/p&gt;
&lt;p&gt;En la siguiente gr&amp;aacute;fica se tiene un muestreo a 10 Hz que est&amp;aacute; por debajo de la frecuencia base de la se&amp;ntilde;al (40 Hz).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/teoremademuestreoexplicadoconnumpy-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ahora se muestra la frecuencia de muestreo a 20 Hz:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/teoremademuestreoexplicadoconnumpy-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Para terminar se muestra la frecuencia de muestreo a 30 Hz:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/teoremademuestreoexplicadoconnumpy-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Para terminar se muestra la gr&amp;aacute;fica a una frecuencia de muestreo de 320 Hz:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/teoremademuestreoexplicadoconnumpy-5.png"/&gt; &lt;/p&gt;
&lt;p&gt;Como puede notarse, mientras menor es la frecuencia de muestreo con respecto a la frecuencia base de la se&amp;ntilde;al no se puede generar la se&amp;ntilde;al original a partir de la muestra, mientras se va a aumentando la se&amp;ntilde;al hasta llegar a la frecuencia base, se nota que se tiene m&amp;aacute;s muestras para dicha recuperaci&amp;oacute;n pero sigue sin ser suficiente, es a partir del doble de la frecuencia base que la muestra puede ser generada.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="matplotlib"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Encontrar el mínimo de una función usando fmin de scipy</title><link href="https://ecrespo.github.io/encontrar-el-minimo-de-una-funcion-usando-fmin-de-scipy.html" rel="alternate"></link><published>2013-02-18T09:00:00-05:30</published><updated>2013-02-18T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-18:/encontrar-el-minimo-de-una-funcion-usando-fmin-de-scipy.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo muestra como se encuentra el valor m&amp;iacute;nimo de una funci&amp;oacute;n con la funci&amp;oacute;n fmin de &lt;code&gt;scipy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo es una versi&amp;oacute;n en Espa&amp;ntilde;ol del art&amp;iacute;culo en Ingl&amp;eacute;s "&lt;a href="https://glowingpython.blogspot.com/2011/04/how-to-find-minimum-of-function-using.html"&gt;How to find the minimum of a function using fmin from scipy&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo muestra como se encuentra el valor m&amp;iacute;nimo de una funci&amp;oacute;n con la funci&amp;oacute;n fmin de &lt;code&gt;scipy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo es una versi&amp;oacute;n en Espa&amp;ntilde;ol del art&amp;iacute;culo en Ingl&amp;eacute;s "&lt;a href="https://glowingpython.blogspot.com/2011/04/how-to-find-minimum-of-function-using.html"&gt;How to find the minimum of a function using fmin from scipy&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar numpy,pylab y la funcion fmin de scipy.optimize."&gt;Importar numpy,pylab y la funci&amp;oacute;n fmin de scipy.optimize.&lt;/h1&gt;
&lt;p&gt;import numpy&lt;/p&gt;
&lt;p&gt;import pylab&lt;/p&gt;
&lt;p&gt;from scipy.optimize import fmin&lt;/p&gt;
&lt;h1 id="se define la funcion a partir de lambda."&gt;Se define la funcion a partir de lambda.&lt;/h1&gt;
&lt;p&gt;rsinc = lambda x: -1 * numpy.sin(x)/x&lt;/p&gt;
&lt;h1 id="se define un valor x0 de -5."&gt;Se define un valor x0 de -5.&lt;/h1&gt;
&lt;p&gt;x0 = -5&lt;/p&gt;
&lt;h1 id="se calcula el valor minimo de la funcion en el punto x0"&gt;Se calcula el valor minimo de la funcion en el punto x0&lt;/h1&gt;
&lt;p&gt;xmin0 = fmin(rsinc,x0)&lt;/p&gt;
&lt;h1 id="se define el punto x1 con valor -4"&gt;Se define el punto x1 con valor -4&lt;/h1&gt;
&lt;p&gt;x1 = -4&lt;/p&gt;
&lt;h1 id="se calcula el valor minimo de la funcion en el punto x1"&gt;Se calcula el valor minimo de la funcion en el punto x1&lt;/h1&gt;
&lt;p&gt;xmin1 = fmin(rsinc,x1)&lt;/p&gt;
&lt;h1 id="se grafica la funcion."&gt;se grafica la funcion.&lt;/h1&gt;
&lt;p&gt;x = numpy.linspace(-15,15,100)&lt;/p&gt;
&lt;p&gt;y = rsinc(x)&lt;/p&gt;
&lt;p&gt;pylab.plot(x,y)&lt;/p&gt;
&lt;h1 id="se define el punto x0 en la grafica de la funcion"&gt;Se define el punto x0 en la grafica de la funcion&lt;/h1&gt;
&lt;p&gt;pylab.plot(x0,rsinc(x0),'bd',xmin0,rsinc(xmin0),'bo')&lt;/p&gt;
&lt;h1 id="se define el punto x1 en la grafica de la funcion"&gt;Se define el punto x1 en la grafica de la funcion&lt;/h1&gt;
&lt;p&gt;pylab.plot(x1,rsinc(x1),'rd',xmin1,rsinc(xmin1),'ro')&lt;/p&gt;
&lt;p&gt;pylab.axis([-15,15,-1.3,0.3])&lt;/p&gt;
&lt;p&gt;pylab.show()
```&lt;/p&gt;
&lt;p&gt;La figura a continuaci&amp;oacute;n muestra la gr&amp;aacute;fica de la funci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/encontrarelminimodeunafuncionusandofmindescipy.png"/&gt; &lt;/p&gt;
&lt;p&gt;El punto azul es el m&amp;iacute;nimo encontrado al inicio desde diamante azul  (x= -5), el punto rojo es el m&amp;iacute;nimo encontrado iniciando desde diamante rojo. Este punto es el m&amp;iacute;nimo global encontrado en la funci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Adem&amp;aacute;s de la gr&amp;aacute;fica se genera la siguiente salida que genera la funci&amp;oacute;n fmin:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Optimization terminated successfully.
         Current function value: -0.128375
         Iterations: 18
         Function evaluations: 36
Optimization terminated successfully.
         Current function value: -1.000000
         Iterations: 19
         Function evaluations: 38&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="matplotlib"></category><category term="pylab"></category><category term="python"></category></entry><entry><title>Graficar la intercepción de 2 funciones</title><link href="https://ecrespo.github.io/graficar-la-intercepcion-de-2-funciones.html" rel="alternate"></link><published>2013-02-15T09:00:00-05:30</published><updated>2013-02-15T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-15:/graficar-la-intercepcion-de-2-funciones.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se explica como encontrar la intercepci&amp;oacute;n de 2 funciones, en este caso una funci&amp;oacute;n senoidal con una cosenoidal.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo se basa en uno en Ingl&amp;eacute;s que se llama "&lt;a href="Graficar la intercepci&amp;oacute;n de 2 funciones"&gt;How to find the intersection of two functions&lt;/a&gt; ".&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica mostrar&amp;aacute; la intercepci&amp;oacute;n de las funciones sin(x …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se explica como encontrar la intercepci&amp;oacute;n de 2 funciones, en este caso una funci&amp;oacute;n senoidal con una cosenoidal.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo se basa en uno en Ingl&amp;eacute;s que se llama "&lt;a href="Graficar la intercepci&amp;oacute;n de 2 funciones"&gt;How to find the intersection of two functions&lt;/a&gt; ".&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica mostrar&amp;aacute; la intercepci&amp;oacute;n de las funciones sin(x) y cos(x) desde el valor inicial de x igual a cero. Se utilizar&amp;aacute; la funci&amp;oacute;n fsolve la cual devuelve la ra&amp;iacute;z de una ecuaci&amp;oacute;n (no lineal ) definida por func(x) = 0.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;from scipy.optimize import fsolve&lt;/p&gt;
&lt;h1 id="importar pylab"&gt;Importar pylab&lt;/h1&gt;
&lt;p&gt;import pylab&lt;/p&gt;
&lt;h1 id="importar numpy"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy&lt;/p&gt;
&lt;h1 id="se define la funcion que calcula la intercepcion"&gt;Se define la funcion que calcula la intercepcion&lt;/h1&gt;
&lt;h1 id="de 2 funciones."&gt;de 2 funciones.&lt;/h1&gt;
&lt;p&gt;def EncontrarIntercepcion(fun1,fun2,x0):
    #Se usa la funci&amp;oacute;n lambda de la diferencia de ambas funciones con&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#valor inicial x0
return fsolve(lambda x : fun1(x) - fun2(x),x0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#se calcula el resultado de la intercepcion de 2 funciones

#sin y cos con valor inicial de 0.

resultado = EncontrarInterseccion(numpy.sin,numpy.cos,0.0)

#se genera el rango de -2 a 2.

x = numpy.linspace(-2,2,50)

#Se genera la grafica,

pylab.plot(x,numpy.sin(x),x,numpy.cos(x),result,numpy.sin(result),'ro')

#se muestra la grafica.

pylab.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarlaintercepcionde2funciones.png"/&gt; &lt;/p&gt;
&lt;p&gt;La funci&amp;oacute;n seno se encuentra en color azul,la gr&amp;aacute;fica del coseno en color verde y la intercepci&amp;oacute;n es un punto de color rojo.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="numpy"></category><category term="Python"></category></entry><entry><title>Encontrar la raíz de una función con fsolve</title><link href="https://ecrespo.github.io/encontrar-la-raiz-de-una-funcion-con-fsolve.html" rel="alternate"></link><published>2013-02-14T10:00:00-05:30</published><updated>2013-02-14T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-14:/encontrar-la-raiz-de-una-funcion-con-fsolve.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo explica como calcular la ra&amp;iacute;z de una funci&amp;oacute;n utilizando la funci&amp;oacute;n &lt;code&gt;fsolve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo se basa en un art&amp;iacute;culo en Ingl&amp;eacute;s "&lt;a href="https://glowingpython.blogspot.com/2011/05/how-to-find-roots-of-function-with.html"&gt;How to find the rooots of a function with fsolve&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;La funci&amp;oacute;n fsolve retorna la ra&amp;iacute;ces de una ecuaci&amp;oacute;n no lineal definida por &lt;code&gt;f(x) = 0&lt;/code&gt;.
Para …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo explica como calcular la ra&amp;iacute;z de una funci&amp;oacute;n utilizando la funci&amp;oacute;n &lt;code&gt;fsolve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El art&amp;iacute;culo se basa en un art&amp;iacute;culo en Ingl&amp;eacute;s "&lt;a href="https://glowingpython.blogspot.com/2011/05/how-to-find-roots-of-function-with.html"&gt;How to find the rooots of a function with fsolve&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;La funci&amp;oacute;n fsolve retorna la ra&amp;iacute;ces de una ecuaci&amp;oacute;n no lineal definida por &lt;code&gt;f(x) = 0&lt;/code&gt;.
Para este caso se calcular&amp;aacute; la ra&amp;iacute;z de la funci&amp;oacute;n &lt;code&gt;f(x) = x^3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="import fsolve para calcular la raiz de la funcion x^3"&gt;Import fsolve para calcular la raiz de la funcion x^3&lt;/h1&gt;
&lt;p&gt;from scipy.optimize import fsolve&lt;/p&gt;
&lt;h1 id="importar pylab"&gt;Importar pylab&lt;/h1&gt;
&lt;p&gt;import pylab&lt;/p&gt;
&lt;h1 id="importar numpy"&gt;importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy&lt;/p&gt;
&lt;h1 id="se calcula la potencia 3 de x con la funcion lambda"&gt;se calcula la potencia 3 de x con la funcion lambda&lt;/h1&gt;
&lt;p&gt;potencia3 = lambda x : x**3&lt;/p&gt;
&lt;h1 id="se calcula la raiz de x^3 iniciando con x = 10"&gt;Se calcula la raiz de x^3 iniciando con x = 10&lt;/h1&gt;
&lt;p&gt;resultado = fsolve(potencia3,10) # starting from x = 10&lt;/p&gt;
&lt;p&gt;print resultado&lt;/p&gt;
&lt;h1 id="se define 400 valores de x entre -4 a 4"&gt;Se define 400 valores de x entre -4 a 4&lt;/h1&gt;
&lt;p&gt;x = numpy.linspace(-4,4,400)&lt;/p&gt;
&lt;h1 id="se genera la grafica, pasando el valor de x"&gt;Se genera la grafica, pasando el valor de x&lt;/h1&gt;
&lt;h1 id="la potencia 3era de x, el valor de resultado, la potencia 3era de resultado"&gt;la potencia 3era de x, el valor de resultado, la potencia 3era de resultado&lt;/h1&gt;
&lt;p&gt;pylab.plot(x,potencia3(x),resultado,potencia3(resultado),'ro')&lt;/p&gt;
&lt;h1 id="se define el grid"&gt;Se define el grid&lt;/h1&gt;
&lt;p&gt;pylab.grid(b=1)&lt;/p&gt;
&lt;h1 id="se muestra la grafica"&gt;Se muestra la grafica&lt;/h1&gt;
&lt;p&gt;pylab.show()
```
La gr&amp;aacute;fica muestra el punto donde se encuentra la ra&amp;iacute;z de la funci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/encontrarlaraizdeunafuncionconfsolve.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="matplotlib"></category><category term="numpy"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Graficar una función de 2 variables con matplotlib</title><link href="https://ecrespo.github.io/graficar-una-funcion-de-2-variables-con-matplotlib.html" rel="alternate"></link><published>2013-02-14T09:00:00-05:30</published><updated>2013-02-14T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-14:/graficar-una-funcion-de-2-variables-con-matplotlib.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo en Ingles "&lt;a href="https://glowingpython.blogspot.com/2012/01/how-to-plot-two-variable-functions-with.html"&gt;How to plot a function of two variables with matplotlib&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Se tendr&amp;aacute; 2 gr&amp;aacute;ficas de una funci&amp;oacute;n de 2 variables, la primera ser&amp;aacute; la gr&amp;aacute;fica de intensidad y la segunda gr&amp;aacute;fica ser&amp;aacute; una gr&amp;aacute;fica 3D.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo en Ingles "&lt;a href="https://glowingpython.blogspot.com/2012/01/how-to-plot-two-variable-functions-with.html"&gt;How to plot a function of two variables with matplotlib&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Se tendr&amp;aacute; 2 gr&amp;aacute;ficas de una funci&amp;oacute;n de 2 variables, la primera ser&amp;aacute; la gr&amp;aacute;fica de intensidad y la segunda gr&amp;aacute;fica ser&amp;aacute; una gr&amp;aacute;fica 3D.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="de numpy se explorta arange y exp"&gt;De numpy se explorta arange y exp&lt;/h1&gt;
&lt;p&gt;from numpy import exp,arange&lt;/p&gt;
&lt;h1 id="de pylab se importa meshgrid, cm, imshow, contour, clabel, clorbar, axis, title y show"&gt;De pylab se importa meshgrid, cm, imshow, contour, clabel, clorbar, axis, title y show&lt;/h1&gt;
&lt;p&gt;from pylab import meshgrid,cm,imshow,contour,clabel,colorbar,axis,title,show&lt;/p&gt;
&lt;p&gt;from mpl_toolkits.mplot3d import Axes3D&lt;/p&gt;
&lt;p&gt;from matplotlib import cm&lt;/p&gt;
&lt;p&gt;from matplotlib.ticker import LinearLocator, FormatStrFormatter&lt;/p&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="se define la funcion que se va a graficar"&gt;Se define la funcion que se va a graficar&lt;/h1&gt;
&lt;p&gt;def z_func(x,y):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return (1-(x**2+y**3))*exp(-(x**2+y**2)/2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def graficaIntencidad(Z):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se dibuja la funcion

im = imshow(Z,cmap=cm.RdBu)

#Se agrega el contorno de lineas con sus etiquetas

cset = contour(Z,arange(-1,1.5,0.2),linewidths=2,cmap=cm.Set2)

clabel(cset,inline=True,fmt='%1.1f',fontsize=10)

#Se agrega la barra de colores a la derecha

colorbar(im)

#Se crea el titulo de la grafica con estilo latex

title('$z=(1-x^2+y^3) e^{-(x^2+y^3)/2}$')

#Se muestra la grafica

show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def grafica3D(X,Y,Z):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fig = plt.figure()

ax = fig.gca(projection='3d')

surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1,

                       cmap=cm.RdBu,linewidth=0, antialiased=False)

ax.zaxis.set_major_locator(LinearLocator(10))

ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))

fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#rango de valores para x y y.

x = arange(-3.0,3.0,0.1)

y = arange(-3.0,3.0,0.1)

#Se define la grilla de puntos

X,Y = meshgrid(x, y)

#Se evalua la funcion segun los valores de X y Y

Z = z_func(X, Y)

graficaIntencidad(Z)

grafica3D(X,Y,Z)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```    &lt;/p&gt;
&lt;p&gt;Al ejecutar el script se mostrar&amp;aacute; la primera gr&amp;aacute;fica, al cerrarla aparecer&amp;aacute; la segunda gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica de intensidad se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarunafuncionde2variablesconmatplotlib-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica 3D se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarunafuncionde2variablesconmatplotlib-1.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="matplotlib"></category><category term="numpy"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Creación de grafos con networkx. Parte 3.</title><link href="https://ecrespo.github.io/creacion-de-grafos-con-networkx-parte-3.html" rel="alternate"></link><published>2013-02-13T09:00:00-05:30</published><updated>2013-02-13T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-13:/creacion-de-grafos-con-networkx-parte-3.html</id><summary type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-2.html#creacion-de-grafos-con-networkx-parte-2"&gt;art&amp;iacute;culo anterior se muestra como crear grafos a partir del contenido de un archivo&lt;/a&gt;, &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-1.html#creacion-de-grafos-con-networkx-parte-1"&gt;en el primero se explica lo b&amp;aacute;sico en la creaci&amp;oacute;n de grafos&lt;/a&gt;, en este se tocar&amp;aacute; el tema de analizar los grafos, de extraer informaci&amp;oacute;n de los mismos.&lt;/p&gt;
&lt;p&gt;El ejemplo a continuaci&amp;oacute;n se crea …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-2.html#creacion-de-grafos-con-networkx-parte-2"&gt;art&amp;iacute;culo anterior se muestra como crear grafos a partir del contenido de un archivo&lt;/a&gt;, &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-1.html#creacion-de-grafos-con-networkx-parte-1"&gt;en el primero se explica lo b&amp;aacute;sico en la creaci&amp;oacute;n de grafos&lt;/a&gt;, en este se tocar&amp;aacute; el tema de analizar los grafos, de extraer informaci&amp;oacute;n de los mismos.&lt;/p&gt;
&lt;p&gt;El ejemplo a continuaci&amp;oacute;n se crea un grafo con varios nodos (de la "a" a la "z"), se enlazan todos los nodos, luego se muestra la cantidad de nodos, la cantidad de relaciones entre nodos, se le asigna un atributo a un nodo, un atributo entre 2 nodos, se averigua los vecinos de un nodo, el valor del atributo de un nodo, entre 2 nodos, se muestra tambi&amp;eacute;n la ruta m&amp;aacute;s corta para llegar del nodo m al b; cual es el promedio de la ruta m&amp;aacute;s corta, se muestra la relaci&amp;oacute;n de los nodos con respecto a m, cual es la ruta m&amp;aacute;s corta utilizando el &lt;a href="https://es.wikipedia.org/wiki/Algoritmo_de_Dijkstra"&gt;Algoritmo de Dijkstra&lt;/a&gt;  entre m y b. Para terminar se genera el grafo con varios m&amp;eacute;todos (espectral, aleatoria, circular y normal).&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;p&gt;import networkx as net&lt;/p&gt;
&lt;h1 id="se importa la libreria pyplot de matplotlib como plt"&gt;Se importa la libreria pyplot de matplotlib como plt&lt;/h1&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="se crea la instancia vacia del grafo"&gt;Se crea la instancia vacia del grafo&lt;/h1&gt;
&lt;p&gt;g=net.Graph()&lt;/p&gt;
&lt;h1 id="se crean los nodos con sus relaciones"&gt;Se crean los nodos con sus relaciones&lt;/h1&gt;
&lt;p&gt;g.add_edge('a','b')&lt;/p&gt;
&lt;p&gt;g.add_edge('b','c')&lt;/p&gt;
&lt;p&gt;g.add_edge('c','a')&lt;/p&gt;
&lt;p&gt;g.add_edge('a','d')&lt;/p&gt;
&lt;p&gt;g.add_edge('f','d')&lt;/p&gt;
&lt;p&gt;g.add_edge('g','f')&lt;/p&gt;
&lt;p&gt;g.add_edge('h','b')&lt;/p&gt;
&lt;p&gt;g.add_edge('i','h')&lt;/p&gt;
&lt;p&gt;g.add_edge('i','g')&lt;/p&gt;
&lt;p&gt;g.add_edge('j','c')&lt;/p&gt;
&lt;p&gt;g.add_edge('k','j')&lt;/p&gt;
&lt;p&gt;g.add_edge('l','k')&lt;/p&gt;
&lt;p&gt;g.add_edge('m','l')&lt;/p&gt;
&lt;p&gt;g.add_edge('k','h')&lt;/p&gt;
&lt;p&gt;g.add_edge('i','d')&lt;/p&gt;
&lt;p&gt;g.add_edge('f','k')&lt;/p&gt;
&lt;p&gt;g.add_edge('m','g')&lt;/p&gt;
&lt;p&gt;g.add_edge('n','m')&lt;/p&gt;
&lt;p&gt;g.add_edge('o','m')&lt;/p&gt;
&lt;p&gt;g.add_edge('p','o')&lt;/p&gt;
&lt;p&gt;g.add_edge('q','h')&lt;/p&gt;
&lt;p&gt;g.add_edge('r','q')&lt;/p&gt;
&lt;p&gt;g.add_edge('s','r')&lt;/p&gt;
&lt;p&gt;g.add_edge('t','a')&lt;/p&gt;
&lt;p&gt;g.add_edge('u','t')&lt;/p&gt;
&lt;p&gt;g.add_edge('v','u')&lt;/p&gt;
&lt;p&gt;g.add_edge('j','b')&lt;/p&gt;
&lt;p&gt;g.add_edge('w','f')&lt;/p&gt;
&lt;p&gt;g.add_edge('x','w')&lt;/p&gt;
&lt;p&gt;g.add_edge('y','i')&lt;/p&gt;
&lt;p&gt;g.add_edge('z','y')&lt;/p&gt;
&lt;p&gt;g.add_edge('n','p')&lt;/p&gt;
&lt;p&gt;g.add_edge('z','x')&lt;/p&gt;
&lt;p&gt;g.add_edge('z','v')&lt;/p&gt;
&lt;p&gt;g.add_edge('s','x')&lt;/p&gt;
&lt;p&gt;g.add_edge('p','v')&lt;/p&gt;
&lt;p&gt;g.add_edge('r','u')&lt;/p&gt;
&lt;p&gt;print "Nodos: ",g.nodes()&lt;/p&gt;
&lt;p&gt;print "Relaciones: ",g.edges()&lt;/p&gt;
&lt;h1 id="se define un tamagno al nodo a y un peso a la relacion entre el nodo a y b"&gt;Se define un tamagno al nodo a y un peso a la relacion entre el nodo a y b&lt;/h1&gt;
&lt;p&gt;g.node['a']['size']=1&lt;/p&gt;
&lt;p&gt;g['a']['b']['weight']=1&lt;/p&gt;
&lt;p&gt;print "Vecinos de m: ", g.neighbors('m')&lt;/p&gt;
&lt;p&gt;print "Valor del nodo a: ",g['a']&lt;/p&gt;
&lt;p&gt;print "Peso de la relacion entre a y b: ", g['a']['b']&lt;/p&gt;
&lt;p&gt;print "Ruta mas corta entre m y b: ",net.algorithms.shortest_path(g,'m','b')&lt;/p&gt;
&lt;p&gt;print "Promedio de la ruta mas corta ",net.algorithms.average_shortest_path_length(g)&lt;/p&gt;
&lt;p&gt;print "Muestra la relacion de ruta mas corta entre pares de nodos relacionado con m: ", net.algorithms.all_pairs_shortest_path(g)['m']&lt;/p&gt;
&lt;p&gt;print "Ruta mas corta usando el algoritmo de Dijkstra entre m y b:",net.algorithms.dijkstra_path(g, 'm', 'b')&lt;/p&gt;
&lt;h1 id="se dibuja el grafo"&gt;Se dibuja el grafo&lt;/h1&gt;
&lt;p&gt;net.draw(g)&lt;/p&gt;
&lt;h1 id="net.draw_spectral(g)"&gt;net.draw_spectral(g)&lt;/h1&gt;
&lt;h1 id="net.draw_circular(g)"&gt;net.draw_circular(g)&lt;/h1&gt;
&lt;h1 id="net.draw_random(g)"&gt;net.draw_random(g)&lt;/h1&gt;
&lt;h1 id="se muestra el grafico"&gt;Se muestra el grafico&lt;/h1&gt;
&lt;p&gt;plt.show()
```&lt;/p&gt;
&lt;p&gt;Para generar el grafo de forma espectral, circular o aleatoria se comenta el anterior y se descomenta el que se desea generar.&lt;/p&gt;
&lt;p&gt;El grafo normal se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx3-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el grafo espectral:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx3-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el grafo circular:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx3-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el grafo aleatorio:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx3-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;A parte de las gr&amp;aacute;ficas se imprime lo siguiente en pantalla:&lt;/p&gt;
&lt;p&gt;```
Nodos:  ['a', 'c', 'b', 'd', 'g', 'f', 'i', 'h', 'k', 'j', 'm', 'l', 'o', 'n', 'q', 'p', 's', 'r', 'u', 't', 'w', 'v', 'y', 'x', 'z']&lt;/p&gt;
&lt;p&gt;Relaciones:  [('a', 'c'), ('a', 'b'), ('a', 'd'), ('a', 't'), ('c', 'b'), ('c', 'j'), ('b', 'h'), ('b', 'j'), ('d', 'i'), ('d', 'f'), ('g', 'i'), ('g', 'm'), ('g', 'f'), ('f', 'w'), ('f', 'k'), ('i', 'y'), ('i', 'h'), ('h', 'q'), ('h', 'k'), ('k', 'j'), ('k', 'l'), ('m', 'o'), ('m', 'l'), ('m', 'n'), ('o', 'p'), ('n', 'p'), ('q', 'r'), ('p', 'v'), ('s', 'x'), ('s', 'r'), ('r', 'u'), ('u', 't'), ('u', 'v'), ('w', 'x'), ('v', 'z'), ('y', 'z'), ('x', 'z')]&lt;/p&gt;
&lt;p&gt;Vecinos de m:  ['o', 'l', 'g', 'n']&lt;/p&gt;
&lt;p&gt;Valor del nodo a:  {'c': {}, 'b': {'weight': 1}, 'd': {}, 't': {}}&lt;/p&gt;
&lt;p&gt;Peso de la relacion entre a y b:  {'weight': 1}&lt;/p&gt;
&lt;p&gt;Ruta mas corta entre m y b:  ['m', 'l', 'k', 'h', 'b']&lt;/p&gt;
&lt;p&gt;Promedio de la ruta mas corta  2.99&lt;/p&gt;
&lt;p&gt;Muestra la relacion de ruta mas corta entre pares de nodos relacionado con m:  {'a': ['m', 'g', 'i', 'd', 'a'], 'c': ['m', 'l', 'k', 'j', 'c'], 'b': ['m', 'g', 'i', 'h', 'b'], 'd': ['m', 'g', 'i', 'd'], 'g': ['m', 'g'], 'f': ['m', 'g', 'f'], 'i': ['m', 'g', 'i'], 'h': ['m', 'g', 'i', 'h'], 'k': ['m', 'l', 'k'], 'j': ['m', 'l', 'k', 'j'], 'm': ['m'], 'l': ['m', 'l'], 'o': ['m', 'o'], 'n': ['m', 'n'], 'q': ['m', 'g', 'i', 'h', 'q'], 'p': ['m', 'o', 'p'], 's': ['m', 'g', 'f', 'w', 'x', 's'], 'r': ['m', 'g', 'i', 'h', 'q', 'r'], 'u': ['m', 'o', 'p', 'v', 'u'], 't': ['m', 'g', 'i', 'd', 'a', 't'], 'w': ['m', 'g', 'f', 'w'], 'v': ['m', 'o', 'p', 'v'], 'y': ['m', 'g', 'i', 'y'], 'x': ['m', 'g', 'f', 'w', 'x'], 'z': ['m', 'o', 'p', 'v', 'z']}&lt;/p&gt;
&lt;p&gt;Ruta mas corta usando el algoritmo de Dijkstra entre m y b: ['m', 'g', 'i', 'h', 'b']&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;De esta forma se puede extraer informaci&amp;oacute;n del grafo como la ruta m&amp;aacute;s corta entre m y b (m,g,i,h y b) que se tiene el mismo resultado usando el Algoritmo de Dijkstra.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="matplotlib"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Graficar el espectro de frecuencia con Numpy</title><link href="https://ecrespo.github.io/graficar-el-espectro-de-frecuencia-con-numpy.html" rel="alternate"></link><published>2013-02-06T09:00:00-05:30</published><updated>2013-02-06T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-06:/graficar-el-espectro-de-frecuencia-con-numpy.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como generar una gr&amp;aacute;fica de una se&amp;ntilde;al que se tiene en el dominio del tiempo a generar la gr&amp;aacute;fica en el dominio de la frecuencia.&lt;/p&gt;
&lt;p&gt;Est&amp;eacute; art&amp;iacute;culo se basa de un art&amp;iacute;culo en Ingl&amp;eacute;s  llamado "&lt;a href="https://glowingpython.blogspot.com/search?updated-max=2011-08-05T17:10:00%2B01:00&amp;amp;max-results=3&amp;amp;start=42&amp;amp;by-date=false"&gt;How to plot the frequency spectrum with scipy&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;El an&amp;aacute;lisis …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como generar una gr&amp;aacute;fica de una se&amp;ntilde;al que se tiene en el dominio del tiempo a generar la gr&amp;aacute;fica en el dominio de la frecuencia.&lt;/p&gt;
&lt;p&gt;Est&amp;eacute; art&amp;iacute;culo se basa de un art&amp;iacute;culo en Ingl&amp;eacute;s  llamado "&lt;a href="https://glowingpython.blogspot.com/search?updated-max=2011-08-05T17:10:00%2B01:00&amp;amp;max-results=3&amp;amp;start=42&amp;amp;by-date=false"&gt;How to plot the frequency spectrum with scipy&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;El an&amp;aacute;lisis de frecuencia es el proceso de determinar la representaci&amp;oacute;n en el dominio de una se&amp;ntilde;al de dominio del tiempo y comunmente empleando la &lt;a href="https://es.wikipedia.org/wiki/Transformada_de_fourier"&gt;Transformada de Fourier&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;La &lt;a href="https://es.wikipedia.org/wiki/Transformada_de_Fourier_discreta"&gt;Transformada Discreta de Fourier&lt;/a&gt;  (DFT) se usa para determinar el contenido de frecuencias de las se&amp;ntilde;ales  y la &lt;a href="https://es.wikipedia.org/wiki/Transformada_r%C3%A1pida_de_Fourier"&gt;Transformada R&amp;aacute;pida de Fourier&lt;/a&gt;  (FFT) es un m&amp;eacute;todo eficiente para calcular la Transformada Discreta de Fourier. Scipy implemente  FFT y se usar&amp;aacute; para analizar el espectro de frecuencias.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo que gr&amp;aacute;fica la amplitud en el dominio de frecuencia de la funci&amp;oacute;n coseno del dominio del tiempo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importa coseno, linspace y pi"&gt;Importa  coseno, linspace y pi&lt;/h1&gt;
&lt;p&gt;from numpy import cos, linspace, pi&lt;/p&gt;
&lt;h1 id="importa plot, show, title, xlabel, ylabel y subplot para graficar"&gt;Importa plot, show, title, xlabel, ylabel y subplot para graficar&lt;/h1&gt;
&lt;p&gt;from pylab import plot, show, title, xlabel, ylabel, subplot&lt;/p&gt;
&lt;h1 id="importa fft y arange"&gt;Importa fft y arange&lt;/h1&gt;
&lt;p&gt;from scipy import fft, arange&lt;/p&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;p&gt;def plotSpectrum(y,Fs):&lt;/p&gt;
&lt;p&gt;"""&lt;/p&gt;
&lt;p&gt;grafica la amplitud del espectro de y(t)&lt;/p&gt;
&lt;p&gt;"""&lt;/p&gt;
&lt;p&gt;n = len(y) # longitud de la se&amp;ntilde;al&lt;/p&gt;
&lt;p&gt;k = arange(n)&lt;/p&gt;
&lt;p&gt;T = n/Fs&lt;/p&gt;
&lt;p&gt;frq = k/T # 2 lados del rango de frecuancia&lt;/p&gt;
&lt;p&gt;frq = frq[range(n/2)] # Un lado del rango de frecuencia&lt;/p&gt;
&lt;p&gt;Y = fft(y)/n # fft calcula la normalizacion&lt;/p&gt;
&lt;p&gt;Y = Y[range(n/2)]&lt;/p&gt;
&lt;p&gt;plot(frq,abs(Y),'r') # grafica el espectro de frecuencia&lt;/p&gt;
&lt;p&gt;xlabel('Frecuencia (Hz)')&lt;/p&gt;
&lt;p&gt;ylabel('|Y(f)|')&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fs = 150.0;  # rata de muestreo

Ts = 1.0/Fs; # intevalo de muestreo

t = arange(0,1,Ts) # vector tiempo

ff = 5;   # frecuencia de la se&amp;ntilde;al

y = cos(5*pi*ff*t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#Proceso de graficar la se&amp;ntilde;al&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subplot(2,1,1)

plot(t,y)

xlabel('Tiempo')

ylabel('Amplitud')

subplot(2,1,2)

#Se llama a la funcion con la se&amp;ntilde;al y la rata de muestreo

plotSpectrum(y,Fs)

show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```    &lt;/p&gt;
&lt;p&gt;Al ejecutar el script se genera la siguiente gr&amp;aacute;fica:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/graficarelespectrodefrecuenciaconnumpy.png"/&gt; &lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="matplotlib"></category><category term="numpy"></category><category term="Python"></category></entry><entry><title>Graficar consumo de memoria con memory_profiler</title><link href="https://ecrespo.github.io/graficar-consumo-de-memoria-con-memory_profiler.html" rel="alternate"></link><published>2013-02-03T10:00:00-05:30</published><updated>2013-02-03T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-03:/graficar-consumo-de-memoria-con-memory_profiler.html</id><summary type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/monitorear-el-uso-de-memoria-de-un-programa-python-con-memory_profiler.html#monitorear-el-uso-de-memoria-de-un-programa-python-con-memory_profiler"&gt;art&amp;iacute;culo anterior&lt;/a&gt; se explica como usar memory_profiler para evaluar el consumo de memoria de un programa Python, a continuaci&amp;oacute;n se explicar&amp;aacute; como graficar ese consumo utilizando matplotlib.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo &lt;a href="http://fseoane.net/blog/2013/memory-plots-with-memory_profiler/"&gt;Memory plots with memory_profiler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se har&amp;aacute; una peque&amp;ntilde;a modificaci&amp;oacute;n al programa que c&amp;aacute;lcula la …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/monitorear-el-uso-de-memoria-de-un-programa-python-con-memory_profiler.html#monitorear-el-uso-de-memoria-de-un-programa-python-con-memory_profiler"&gt;art&amp;iacute;culo anterior&lt;/a&gt; se explica como usar memory_profiler para evaluar el consumo de memoria de un programa Python, a continuaci&amp;oacute;n se explicar&amp;aacute; como graficar ese consumo utilizando matplotlib.&lt;/p&gt;
&lt;p&gt;Este art&amp;iacute;culo se basa en el art&amp;iacute;culo &lt;a href="http://fseoane.net/blog/2013/memory-plots-with-memory_profiler/"&gt;Memory plots with memory_profiler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se har&amp;aacute; una peque&amp;ntilde;a modificaci&amp;oacute;n al programa que c&amp;aacute;lcula la matriz inversa:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar de memory_profiler a memory_usage"&gt;Importar de memory_profiler a memory_usage&lt;/h1&gt;
&lt;p&gt;from memory_profiler import memory_usage&lt;/p&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se crea la funcion que calcula la matriz inversa"&gt;Se crea la funcion que calcula la matriz inversa&lt;/h1&gt;
&lt;p&gt;def Inversa(n):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return np.matrix(np.random.rand(n,n)).I

#rando = np.random.rand(n, n)

#a = np.matrix(rando)

#inversa = a.I



return inversa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se define una lista de  tama&amp;ntilde;os de la matriz

tamagno = 2 ** np.arange(0, 12)

#Se calcula la memoria usada de la funcion Inversa pasando el ultimo tama&amp;ntilde;o de la lista generada

mem_usage = memory_usage((Inversa,(tamagno[-1],)),interval=.01)

#Se imprime la lista que contiene la informaci&amp;oacute;n de la memoria usada

print mem_usage

#Se importa pylab

import pylab as pl

#Se genera la gr&amp;aacute;fica

pl.plot(np.arange(len(mem_usage)) * .01, mem_usage, label='Matriz Inversa')

pl.xlabel('Tiempo (seg)')

pl.ylabel('Consumo de memoria (MB)')

pl.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El resultado de la ejecuci&amp;oacute;n es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[11.39453125, 13.39453125, 15.45703125, 17.51953125, 19.83984375, 21.90234375, 23.96484375, 26.02734375, 28.34765625, 30.41015625, 32.73046875, 34.79296875, 36.85546875, 38.91796875, 41.23828125, 43.30078125, 53.80859375, 64.37890625, 74.94921875, 48.70703125, 60.30859375, 71.91015625, 77.8046875, 81.15625, 85.0234375, 88.890625, 92.5, 96.109375, 99.71875, 103.5859375, 107.453125, 111.04296875, 114.39453125, 118.00390625, 121.61328125, 125.22265625, 128.83203125, 132.44140625, 134.76171875, 138.11328125, 139.6328125, 139.6328125, 140.5703125, 140.5703125, 140.5703125, 140.5703125, 140.5703125, 140.5703125, 140.5703125, 140.4609375, 140.4609375, 140.4609375, 139.953125, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.20703125, 140.20703125, 139.953125, 140.20703125, 140.20703125, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.4609375, 140.6640625, 140.6640625, 140.6640625, 140.05078125, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.625, 140.625, 140.625, 140.625, 140.05078125, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.05078125, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.05078125, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.55859375, 140.359375, 140.61328125, 140.61328125, 140.61328125, 140.61328125, 140.61328125, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.7265625, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 140.75, 141.26171875, 141.26171875, 141.26171875, 141.26171875, 140.75, 140.75, 141.26171875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 144.8671875, 142.80859375, 140.75, 140.75, 140.75, 141.26171875, 141.26171875, 141.26171875, 141.26171875, 140.8359375, 149.08203125, 149.08203125, 153.4609375, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 157.328125, 149.08203125, 149.08203125, 140.8359375, 140.8359375, 141.34765625, 141.34765625, 141.34765625, 141.34765625, 141.34765625, 142.89453125, 142.89453125, 143.6640625, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 144.953125, 142.89453125, 142.89453125, 142.89453125, 142.89453125, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 140.8359375, 141.34375, 141.34375, 141.34375, 140.83984375, 140.83984375, 140.83984375, 142.8984375, 143.41015625, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 144.95703125, 142.8984375, 142.8984375, 140.84375, 140.84375, 140.84375, 141.35546875, 141.35546875, 141.35546875, 141.35546875, 140.84375, 144.96484375, 148.83203125, 156.3046875, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 157.078125, 149.08984375, 149.08984375, 140.84375, 140.84375, 141.35546875, 141.35546875, 141.35546875, 141.35546875, 140.84375, 142.90234375, 142.90234375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 144.9609375, 142.90234375, 142.90234375, 140.84375, 140.84375, 140.84375, 141.35546875, 141.35546875, 141.35546875, 141.35546875, 140.84375, 140.84375, 141.765625, 150.015625, 160.84375, 161.35546875, 76.8515625, 12.84375]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica que se genera es la siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="gr&amp;aacute;fica consumo de memoria" src="./images/2013-grafica-memoria.png"/&gt;&lt;/p&gt;
&lt;p&gt;Se puede notar en la gr&amp;aacute;fica que se incrementa el consumo de memoria r&amp;aacute;pidamente en menos de 1 segundo a aproximadamente 140MB, luego viene una estabilizaci&amp;oacute;n con peque&amp;ntilde;os aumentos y disminuciones al valor constante hasta que se genera una ca&amp;iacute;da a 12MB a los 5 segundos de ejecuci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Si desea ver m&amp;aacute;s ejemplos de como graficar el consumo de memoria puede revisar el art&amp;iacute;culo el cual se baso este.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="numpy"></category><category term="Python"></category></entry><entry><title>Creación de grafos con networkx. Parte 2.</title><link href="https://ecrespo.github.io/creacion-de-grafos-con-networkx-parte-2.html" rel="alternate"></link><published>2013-02-02T09:00:00-05:30</published><updated>2013-02-02T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2013-02-02:/creacion-de-grafos-con-networkx-parte-2.html</id><summary type="html">&lt;p&gt;El &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-1.html#creacion-de-grafos-con-networkx-parte-1"&gt;primer art&amp;iacute;culo sobre networkx&lt;/a&gt;  mostraba como crear los nodos y los enlaces de las redes (relaci&amp;oacute;n de Estados y Ciudades de Venezuela).&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se basa en un art&amp;iacute;culo del sitio "The Glowing Python&lt;a href="https://glowingpython.blogspot.com/"&gt;The Glowing Python&lt;/a&gt;", este art&amp;iacute;culo se llama Primeros pasos con Networkx (en ingl&amp;eacute;s). Este …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El &lt;a href="https://www.seraph.to/creacion-de-grafos-con-networkx-parte-1.html#creacion-de-grafos-con-networkx-parte-1"&gt;primer art&amp;iacute;culo sobre networkx&lt;/a&gt;  mostraba como crear los nodos y los enlaces de las redes (relaci&amp;oacute;n de Estados y Ciudades de Venezuela).&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se basa en un art&amp;iacute;culo del sitio "The Glowing Python&lt;a href="https://glowingpython.blogspot.com/"&gt;The Glowing Python&lt;/a&gt;", este art&amp;iacute;culo se llama Primeros pasos con Networkx (en ingl&amp;eacute;s). Este art&amp;iacute;culo usa como ejemplo las relaciones de los personajes de la novela Los Miserables. Usa un archivo con extensi&amp;oacute;n gml que maneja las relaciones de los personajes, el archivo lo pueden descargar de &lt;a href="https://gephi.org/datasets/lesmiserables.gml.zip"&gt;aqu&amp;iacute;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El archivo contiene la definici&amp;oacute;n de los nodos dentro de un grafo, la informaci&amp;oacute;n de cada nodo se coloca entre corchetes como se muestra a continuaci&amp;oacute;n:
```python
graph&lt;/p&gt;
&lt;p&gt;[&lt;/p&gt;
&lt;p&gt;node&lt;/p&gt;
&lt;p&gt;[&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id 0

label "Myriel"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt;node&lt;/p&gt;
&lt;p&gt;[&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id 1

label "Napoleon"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt;node&lt;/p&gt;
&lt;p&gt;[&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id 2

label "MlleBaptistine"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt;node&lt;/p&gt;
&lt;p&gt;[&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id 3

label "MmeMagloire"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;]
```&lt;/p&gt;
&lt;p&gt;Se identifica el nodo y se coloca una etiqueta, en este caso la etiqueta es sobre un personaje de la novela ya mencionada antes.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la generaci&amp;oacute;n del grafo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa networkx como nx"&gt;Se importa networkx como nx&lt;/h1&gt;
&lt;p&gt;import networkx as nx&lt;/p&gt;
&lt;h1 id="se importa la libreria pyplot de matplotlib como plt"&gt;Se importa la libreria pyplot de matplotlib como plt&lt;/h1&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="leer el grafo desde archivo con formato gml"&gt;leer el grafo desde archivo con formato gml&lt;/h1&gt;
&lt;p&gt;G = nx.read_gml('losmiserables.gml',relabel=True)&lt;/p&gt;
&lt;h1 id="dibujar la red completa."&gt;dibujar la red completa.&lt;/h1&gt;
&lt;p&gt;plt.figure(1)&lt;/p&gt;
&lt;p&gt;nx.draw_spring(G,node_size=0,edge_color='b',alpha=.2,font_size=10)&lt;/p&gt;
&lt;p&gt;plt.show()
```
A continuaci&amp;oacute;n se muestra el grafo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx2-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;El grafo en s&amp;iacute; no muestra informaci&amp;oacute;n &amp;uacute;til que se diga, para entender m&amp;aacute;s la informaci&amp;oacute;n del grafo se crear&amp;aacute; un histograma del n&amp;uacute;mero de conexiones por nodo (es la continuaci&amp;oacute;n del c&amp;oacute;digo anterior):&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="histograma"&gt;Histograma&lt;/h1&gt;
&lt;h1 id="se crea la figura 2"&gt;Se crea la figura 2&lt;/h1&gt;
&lt;p&gt;plt.figure(2)&lt;/p&gt;
&lt;h1 id="se crea la instancia degree del grafo"&gt;se crea la instancia degree del grafo&lt;/h1&gt;
&lt;p&gt;d = nx.degree(G)&lt;/p&gt;
&lt;h1 id="se crea el histograma con los valore del grafo."&gt;Se crea el histograma con los valore del grafo.&lt;/h1&gt;
&lt;p&gt;plt.hist(d.values(),bins=15)&lt;/p&gt;
&lt;h1 id="se muestra la grafica."&gt;Se muestra la grafica.&lt;/h1&gt;
&lt;p&gt;plt.show()
```
La siguiente figura muestra el histograma:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx2-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se nota en el histograma que s&amp;oacute;lo pocos personajes tienen m&amp;aacute;s de 10 conexiones.
A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo de un grafo de s&amp;oacute;lo esos personajes con m&amp;aacute;s de 10 conexiones:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;def trim_nodes(G,d):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;""" retorna una copia de G sin

  los nodos de menos de d conexiones"""

#Se crea la copia de G

Gt = G.copy()

#Se define la instancia de degree con la copia de G

dn = nx.degree(Gt)

#Se recorre los nodos y se remueve los que tengan menos de d conexiones

for n in Gt.nodes():

    if dn[n] &amp;lt;= d:

        Gt.remove_node(n)

#Se retorna el nuevo G

return Gt
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="dibujar la red solo con nodos de mas de 10"&gt;dibujar la red solo con nodos de mas de 10&lt;/h1&gt;
&lt;h1 id="conexiones"&gt;conexiones&lt;/h1&gt;
&lt;p&gt;Gt = trim_nodes(G,10)&lt;/p&gt;
&lt;h1 id="se crea la figura 3"&gt;Se crea la figura 3&lt;/h1&gt;
&lt;p&gt;plt.figure(3)&lt;/p&gt;
&lt;h1 id="se dibuja el grafo"&gt;Se dibuja el grafo&lt;/h1&gt;
&lt;p&gt;nx.draw(Gt,node_size=0,node_color='w',edge_color='b',alpha=.2)&lt;/p&gt;
&lt;h1 id="se muestra en pantalla el grafo"&gt;Se muestra en pantalla el grafo&lt;/h1&gt;
&lt;p&gt;plt.show()
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el grafo con los personajes m&amp;aacute;s relevantes de la novela Los Miserables:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/creaciondegrafosconnetworkx2-3.png"/&gt;
&lt;a href="www.zemanta.com/?px"&gt;Enhanced by Zemanta&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="matplotlib"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Pruebas Unitarias en Python con unittest</title><link href="https://ecrespo.github.io/pruebas-unitarias-en-python-con-unittest.html" rel="alternate"></link><published>2012-12-26T09:00:00-05:30</published><updated>2012-12-26T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-26:/pruebas-unitarias-en-python-con-unittest.html</id><summary type="html">&lt;p&gt;Continuando con las herramientas que permiten el aseguramiento de la calidad, ahora se realizar&amp;aacute; pruebas unitarias a la funci&amp;oacute;n que c&amp;aacute;lcula la ra&amp;iacute;z cuadrada del art&amp;iacute;culo anterior (&lt;a href="https://www.seraph.to/probar-codigo-con-doctest.html#probar-codigo-con-doctest"&gt;Probar c&amp;oacute;digo con doctest&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;El desarrollo guiado por pruebas &amp;oacute; &lt;a href="http://es.wikipedia.org/wiki/TDD"&gt;Test driven development&lt;/a&gt; (TDD), es una pr&amp;aacute;ctica de la programaci&amp;oacute;n que involucra dos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con las herramientas que permiten el aseguramiento de la calidad, ahora se realizar&amp;aacute; pruebas unitarias a la funci&amp;oacute;n que c&amp;aacute;lcula la ra&amp;iacute;z cuadrada del art&amp;iacute;culo anterior (&lt;a href="https://www.seraph.to/probar-codigo-con-doctest.html#probar-codigo-con-doctest"&gt;Probar c&amp;oacute;digo con doctest&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;El desarrollo guiado por pruebas &amp;oacute; &lt;a href="http://es.wikipedia.org/wiki/TDD"&gt;Test driven development&lt;/a&gt; (TDD), es una pr&amp;aacute;ctica de la programaci&amp;oacute;n que involucra dos pr&amp;aacute;cticas: Escribir las pruebas primero y refactorizar continuamente el c&amp;oacute;digo.&lt;/p&gt;
&lt;p&gt;Para escribir primero las pruebas se usa generalmente las &lt;a href="http://es.wikipedia.org/wiki/Prueba_unitaria"&gt;pruebas unitarias&lt;/a&gt;. esto es una forma de probar el correcto funcionamiento de un m&amp;oacute;dulo de c&amp;oacute;digo. Permite asegurar el correcto funcionamiento de cada m&amp;oacute;dulo por separado, luego con las &lt;a href="https://es.wikipedia.org/wiki/Pruebas_de_integraci%C3%B3n"&gt;pruebas de integraci&amp;oacute;n&lt;/a&gt;, se podr&amp;aacute; asegurar el correcto funcionamiento del sistema.&lt;/p&gt;
&lt;p&gt;Ciclo de desarrollo guidado por pruebas (TDD).
En primer lugar se debe definir una lista de requisitos, despu&amp;eacute;s se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Elegir un requisito: Se elige de una lista el requerimiento que se cree dar&amp;aacute; mayor conocimiento del problema y que a la vez sea facilmente implementable.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escribir una prueba.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verificar que la prueba falle: Si la prueba no falla es por que el requerimiento ya estaba implementado o por que la prueba es erronea.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ejecutar las pruebas automatizadas: Verificar que todo el conjunto de pruebas funciona correctamente.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eliminaci&amp;oacute;n de duplicaci&amp;oacute;n: Se eliminar&amp;aacute; c&amp;oacute;digo duplicado.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actualizaci&amp;oacute;n de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para que una prueba unitaria sea buena tiene que cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Automatizable: No debe ejecutarse manualmente (&amp;uacute;til para integraci&amp;oacute;n continua).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completas: Deben cubrir la mayor cantidad de c&amp;oacute;digo.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reutilizables: No se deben crear pruebas que s&amp;oacute;lo puedan ser ejecutadas una vez (&amp;uacute;til para integraci&amp;oacute;n continua).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Independientes: La ejecuci&amp;oacute;n de una prueba no debe afectar la ejecuci&amp;oacute;n de otra prueba.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profesionales: Las pruebas deben ser consideradas igual que el c&amp;oacute;digo, con la misma profesionalidad, documentaci&amp;oacute;n, etc. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las pruebas unitarias son pruebas automatizadas que prueban peque&amp;ntilde;as piezas de c&amp;oacute;digo, usualmente una funci&amp;oacute;n o un m&amp;eacute;todo.&lt;/p&gt;
&lt;p&gt;Python tiene el API de &lt;code&gt;PyUnit&lt;/code&gt; para pruebas unitarias. El m&amp;oacute;dulo se llama &lt;code&gt;unittest&lt;/code&gt;, se basa en el framework &lt;code&gt;XUnit&lt;/code&gt; dise&amp;ntilde;ado por Ken Beck y Erich Gamma.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de ejemplo muestra por un lado la funci&amp;oacute;n Raiz y por el otro la clase RaizTest que hereda de &lt;code&gt;unittest.TestCase&lt;/code&gt;. Esta clase tendr&amp;aacute; 3 m&amp;eacute;todos, el primero que c&amp;aacute;lcula la raiz de 9 y devuelve 3, el segundo que c&amp;aacute;lcula la raiz de 0 y devuelve 0 y por &amp;uacute;ltimo el que c&amp;aacute;lcula la raiz de un valor negativo y devuelve una excepci&amp;oacute;n o mensaje de error.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra  a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo unittest y math"&gt;Se importa el m&amp;oacute;dulo unittest y math&lt;/h1&gt;
&lt;p&gt;import unittest&lt;/p&gt;
&lt;p&gt;import math&lt;/p&gt;
&lt;h1 id="funcion raiz cuadrada."&gt;Funci&amp;oacute;n raiz cuadrada.&lt;/h1&gt;
&lt;p&gt;def Raiz(a):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Si a es mayor o igual a cero se calcula la raiz cuadrada

if a &amp;gt;= 0:

    return math.sqrt(a)

#Si es menor a cero se genera una excepci&amp;oacute;n donde se informa que a debe ser mayor o igual a cero.

else:

    raise ValueError,"a debe ser &amp;gt;= 0"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;class RaizTest(unittest.TestCase):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def test_Raiz(self):

    #Test para la raiz de nueve que devuelve 3 que debe pasar.

    self.assertEqual(3, Raiz(9))

def test_zero(self):

    #Test para la raiz de 0 que devuelve 0, que debe pasar.

    self.assertEqual(0, Raiz(0))

def test_negative(self):

    #Test para la raiz de un n&amp;uacute;mero negativo, que debe fallar.

    # Este debe devolver un ValueError, pero se espera un IndexError.

    self.assertRaises(IndexError, Raiz(-10))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se ejecuta la prueba unitaria

unittest.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Al ejecutar el c&amp;oacute;digo se tiene lo siguiente:&lt;br/&gt;
```
ecrespo@jewel:~/proyectos/ernesto-ecrespo.blogspot/timeit$ python test-raiz.py 
.E.
======================================================================
ERROR: test_negative (&lt;strong&gt;main&lt;/strong&gt;.RaizTest)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Traceback (most recent call last):
  File "test-raiz.py", line 40, in test_negative
    self.assertRaises(IndexError, Raiz(-10))
  File "test-raiz.py", line 24, in Raiz
    raise ValueError,"a debe ser &amp;gt;= 0"
ValueError: a debe ser &amp;gt;= 0&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Ran 3 tests in 0.001s&lt;/p&gt;
&lt;p&gt;FAILED (errors=1)
```&lt;/p&gt;
&lt;p&gt;Como se puede ver, la prueba de un valor negativo falla. 
Si se comenta el m&amp;eacute;todo de prueba de valor negativo la ejecuci&amp;oacute;n devuelve que no hay errores:
```
ecrespo@jewel:~/proyectos/ernesto-ecrespo.blogspot/timeit$ python test-raiz.py 
..&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Ran 2 tests in 0.000s&lt;/p&gt;
&lt;p&gt;OK
```&lt;/p&gt;
&lt;p&gt;Las funciones de &lt;code&gt;unittest&lt;/code&gt; utilizadas son:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assertEqual&lt;/code&gt;: Prueba donde dos valores son iguales.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertRaises&lt;/code&gt;: Prueba donde una excepci&amp;oacute;n es devuelta.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para m&amp;aacute;s m&amp;eacute;todos del m&amp;oacute;dulo unittest se puede revisar la &lt;a href="https://docs.python.org/2/library/unittest.html#unittest.TestCase"&gt;documentaci&amp;oacute;n&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="Python"></category><category term="TDD"></category><category term="unittest"></category></entry><entry><title>Pyproceessing: Un ambiente para crear gráficos con Python</title><link href="https://ecrespo.github.io/pyproceessing-un-ambiente-para-crear-graficos-con-python.html" rel="alternate"></link><published>2012-12-24T09:00:00-05:30</published><updated>2012-12-24T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-24:/pyproceessing-un-ambiente-para-crear-graficos-con-python.html</id><summary type="html">&lt;p&gt;Pyprocessing es un paquete python que permite crear gr&amp;aacute;ficos que se basa en las librer&amp;iacute;as  &lt;a href="https://www.opengl.org/"&gt;OpenGL&lt;/a&gt; y &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Home"&gt;Pyglet&lt;/a&gt;. El proyecto se aloja en &lt;a href="https://code.google.com/archive/p/pyprocessing/"&gt;google code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la documentaci&amp;oacute;n encontrar&amp;aacute;n la gu&amp;iacute;a de referencia r&amp;aacute;pida, un tutorial &lt;a href="https://code.google.com/archive/p/pyprocessing/wikis/BasicTutorial.wiki"&gt;b&amp;aacute;sico&lt;/a&gt;, &lt;a href="https://code.google.com/archive/p/pyprocessing/wikis/Tutorials.wiki"&gt;un tutorial m&amp;aacute;s completo&lt;/a&gt; y las &lt;a href="https://code.google.com/archive/p/pyprocessing/wikis/UsageInstructions.wiki"&gt;instrucciones de uso&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalarlo en linux …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pyprocessing es un paquete python que permite crear gr&amp;aacute;ficos que se basa en las librer&amp;iacute;as  &lt;a href="https://www.opengl.org/"&gt;OpenGL&lt;/a&gt; y &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Home"&gt;Pyglet&lt;/a&gt;. El proyecto se aloja en &lt;a href="https://code.google.com/archive/p/pyprocessing/"&gt;google code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la documentaci&amp;oacute;n encontrar&amp;aacute;n la gu&amp;iacute;a de referencia r&amp;aacute;pida, un tutorial &lt;a href="https://code.google.com/archive/p/pyprocessing/wikis/BasicTutorial.wiki"&gt;b&amp;aacute;sico&lt;/a&gt;, &lt;a href="https://code.google.com/archive/p/pyprocessing/wikis/Tutorials.wiki"&gt;un tutorial m&amp;aacute;s completo&lt;/a&gt; y las &lt;a href="https://code.google.com/archive/p/pyprocessing/wikis/UsageInstructions.wiki"&gt;instrucciones de uso&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalarlo en linux se usa &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt;:
&lt;code&gt;easy_install pyprocessing&lt;/code&gt;
&lt;code&gt;pip install pyprocessing&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El ejemplo que se har&amp;aacute; es el de crear con rectangulo, l&amp;iacute;neas y elipses una especie de mu&amp;ntilde;eco sin brazos junto a una peque&amp;ntilde;a esfera. Este ejemplo se basa en el peque&amp;ntilde;o ejemplo que tiene el proyecto en la p&amp;aacute;gina de entrada.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa pyprocessing"&gt;Se importa pyprocessing&lt;/h1&gt;
&lt;p&gt;from pyprocessing import *&lt;/p&gt;
&lt;h1 id="define el tamano de la ventana."&gt;define el tama&amp;ntilde;o de la ventana.&lt;/h1&gt;
&lt;p&gt;size(200,200)&lt;/p&gt;
&lt;h1 id="define un rectangulo en el centro de la ventana"&gt;Define un rectangulo en el centro de la ventana&lt;/h1&gt;
&lt;p&gt;rectMode(CENTER)&lt;/p&gt;
&lt;h1 id="se crea el rectangulo(x,y,ancho,alto)"&gt;Se crea el rectangulo(x,y,ancho,alto)&lt;/h1&gt;
&lt;p&gt;rect(100,100,20,100)&lt;/p&gt;
&lt;h1 id="se crean 3 elipses(x,y,ancho,alto)"&gt;Se crean 3 elipses(x,y,ancho,alto)&lt;/h1&gt;
&lt;p&gt;ellipse(100,70,60,60)&lt;/p&gt;
&lt;p&gt;ellipse(81,70,16,32) &lt;/p&gt;
&lt;p&gt;ellipse(119,70,16,32)&lt;/p&gt;
&lt;h1 id="se crean 2 lineas(x1,y1,x2,y2)"&gt;Se crean 2 lineas(x1,y1,x2,y2)&lt;/h1&gt;
&lt;p&gt;line(90,150,80,160)&lt;/p&gt;
&lt;p&gt;line(110,150,120,160)&lt;/p&gt;
&lt;h1 id="no se crea bordes en la figura"&gt;No se crea bordes en la figura&lt;/h1&gt;
&lt;p&gt;noStroke();&lt;/p&gt;
&lt;h1 id="define que tendra luz la esfera"&gt;Define que tendr&amp;aacute; luz la esfera&lt;/h1&gt;
&lt;p&gt;lights();&lt;/p&gt;
&lt;h1 id="define la cantidad de desplazamiento con respecto a la ventana."&gt;Define la cantidad de desplazamiento con respecto a la ventana.&lt;/h1&gt;
&lt;h1 id="(derecha/izquierda,arriba/abajo,delante/detras)"&gt;(derecha/izquierda,arriba/abajo,delante/detr&amp;aacute;s)&lt;/h1&gt;
&lt;p&gt;translate(28, 48, 0);&lt;/p&gt;
&lt;h1 id="se crea una esfera con radio 15"&gt;Se crea una esfera con radio 15&lt;/h1&gt;
&lt;p&gt;sphere(15)&lt;/p&gt;
&lt;h1 id="se muestra en la ventana."&gt;Se muestra en la ventana.&lt;/h1&gt;
&lt;p&gt;run()
```
La siguiente figura muestra el resultado del c&amp;oacute;digo al ser ejecutado:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/pyproceessingunambienteparacreargraficosconpython.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="Pyprocessing"></category><category term="Python"></category></entry><entry><title>Probar código con doctest</title><link href="https://ecrespo.github.io/probar-codigo-con-doctest.html" rel="alternate"></link><published>2012-12-13T09:00:00-05:30</published><updated>2012-12-13T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-13:/probar-codigo-con-doctest.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Doctest&lt;/code&gt; es un framework que viene en Python el cual permite desarrollar aplicaciones utilizando TDD (&lt;a href="https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas"&gt;Desarrollo guiado por pruebas&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;El TDD exige escribir las pruebas primero y la refactorizaci&amp;oacute;n del c&amp;oacute;digo para llegar al resultado deseado.&lt;/p&gt;
&lt;p&gt;En este caso se usar&amp;aacute; &lt;code&gt;doctest&lt;/code&gt; el cual permite realizar pruebas seg&amp;uacute;n la documentaci&amp;oacute;n …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Doctest&lt;/code&gt; es un framework que viene en Python el cual permite desarrollar aplicaciones utilizando TDD (&lt;a href="https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas"&gt;Desarrollo guiado por pruebas&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;El TDD exige escribir las pruebas primero y la refactorizaci&amp;oacute;n del c&amp;oacute;digo para llegar al resultado deseado.&lt;/p&gt;
&lt;p&gt;En este caso se usar&amp;aacute; &lt;code&gt;doctest&lt;/code&gt; el cual permite realizar pruebas seg&amp;uacute;n la documentaci&amp;oacute;n que se tenga escrita en el c&amp;oacute;digo. Significa que es necesario tener una documentaci&amp;oacute;n clara para cada funci&amp;oacute;n antes de desarrollarla, de esta forma se tiene claro los casos de funcionamiento correcto de la funci&amp;oacute;n y los casos en los cuales puede fallar.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de ejemplo es el de una funci&amp;oacute;n que permite calcular la ra&amp;iacute;z cuadrada de un n&amp;uacute;mero.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo math para calcular la raiz cuadrada."&gt;Se importa el m&amp;oacute;dulo math para calcular la raiz cuadrada.&lt;/h1&gt;
&lt;p&gt;import math&lt;/p&gt;
&lt;h1 id="funcion raiz cuadrada."&gt;Funci&amp;oacute;n raiz cuadrada.&lt;/h1&gt;
&lt;p&gt;def RaizCuadrada(a):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;"""

&amp;gt;&amp;gt;&amp;gt; RaizCuadrada(4)

2.0

&amp;gt;&amp;gt;&amp;gt; RaizCuadrada(9)

3.0

&amp;gt;&amp;gt;&amp;gt; RaizCuadrada(25)

5.0

&amp;gt;&amp;gt;&amp;gt; RaizCuadrada(0)

0.0

&amp;gt;&amp;gt;&amp;gt; RaizCuadrada(-1)

Traceback (most recent call last):

    ...

ValueError: a debe ser &amp;gt;= 0

"""

#Si a es mayor o igual a cero se calcula la raiz cuadrada

if a &amp;gt;= 0:

    return math.sqrt(a)

#Si es menor a cero se genera una excepci&amp;oacute;n donde se informa que a debe ser mayor o igual a cero.

else:

    raise ValueError("a debe ser &amp;gt;= 0")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Como se muestra se genera en la documentaci&amp;oacute;n una serie de casos de ejecuci&amp;oacute;n de la funci&amp;oacute;n donde debe devolver un valor correcto y si se pasa un valor que no puede ser calculado devuelve la excepci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;Para realizar la prueba se ejecuta el c&amp;oacute;digo realizando una llamada al m&amp;oacute;dulo &lt;code&gt;doctest&lt;/code&gt; y modo &lt;code&gt;verbose&lt;/code&gt;:
&lt;code&gt;python
python -m doctest -v prueba-raizcuadrada.py&lt;/code&gt;
El resultado es el siguiente:
```python
Trying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RaizCuadrada(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expecting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;p&gt;Trying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RaizCuadrada(9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expecting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;p&gt;Trying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RaizCuadrada(25)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expecting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;p&gt;Trying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RaizCuadrada(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expecting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;p&gt;Trying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RaizCuadrada(-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expecting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):

    ...

ValueError: a debe ser &amp;gt;= 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;p&gt;1 items had no tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prueba-raizcuadrada
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 items passed all tests:&lt;/p&gt;
&lt;p&gt;5 tests in prueba-raizcuadrada.RaizCuadrada&lt;/p&gt;
&lt;p&gt;5 tests in 2 items.&lt;/p&gt;
&lt;p&gt;5 passed and 0 failed.&lt;/p&gt;
&lt;p&gt;Test passed.
```&lt;/p&gt;
&lt;p&gt;Como se muestra todos los casos pasaron el test.
Pueden revisar la siguiente documentaci&amp;oacute;n y tutoriales:
La documentaci&amp;oacute;n oficial la puede revisar en el siguiente &lt;a href="https://docs.python.org/2/library/doctest.html"&gt;enlace&lt;/a&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://magmax9.blogspot.com/2011/09/python-como-hacer-pruebas-1.html"&gt;Como hacer pruebas 1: Doctest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythontesting.net/framework/doctest/doctest-introduction/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A%20PythonTesting%20%28Python%20Testing%29"&gt;Introducci&amp;oacute;n a doctest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/doctest/"&gt;Otro tutorial de Doctest&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En otro art&amp;iacute;culo se explicar&amp;aacute; como separar los diferentes casos en un archivo de texto y el programa en un script aparte.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="doctest"></category></entry><entry><title>Analizando código Python con Pylint</title><link href="https://ecrespo.github.io/analizando-codigo-python-con-pylint.html" rel="alternate"></link><published>2012-12-11T09:00:00-05:30</published><updated>2012-12-11T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-11:/analizando-codigo-python-con-pylint.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Pylint&lt;/code&gt; es una herramienta de an&amp;aacute;lisis de c&amp;oacute;digo creada por LogiLab.  Es m&amp;aacute;s complejo que &lt;code&gt;Pyflakes&lt;/code&gt; y permite m&amp;aacute;s personalizaci&amp;oacute;n. Para m&amp;aacute;s informaci&amp;oacute;n de pylint puede revisar el &lt;a href="https://www.logilab.org/card/pylint_manual"&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se puede instalar &lt;code&gt;pylint&lt;/code&gt; por medio de &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt; y si es una distribuci&amp;oacute;n de Linux basada en Debian se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Pylint&lt;/code&gt; es una herramienta de an&amp;aacute;lisis de c&amp;oacute;digo creada por LogiLab.  Es m&amp;aacute;s complejo que &lt;code&gt;Pyflakes&lt;/code&gt; y permite m&amp;aacute;s personalizaci&amp;oacute;n. Para m&amp;aacute;s informaci&amp;oacute;n de pylint puede revisar el &lt;a href="https://www.logilab.org/card/pylint_manual"&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se puede instalar &lt;code&gt;pylint&lt;/code&gt; por medio de &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt; y si es una distribuci&amp;oacute;n de Linux basada en Debian se puede instalar v&amp;iacute;a &lt;code&gt;apt-get&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
easy_install  pylint&lt;/code&gt;
&lt;code&gt;python
pip install pylint&lt;/code&gt;
&lt;code&gt;apt-get install pylint&lt;/code&gt;
La salida de &lt;code&gt;pylint&lt;/code&gt; puede ser texto crudo o puede ser en formato html. Los mensajes tienen el siguiente formato:
TIPO_MENSAJE: LINEA:[OBJECTO:] MENSAJE&lt;/p&gt;
&lt;p&gt;El tipo de mensaje puede ser de la siguiente forma:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[R]: Significa que se recomienda la refactorizaci&amp;oacute;n del c&amp;oacute;digo.&lt;/li&gt;
&lt;li&gt;[C]: Significa que en el c&amp;oacute;digo hubo violaci&amp;oacute;n de estilos.&lt;/li&gt;
&lt;li&gt;[W]: Es una alarma por un problema menor.&lt;/li&gt;
&lt;li&gt;[E]: Significa mensaje de error o un potencial bug.&lt;/li&gt;
&lt;li&gt;[F]: Indica un error grave, bloqueo para an&amp;aacute;lisis futuros.&lt;/li&gt;
&lt;li&gt;Se usar&amp;aacute; el mismo c&amp;oacute;digo del art&amp;iacute;culo anterior:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np
from pudb import set_trace; set_trace()
import string
a = np.arange(10)
print a
print a[8]
print a[9]
for i in a:
    if i == plataforma:
        print i
```&lt;/p&gt;
&lt;p&gt;Este script se salva con el nombre de &lt;code&gt;arreglo.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ahora se ejecutar&amp;aacute; &lt;code&gt;pylint&lt;/code&gt; y se le pasa como argumento el archivo &lt;code&gt;arreglo.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;La salida de la ejecuci&amp;oacute;n de &lt;code&gt;pylint&lt;/code&gt; se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python
&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;* Module arreglo&lt;/p&gt;
&lt;p&gt;C:  1,0: Missing docstring&lt;/p&gt;
&lt;p&gt;C:  7,28: More than one statement on a single line&lt;/p&gt;
&lt;p&gt;W:  8,0: Uses of a deprecated module 'string'&lt;/p&gt;
&lt;p&gt;C: 12,0: Invalid name "a" (should match (([A-Z_][A-Z0-9_]&lt;em&gt;)|(__.&lt;/em&gt;__))$)&lt;/p&gt;
&lt;p&gt;E: 18,12: Undefined variable 'plataforma'&lt;/p&gt;
&lt;p&gt;W:  8,0: Unused import string&lt;/p&gt;
&lt;p&gt;Report&lt;/p&gt;
&lt;p&gt;======&lt;/p&gt;
&lt;p&gt;12 statements analysed.&lt;/p&gt;
&lt;p&gt;Duplication&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;+-------------------------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|                         |now   |previous |difference |&lt;/p&gt;
&lt;p&gt;+=========================+======+=========+===========+&lt;/p&gt;
&lt;p&gt;|nb duplicated lines      |0     |0        |=          |&lt;/p&gt;
&lt;p&gt;+-------------------------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|percent duplicated lines |0.000 |0.000    |=          |&lt;/p&gt;
&lt;p&gt;+-------------------------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;Statistics by type&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;+---------+-------+-----------+-----------+------------+---------+&lt;/p&gt;
&lt;p&gt;|type     |number |old number |difference |%documented |%badname |&lt;/p&gt;
&lt;p&gt;+=========+=======+===========+===========+============+=========+&lt;/p&gt;
&lt;p&gt;|module   |1      |1          |=          |0.00        |0.00     |&lt;/p&gt;
&lt;p&gt;+---------+-------+-----------+-----------+------------+---------+&lt;/p&gt;
&lt;p&gt;|class    |0      |0          |=          |0           |0        |&lt;/p&gt;
&lt;p&gt;+---------+-------+-----------+-----------+------------+---------+&lt;/p&gt;
&lt;p&gt;|method   |0      |0          |=          |0           |0        |&lt;/p&gt;
&lt;p&gt;+---------+-------+-----------+-----------+------------+---------+&lt;/p&gt;
&lt;p&gt;|function |0      |0          |=          |0           |0        |&lt;/p&gt;
&lt;p&gt;+---------+-------+-----------+-----------+------------+---------+&lt;/p&gt;
&lt;p&gt;External dependencies&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;numpy (arreglo)


pudb


  \-set_trace (arreglo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Raw metrics&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;+----------+-------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|type      |number |%     |previous |difference |&lt;/p&gt;
&lt;p&gt;+==========+=======+======+=========+===========+&lt;/p&gt;
&lt;p&gt;|code      |11     |64.71 |11       |=          |&lt;/p&gt;
&lt;p&gt;+----------+-------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|docstring |0      |0.00  |0        |=          |&lt;/p&gt;
&lt;p&gt;+----------+-------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|comment   |3      |17.65 |3        |=          |&lt;/p&gt;
&lt;p&gt;+----------+-------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|empty     |3      |17.65 |3        |=          |&lt;/p&gt;
&lt;p&gt;+----------+-------+------+---------+-----------+&lt;/p&gt;
&lt;p&gt;Messages by category&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;+-----------+-------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|type       |number |previous |difference |&lt;/p&gt;
&lt;p&gt;+===========+=======+=========+===========+&lt;/p&gt;
&lt;p&gt;|convention |3      |3        |=          |&lt;/p&gt;
&lt;p&gt;+-----------+-------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|refactor   |0      |0        |=          |&lt;/p&gt;
&lt;p&gt;+-----------+-------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|warning    |2      |2        |=          |&lt;/p&gt;
&lt;p&gt;+-----------+-------+---------+-----------+&lt;/p&gt;
&lt;p&gt;|error      |1      |1        |=          |&lt;/p&gt;
&lt;p&gt;+-----------+-------+---------+-----------+&lt;/p&gt;
&lt;p&gt;Messages&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;|message id |occurrences |&lt;/p&gt;
&lt;p&gt;+===========+============+&lt;/p&gt;
&lt;p&gt;|W0611      |1           |&lt;/p&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;|W0402      |1           |&lt;/p&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;|E0602      |1           |&lt;/p&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;|C0321      |1           |&lt;/p&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;|C0111      |1           |&lt;/p&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;|C0103      |1           |&lt;/p&gt;
&lt;p&gt;+-----------+------------+&lt;/p&gt;
&lt;p&gt;Global evaluation&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Your code has been rated at 1.67/10 (previous run: 1.67/10)
```&lt;/p&gt;
&lt;p&gt;Si se desea m&amp;aacute;s informaci&amp;oacute;n de la informaci&amp;oacute;n generada en el reporte de pylint se puede revisar la documentaci&amp;oacute;n antes &lt;a href="https://www.logilab.org/card/pylint_manual"&gt;mencionada&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="python"></category><category term="PyLint"></category></entry><entry><title>Analizar código Python con Pyflakes</title><link href="https://ecrespo.github.io/analizar-codigo-python-con-pyflakes.html" rel="alternate"></link><published>2012-12-10T09:00:00-05:30</published><updated>2012-12-10T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-10:/analizar-codigo-python-con-pyflakes.html</id><summary type="html">&lt;p&gt;Pyflakes es una herramienta de an&amp;aacute;lisis de c&amp;oacute;digo Python.&lt;/p&gt;
&lt;p&gt;Pyflakes puede detectar potenciales problemas como:&lt;/p&gt;
&lt;p&gt;M&amp;oacute;dulos importados sin usar.
Variables sin usar.&lt;/p&gt;
&lt;p&gt;Para instalarlo se puede bajar desde &lt;a href="https://pypi.org/project/pyflakes/"&gt;PyPI&lt;/a&gt; &amp;oacute; desde el sitio de &lt;a href="https://launchpad.net/pyflakes"&gt;Launchpad&lt;/a&gt;; tambi&amp;eacute;n se puede instalar con easy_install &amp;oacute; pip y para las distribuciones basadas en Debian …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pyflakes es una herramienta de an&amp;aacute;lisis de c&amp;oacute;digo Python.&lt;/p&gt;
&lt;p&gt;Pyflakes puede detectar potenciales problemas como:&lt;/p&gt;
&lt;p&gt;M&amp;oacute;dulos importados sin usar.
Variables sin usar.&lt;/p&gt;
&lt;p&gt;Para instalarlo se puede bajar desde &lt;a href="https://pypi.org/project/pyflakes/"&gt;PyPI&lt;/a&gt; &amp;oacute; desde el sitio de &lt;a href="https://launchpad.net/pyflakes"&gt;Launchpad&lt;/a&gt;; tambi&amp;eacute;n se puede instalar con easy_install &amp;oacute; pip y para las distribuciones basadas en Debian se instala v&amp;iacute;a &lt;code&gt;apt-get&lt;/code&gt; o &lt;code&gt;aptitude&lt;/code&gt;.
&lt;code&gt;easy_install pyflakes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pyflakes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get install pyflakes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para probar el uso de &lt;code&gt;pyflakes&lt;/code&gt; se usar&amp;aacute; el c&amp;oacute;digo del tutorial de debugging, se agregar&amp;aacute; la importaci&amp;oacute;n de string y una instrucci&amp;oacute;n if donde se compara el valor de i con una variable llamada plataforma.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;p&gt;from pudb import set_trace; set_trace()&lt;/p&gt;
&lt;p&gt;import string&lt;/p&gt;
&lt;p&gt;a = np.arange(10)&lt;/p&gt;
&lt;p&gt;print a&lt;/p&gt;
&lt;p&gt;print a[8]&lt;/p&gt;
&lt;p&gt;print a[9]&lt;/p&gt;
&lt;p&gt;for i in a:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if i == plataforma:

    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;``
Este script se salvar&amp;aacute; con el nombre de&lt;/code&gt;arreglo.py`.&lt;/p&gt;
&lt;p&gt;Ahora se ejecutar&amp;aacute; &lt;code&gt;pyflakes&lt;/code&gt;:
```python
pyflakes arreglo.py &lt;/p&gt;
&lt;p&gt;arreglo.py:8: 'string' imported but unused&lt;/p&gt;
&lt;p&gt;arreglo.py:18: undefined name 'plataforma'
```&lt;/p&gt;
&lt;p&gt;La ejecuci&amp;oacute;n devuelve la l&amp;iacute;nea donde hay definiciones sin usar (import string) y una variable sin definir (plataforma).&lt;/p&gt;
&lt;p&gt;Al eliminar la importaci&amp;oacute;n de la l&amp;iacute;nea 8 y areglar la definici&amp;oacute;n de la variable plataforma o cambiar dicha parte del c&amp;oacute;digo se eliminar&amp;aacute; los mensajes que devuelve pyflakes. Esto permite prevenir errores en el c&amp;oacute;digo.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Pyflakes"></category></entry><entry><title>Depurar código python con ipython.</title><link href="https://ecrespo.github.io/depurar-codigo-python-con-ipython.html" rel="alternate"></link><published>2012-12-06T09:00:00-05:30</published><updated>2012-12-06T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-06:/depurar-codigo-python-con-ipython.html</id><summary type="html">&lt;p&gt;En los 3 art&amp;iacute;culos anteriores se explic&amp;oacute; como realizar profiling con 3 herramientas (timeit, line_profiler y cProfile). Ahora se explicar&amp;aacute; como depurar c&amp;oacute;digo python.&lt;/p&gt;
&lt;p&gt;En este caso se explicar&amp;aacute; la depuraci&amp;oacute;n de c&amp;oacute;digo utilizando &lt;code&gt;ipython&lt;/code&gt;.
&lt;code&gt;ipython&lt;/code&gt; aparte de permitir hacer profiling tambi&amp;eacute;n permite realizar depuraci&amp;oacute;n de c&amp;oacute;digo.&lt;/p&gt;
&lt;p&gt;Se mostrar&amp;aacute; el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En los 3 art&amp;iacute;culos anteriores se explic&amp;oacute; como realizar profiling con 3 herramientas (timeit, line_profiler y cProfile). Ahora se explicar&amp;aacute; como depurar c&amp;oacute;digo python.&lt;/p&gt;
&lt;p&gt;En este caso se explicar&amp;aacute; la depuraci&amp;oacute;n de c&amp;oacute;digo utilizando &lt;code&gt;ipython&lt;/code&gt;.
&lt;code&gt;ipython&lt;/code&gt; aparte de permitir hacer profiling tambi&amp;eacute;n permite realizar depuraci&amp;oacute;n de c&amp;oacute;digo.&lt;/p&gt;
&lt;p&gt;Se mostrar&amp;aacute; el c&amp;oacute;digo de la generaci&amp;oacute;n de un arreglo, luego se muestra en pantalla el arreglo, el valor de un elemento de ese arreglo y el recorrido de los elementos del arreglo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;p&gt;a = np.arange(10)&lt;/p&gt;
&lt;p&gt;print a&lt;/p&gt;
&lt;p&gt;print a[8]&lt;/p&gt;
&lt;p&gt;print a[9]&lt;/p&gt;
&lt;p&gt;for i in a:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print a[10]
```&lt;/p&gt;
&lt;p&gt;El resultado de ejecutar el script es el siguiente:&lt;/p&gt;
&lt;p&gt;```
ecrespo@jewel:~/proyectos/ernesto-ecrespo.blogspot/debugipython$ python arreglo.py &lt;/p&gt;
&lt;p&gt;[0 1 2 3 4 5 6 7 8 9]&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;Traceback (most recent call last):&lt;/p&gt;
&lt;p&gt;File "arreglo.py", line 17, in &lt;module&gt;&lt;/module&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print a[10]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IndexError: index out of bounds
```&lt;/p&gt;
&lt;p&gt;Se muestra el mensaje de error de tratar de presentar en pantalla el valor del elemento 10 del arreglo a (que no existe).&lt;/p&gt;
&lt;p&gt;Se ejecuta a continuaci&amp;oacute;n &lt;code&gt;ipython&lt;/code&gt; desde la consola Linux, ipython entra en un interprete interactivo, ah&amp;iacute; se ejecuta el comando &lt;code&gt;%run script.py&lt;/code&gt;. Esto hace que se inicie el modo depuraci&amp;oacute;n con el script que se pasa como argumento:&lt;/p&gt;
&lt;p&gt;```python
ecrespo@jewel:~/proyectos/ernesto-ecrespo.blogspot/debugipython$ ipython&lt;/p&gt;
&lt;p&gt;Python 2.7.3rc2 (default, Apr 22 2012, 22:35:38) &lt;/p&gt;
&lt;p&gt;Type "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;p&gt;IPython 0.13.1 -- An enhanced Interactive Python.&lt;/p&gt;
&lt;p&gt;?         -&amp;gt; Introduction and overview of IPython's features.&lt;/p&gt;
&lt;p&gt;%quickref -&amp;gt; Quick reference.&lt;/p&gt;
&lt;p&gt;help      -&amp;gt; Python's own help system.&lt;/p&gt;
&lt;p&gt;object?   -&amp;gt; Details about 'object', use 'object??' for extra details.&lt;/p&gt;
&lt;p&gt;In [1]: %run arreglo.py&lt;/p&gt;
&lt;p&gt;[0 1 2 3 4 5 6 7 8 9]&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;IndexError                                Traceback (most recent call last)&lt;/p&gt;
&lt;p&gt;/usr/lib/python2.7/dist-packages/IPython/utils/py3compat.pyc in execfile(fname, *where)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;176             else:


177                 filename = fname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;--&amp;gt; 178             &lt;strong&gt;builtin&lt;/strong&gt;.execfile(filename, *where)&lt;/p&gt;
&lt;p&gt;/home/ecrespo/proyectos/ernesto-ecrespo.blogspot/debugipython/arreglo.py in &lt;module&gt;()&lt;/module&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 15     print i


 16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;---&amp;gt; 17 print a[10]&lt;/p&gt;
&lt;p&gt;IndexError: index out of bounds&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El resultado es la ejecuci&amp;oacute;n del script y se&amp;ntilde;ala la secci&amp;oacute;n donde se tiene el error.&lt;/p&gt;
&lt;p&gt;Ahora se ejecuta el comando &lt;code&gt;%debug&lt;/code&gt;:
```python
In [2]: %debug&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/ecrespo/proyectos/ernesto-ecrespo.blogspot/debugipython/arreglo.py(17)&lt;module&gt;()
     15     print i
     16 
---&amp;gt; 17 print a[10]
```
Se ve claramente que el error se encuentra en la l&amp;iacute;nea 17 del script, donde se trata de mostrar en pantalla el elemento 10 del arreglo el cual no existe.&lt;/module&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se puede listar el c&amp;oacute;digo al ejecutar el comando &lt;code&gt;list&lt;/code&gt;:
&lt;code&gt;python
ipdb&amp;gt; list
     12 print a[9]
     13 
     14 for i in a:
     15     print i
     16 
---&amp;gt; 17 print a[10]&lt;/code&gt;
Evaluar c&amp;oacute;digo. Se puede ejecutar una instrucci&amp;oacute;n python para evaluar el tama&amp;ntilde;o del arreglo.
&lt;code&gt;python
ipdb&amp;gt; len(a)
10&lt;/code&gt;
Se muestra en pantalla el valor de a:
&lt;code&gt;python
ipdb&amp;gt; print a
[0 1 2 3 4 5 6 7 8 9]&lt;/code&gt;
Ver las llamadas del stack:Es un stack que contiene informaci&amp;oacute;n acerca de las funciones activas de un programa en ejecuci&amp;oacute;n. El comando para ver el stack es bt:&lt;/p&gt;
&lt;p&gt;```python
ipdb&amp;gt; bt&lt;/p&gt;
&lt;p&gt;/usr/lib/python2.7/dist-packages/IPython/utils/py3compat.py(178)execfile()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;174             if isinstance(fname, unicode):


175                 filename = fname.encode(sys.getfilesystemencoding())


176             else:


177                 filename = fname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;--&amp;gt; 178             &lt;strong&gt;builtin&lt;/strong&gt;.execfile(filename, *where)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/ecrespo/proyectos/ernesto-ecrespo.blogspot/debugipython/arreglo.py(17)&lt;module&gt;()&lt;/module&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; 13


 14 for i in a:


 15     print i


 16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;---&amp;gt; 17 print a[10]&lt;/p&gt;
&lt;p&gt;Moverse hacia arriba en el stack se logra al ejecutar el comando &lt;code&gt;u&lt;/code&gt;:
```python
ipdb&amp;gt; u&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/usr/lib/python2.7/dist-packages/IPython/utils/py3compat.py(178)execfile()
    176             else:
    177                 filename = fname
--&amp;gt; 178             &lt;strong&gt;builtin&lt;/strong&gt;.execfile(filename, *where)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para moverse hacia abajo en el stack se logra al ejecutar el comando d:
ipdb&amp;gt; d&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/ecrespo/proyectos/ernesto-ecrespo.blogspot/debugipython/arreglo.py(17)&lt;module&gt;()
     15     print i
     16 
---&amp;gt; 17 print a[10]
```&lt;/module&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para salirse del modo depuraci&amp;oacute;n se ejecuta el comando &lt;code&gt;exit&lt;/code&gt;, para salirse del interprete de comandos &lt;code&gt;ipython&lt;/code&gt; se vuelve a ejectuar &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se tiene claro que el error en el script se encuentra en la l&amp;iacute;nea 17, donde se trata de imprimir en pantalla un elemento del arreglo que no existe.&lt;/p&gt;
&lt;p&gt;De esta forma se puede realizar depuraci&amp;oacute;n de c&amp;oacute;digo python con &lt;code&gt;ipython&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="python"></category><category term="ipython"></category></entry><entry><title>Profiling de un script python con cProfile</title><link href="https://ecrespo.github.io/profiling-de-un-script-python-con-cprofile.html" rel="alternate"></link><published>2012-12-05T09:00:00-05:30</published><updated>2012-12-05T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-05:/profiling-de-un-script-python-con-cprofile.html</id><summary type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre profiling, otra herramienta para llevar adelante el profiling se llama &lt;code&gt;cProfile&lt;/code&gt;, esta es una extensi&amp;oacute;n en C que se introdujo en Python 2.5. Se usa para determinar Profiling deterministico (se mide el tiempo de manera precisa en vez de muestreo).&lt;/p&gt;
&lt;p&gt;El ejemplo que se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre profiling, otra herramienta para llevar adelante el profiling se llama &lt;code&gt;cProfile&lt;/code&gt;, esta es una extensi&amp;oacute;n en C que se introdujo en Python 2.5. Se usa para determinar Profiling deterministico (se mide el tiempo de manera precisa en vez de muestreo).&lt;/p&gt;
&lt;p&gt;El ejemplo que se desarrollar&amp;aacute; es el mismo de la generaci&amp;oacute;n de la matriz inversa, la diferencia ser&amp;aacute; que la definici&amp;oacute;n del valor de n de la matriz y su generaci&amp;oacute;n estar&amp;aacute; en una funci&amp;oacute;n llamada main. Est&amp;aacute; funci&amp;oacute;n luego se llamar&amp;aacute; desde &lt;code&gt;cProfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;p&gt;import cProfile&lt;/p&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="funcion que genera matrices inversas."&gt;funcion que genera matrices inversas.&lt;/h1&gt;
&lt;p&gt;def Inversa(n):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = np.matrix(np.random.rand(n, n))

return a.I
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def main():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se define una lista de  tama&amp;ntilde;os de la matriz

tamagno = 2**np.arange(0,12)

#Se recorre la lista de tama&amp;ntilde;os y se invierte cada matriz con la

#funcion.

for n in tamagno:

    Inversa(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se ejecuta la funcion main desde la llamada run de cprofile."&gt;Se ejecuta la funci&amp;oacute;n main desde la llamada run de cProfile.&lt;/h1&gt;
&lt;p&gt;cProfile.run('main()')
```&lt;/p&gt;
&lt;p&gt;Al ejecutar el script se tiene como resultado el profiling de la generaci&amp;oacute;n de la matriz inversa:&lt;/p&gt;
&lt;p&gt;```
ecrespo@jewel:~/proyectos/ernesto-ecrespo.blogspot/cprofile$ python matrizinversa.py &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     809 function calls in 5.764 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ordered by: standard name&lt;/p&gt;
&lt;p&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    1    0.000    0.000    5.764    5.764 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)

   24    0.000    0.000    0.058    0.002 defmatrix.py:233(__new__)

   36    0.000    0.000    0.000    0.000 defmatrix.py:279(__array_finalize__)

   12    0.000    0.000    0.000    0.000 defmatrix.py:55(asmatrix)

   12    0.015    0.001    5.467    0.456 defmatrix.py:808(getI)

    1    0.000    0.000    0.000    0.000 dual.py:12(&amp;lt;module&amp;gt;)

   12    0.000    0.000    0.000    0.000 linalg.py:127(_to_native_byte_order)

   12    0.000    0.000    0.257    0.021 linalg.py:139(_fastCopyAndTranspose)

   12    0.000    0.000    0.000    0.000 linalg.py:151(_assertRank2)

   12    0.000    0.000    0.000    0.000 linalg.py:157(_assertSquareness)

   12    0.000    0.000    5.396    0.450 linalg.py:244(solve)

   12    0.020    0.002    5.452    0.454 linalg.py:404(inv)

   36    0.000    0.000    0.000    0.000 linalg.py:66(_makearray)

   36    0.000    0.000    0.000    0.000 linalg.py:71(isComplexType)

   24    0.000    0.000    0.000    0.000 linalg.py:84(_realType)

   12    0.000    0.000    0.000    0.000 linalg.py:99(_commonType)

   12    0.007    0.001    5.751    0.479 matrizinversa.py:12(Inversa)

    1    0.013    0.013    5.764    5.764 matrizinversa.py:17(main)

   36    0.000    0.000    0.000    0.000 numeric.py:167(asarray)

   12    0.000    0.000    0.035    0.003 numeric.py:1830(identity)

   36    0.000    0.000    0.000    0.000 {getattr}

   72    0.000    0.000    0.000    0.000 {isinstance}

   60    0.000    0.000    0.000    0.000 {issubclass}

   60    0.000    0.000    0.000    0.000 {len}

   12    0.000    0.000    0.000    0.000 {max}

   24    0.000    0.000    0.000    0.000 {method '__array_prepare__' of 'numpy.ndarray' objects}

   24    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}

   12    0.059    0.005    0.059    0.005 {method 'astype' of 'numpy.ndarray' objects}

   12    0.058    0.005    0.058    0.005 {method 'copy' of 'numpy.ndarray' objects}

    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

   24    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}

   12    0.220    0.018    0.220    0.018 {method 'rand' of 'mtrand.RandomState' objects}

   12    0.000    0.000    0.000    0.000 {method 'transpose' of 'numpy.ndarray' objects}

   12    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}

   12    0.000    0.000    0.000    0.000 {min}

   24    0.257    0.011    0.257    0.011 {numpy.core.multiarray._fastCopyAndTranspose}

    1    0.000    0.000    0.000    0.000 {numpy.core.multiarray.arange}

   36    0.000    0.000    0.000    0.000 {numpy.core.multiarray.array}

   24    0.035    0.001    0.035    0.001 {numpy.core.multiarray.zeros}

   12    5.078    0.423    5.078    0.423 {numpy.linalg.lapack_lite.dgesv}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La salida es la misma que se mostr&amp;oacute; en el art&amp;iacute;culo de timeit con ipython.  Como adicional al &lt;a href="http://blog.crespo.org.ve/2012/12/profiling-de-un-script-python-con-timeit.html"&gt;art&amp;iacute;culo de timeit&lt;/a&gt; se muestra a continuaci&amp;oacute;n el significado de cada columna:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ncalls&lt;/code&gt;: N&amp;uacute;mero de llamadas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tottime&lt;/code&gt;: Tiempo total gastado en una funci&amp;oacute;n.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;percall&lt;/code&gt;: Tiempo por llamada, calculado el tiempo total la cantidad de llamadas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cumtime&lt;/code&gt;: Tiempo acumulado gastado en una funci&amp;oacute;n y llamadas a funciones por la funci&amp;oacute;n, incluyendo llamadas recursivas.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El c&amp;oacute;digo del script lo pueden bajar desde &lt;a href="https://bitbucket.org/ecrespo/ernesto-ecrespo.blogspot/src/a3294957f9a7a41932385d064d7799ad1dd80b60/cprofile/matrizinversa.py?at=default"&gt;bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="python"></category><category term="cProfile"></category><category term="Profiling"></category></entry><entry><title>Profiling de un script python con line_profiler</title><link href="https://ecrespo.github.io/profiling-de-un-script-python-con-line_profiler.html" rel="alternate"></link><published>2012-12-04T09:00:00-05:30</published><updated>2012-12-04T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-04:/profiling-de-un-script-python-con-line_profiler.html</id><summary type="html">&lt;p&gt;Ahora se mostrar&amp;aacute; el uso de la herramienta &lt;code&gt;line_profiler&lt;/code&gt; para hacer profiling de programas Python.&lt;/p&gt;
&lt;p&gt;Lo primero que se tiene que hacer es instalar &lt;code&gt;line_profiler&lt;/code&gt; con el comando &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt;:
&lt;code&gt;easy_install line_profiler&lt;/code&gt;
&lt;code&gt;pip install line_profiler&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo que se va a revisar es el mismo del art&amp;iacute;culo anterior (matriz …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ahora se mostrar&amp;aacute; el uso de la herramienta &lt;code&gt;line_profiler&lt;/code&gt; para hacer profiling de programas Python.&lt;/p&gt;
&lt;p&gt;Lo primero que se tiene que hacer es instalar &lt;code&gt;line_profiler&lt;/code&gt; con el comando &lt;code&gt;easy_install&lt;/code&gt; o &lt;code&gt;pip&lt;/code&gt;:
&lt;code&gt;easy_install line_profiler&lt;/code&gt;
&lt;code&gt;pip install line_profiler&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo que se va a revisar es el mismo del art&amp;iacute;culo anterior (matriz inversa). La diferencia es que se define en la funci&amp;oacute;n que genera la matriz inversa el uso del decorador profile.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se define el uso del decorador profile. en la funcion que genera matrices inversas."&gt;Se define el uso del decorador profile. En la funcion que genera matrices inversas.&lt;/h1&gt;
&lt;p&gt;@profile&lt;/p&gt;
&lt;p&gt;def Inversa(n):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = np.matrix(np.random.rand(n, n))

return a.I
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se define una lista de tamanos de la matriz"&gt;Se define una lista de  tama&amp;ntilde;os de la matriz&lt;/h1&gt;
&lt;p&gt;tamagno = 2 ** np.arange(0, 12)&lt;/p&gt;
&lt;h1 id="se recorre la lista de tamanos y se invierte cada matriz con la"&gt;Se recorre la lista de tama&amp;ntilde;os y se invierte cada matriz con la&lt;/h1&gt;
&lt;h1 id="funcion."&gt;funcion.&lt;/h1&gt;
&lt;p&gt;for n in tamagno:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Inversa(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```
Para realizar el profiling se ejecuta el siguiente comando:&lt;/p&gt;
&lt;p&gt;```python
ecrespo@jewel:~/proyectos/ernesto-ecrespo.blogspot/line_profiler$ kernprof.py -l -v  matrizinversa.py &lt;/p&gt;
&lt;p&gt;Wrote profile results to matrizinversa.py.lprof&lt;/p&gt;
&lt;p&gt;Timer unit: 1e-06 s&lt;/p&gt;
&lt;p&gt;File: matrizinversa.py&lt;/p&gt;
&lt;p&gt;Function: Inversa at line 10&lt;/p&gt;
&lt;p&gt;Total time: 6.05993 s&lt;/p&gt;
&lt;p&gt;Line #      Hits         Time  Per Hit   % Time  Line Contents&lt;/p&gt;
&lt;p&gt;==============================================================&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10                                           @profile

11                                           def Inversa(n):

12        12       260506  21708.8      4.3      a = np.matrix(np.random.rand(n, n))

13        12      5799424 483285.3     95.7      return a.I
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El resultado muestra el tiempo total de ejecuci&amp;oacute;n, Luego muestra cada l&amp;iacute;nea de ejecuci&amp;oacute;n, y el porcentaje de tiempo que se ha ejecutado. Se nota que la generaci&amp;oacute;n de la matriz no tarda mucho, pero al invertirla si un 95,7% del tiempo de ejecuci&amp;oacute;n.
El significado de cada par&amp;aacute;metro es:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Line&lt;/code&gt;: Es el n&amp;uacute;mero de l&amp;iacute;nea en el archivo.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hits&lt;/code&gt;: Es el n&amp;uacute;mero de veces que la l&amp;iacute;nea se ejecuta.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time&lt;/code&gt;: Tiempo que gasta al ejecutar cada l&amp;iacute;nea.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Per Hit&lt;/code&gt;: Tiempo promedio que se gasta al ejecutar cada l&amp;iacute;nea.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;% Time&lt;/code&gt;: Porcentaje de tiempo que se gasta al ejecutar la l&amp;iacute;nea relativo al tiempo que se gasta en ejecutar todas las l&amp;iacute;neas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El c&amp;oacute;digo del script se encuentra en &lt;a href="https://bitbucket.org/ecrespo/ernesto-ecrespo.blogspot/src/dbfc744caa2138355d0be1811a1edbde5379f189/line_profiler/matrizinversa.py?at=default"&gt;bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="Python"></category><category term="Profiling"></category><category term="line_profiler"></category></entry><entry><title>Profiling de un script python con timeit</title><link href="https://ecrespo.github.io/profiling-de-un-script-python-con-timeit.html" rel="alternate"></link><published>2012-12-03T09:00:00-05:30</published><updated>2012-12-03T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-03:/profiling-de-un-script-python-con-timeit.html</id><summary type="html">&lt;p&gt;El profiling permite conocer el tiempo que consume un programa en ejecutarse e incluso conocer cuanto tarda cada llamada de funciones de distintos m&amp;oacute;dulos utilizados.&lt;/p&gt;
&lt;p&gt;El ejemplo que se har&amp;aacute; es un script que tiene una funci&amp;oacute;n donde se le pasa el tama&amp;ntilde;o de la matriz NxN  generada de forma …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El profiling permite conocer el tiempo que consume un programa en ejecutarse e incluso conocer cuanto tarda cada llamada de funciones de distintos m&amp;oacute;dulos utilizados.&lt;/p&gt;
&lt;p&gt;El ejemplo que se har&amp;aacute; es un script que tiene una funci&amp;oacute;n donde se le pasa el tama&amp;ntilde;o de la matriz NxN  generada de forma aleatoria y devuelve la matriz inversa. Luego se genera una lista de tama&amp;ntilde;os de forma aletoria. Se crea un ciclo recorriendo la lista donde dentro del ciclo se crea la matriz inversa.&lt;/p&gt;
&lt;p&gt;El script se guarda con nombre &lt;code&gt;ej4.py&lt;/code&gt;.
El c&amp;oacute;digo del script se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se crea la funcion que invierte una matriz de valores aleatorios"&gt;Se crea la funci&amp;oacute;n que invierte una matriz de valores aleatorios&lt;/h1&gt;
&lt;p&gt;def Inversa(n):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = np.matrix(np.random.rand(n, n))

return a.I
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se define una lista de tamanos de la matriz"&gt;Se define una lista de  tama&amp;ntilde;os de la matriz&lt;/h1&gt;
&lt;p&gt;tamagno = 2 ** np.arange(0, 12)&lt;/p&gt;
&lt;h1 id="se recorre la lista de tamanos y se invierte cada matriz con la"&gt;Se recorre la lista de tama&amp;ntilde;os y se invierte cada matriz con la&lt;/h1&gt;
&lt;h1 id="funcion."&gt;funcion.&lt;/h1&gt;
&lt;p&gt;for n in tamagno:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Inversa(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Desde la consola se ejecuta  &lt;code&gt;ipython --pylab&lt;/code&gt;. Luego se ejecuta el comando &lt;code&gt;%run -t ej4.py&lt;/code&gt; el cual devuelve el tiempo de ejecuci&amp;oacute;n en la capa de usuario, capa de sistema. Luego se ejecuta &lt;code&gt;%run -p ej4.py&lt;/code&gt; el cual devuelve los tiempos de ejecuci&amp;oacute;n de cada funci&amp;oacute;n.
```python
ecrespo@jewel:~/bin/python/matplotlib$ ipython --pylab&lt;/p&gt;
&lt;p&gt;Python 2.7.3rc2 (default, Apr 22 2012, 22:35:38) &lt;/p&gt;
&lt;p&gt;Type "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;p&gt;IPython 0.13.1 -- An enhanced Interactive Python.&lt;/p&gt;
&lt;p&gt;?         -&amp;gt; Introduction and overview of IPython's features.&lt;/p&gt;
&lt;p&gt;%quickref -&amp;gt; Quick reference.&lt;/p&gt;
&lt;p&gt;help      -&amp;gt; Python's own help system.&lt;/p&gt;
&lt;p&gt;object?   -&amp;gt; Details about 'object', use 'object??' for extra details.&lt;/p&gt;
&lt;p&gt;Welcome to pylab, a matplotlib-based Python environment [backend: TkAgg].&lt;/p&gt;
&lt;p&gt;For more information, type 'help(pylab)'.&lt;/p&gt;
&lt;p&gt;In [1]:  %run -t ej4.py&lt;/p&gt;
&lt;p&gt;IPython CPU timings (estimated):&lt;/p&gt;
&lt;p&gt;User   :       8.79 s.&lt;/p&gt;
&lt;p&gt;System :       0.13 s.&lt;/p&gt;
&lt;p&gt;Wall time:       6.17 s.&lt;/p&gt;
&lt;p&gt;In [2]:  850 function calls in 6.201 seconds&lt;/p&gt;
&lt;p&gt;Ordered by: internal time&lt;/p&gt;
&lt;p&gt;ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   12    5.556    0.463    5.556    0.463 {numpy.linalg.lapack_lite.dgesv}


   24    0.236    0.010    0.236    0.010 {numpy.core.multiarray._fastCopyAndTranspose}


   12    0.229    0.019    0.229    0.019 {method 'rand' of 'mtrand.RandomState' objects}


   12    0.058    0.005    0.058    0.005 {method 'astype' of 'numpy.ndarray' objects}


   12    0.042    0.004    0.042    0.004 {method 'copy' of 'numpy.ndarray' objects}


   24    0.036    0.001    0.036    0.001 {numpy.core.multiarray.zeros}


   12    0.022    0.002    5.909    0.492 linalg.py:404(inv)


    1    0.012    0.012    6.200    6.200 ej4.py:5(&amp;lt;module&amp;gt;)


   12    0.006    0.001    6.188    0.516 ej4.py:9(Inversa)


    1    0.001    0.001    6.201    6.201 {execfile}


   12    0.000    0.000    5.851    0.488 linalg.py:244(solve)


    1    0.000    0.000    6.201    6.201 interactiveshell.py:2390(safe_execfile)


   12    0.000    0.000    0.036    0.003 numeric.py:1830(identity)


   12    0.000    0.000    5.909    0.492 defmatrix.py:808(getI)


   12    0.000    0.000    0.000    0.000 linalg.py:99(_commonType)


    1    0.000    0.000    0.000    0.000 {open}


   24    0.000    0.000    0.043    0.002 defmatrix.py:233(__new__)


   36    0.000    0.000    0.000    0.000 defmatrix.py:279(__array_finalize__)


   36    0.000    0.000    0.000    0.000 linalg.py:66(_makearray)


   36    0.000    0.000    0.000    0.000 {numpy.core.multiarray.array}


   12    0.000    0.000    0.236    0.020 linalg.py:139(_fastCopyAndTranspose)


   24    0.000    0.000    0.000    0.000 {method '__array_prepare__' of 'numpy.ndarray' objects}


   12    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}


   12    0.000    0.000    0.000    0.000 linalg.py:127(_to_native_byte_order)


   75    0.000    0.000    0.000    0.000 {isinstance}


   36    0.000    0.000    0.000    0.000 numeric.py:167(asarray)


   12    0.000    0.000    0.000    0.000 defmatrix.py:55(asmatrix)


   12    0.000    0.000    0.000    0.000 {method 'transpose' of 'numpy.ndarray' objects}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;60    0.000    0.000    0.000    0.000 {issubclass}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   12    0.000    0.000    0.000    0.000 linalg.py:151(_assertRank2)


   36    0.000    0.000    0.000    0.000 linalg.py:71(isComplexType)


   12    0.000    0.000    0.000    0.000 linalg.py:157(_assertSquareness)


   24    0.000    0.000    0.000    0.000 linalg.py:84(_realType)


   36    0.000    0.000    0.000    0.000 {getattr}


   61    0.000    0.000    0.000    0.000 {len}


    1    0.000    0.000    0.000    0.000 posixpath.py:312(normpath)


    1    0.000    0.000    0.000    0.000 posixpath.py:118(dirname)


   30    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}


    1    0.000    0.000    0.000    0.000 syspathcontext.py:55(__enter__)


    1    0.000    0.000    0.000    0.000 {posix.getcwdu}


   12    0.000    0.000    0.000    0.000 {max}


   24    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}


    1    0.000    0.000    0.000    0.000 {numpy.core.multiarray.arange}


    1    0.000    0.000    6.201    6.201 py3compat.py:173(execfile)


    1    0.000    0.000    0.000    0.000 posixpath.py:341(abspath)


    1    0.000    0.000    0.000    0.000 syspathcontext.py:62(__exit__)


   12    0.000    0.000    0.000    0.000 {min}


    1    0.000    0.000    0.000    0.000 posixpath.py:60(join)


    5    0.000    0.000    0.000    0.000 {method 'startswith' of 'unicode' objects}


    1    0.000    0.000    0.000    0.000 {_codecs.utf_8_decode}


    1    0.000    0.000    6.201    6.201 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)


    1    0.000    0.000    0.000    0.000 {method 'encode' of 'unicode' objects}


    1    0.000    0.000    0.000    0.000 {method 'split' of 'unicode' objects}


    1    0.000    0.000    0.000    0.000 {method 'rfind' of 'unicode' objects}


    1    0.000    0.000    0.000    0.000 posixpath.py:249(expanduser)


    1    0.000    0.000    0.000    0.000 utf_8.py:15(decode)


    1    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}


    1    0.000    0.000    0.000    0.000 posixpath.py:51(isabs)


    1    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}


    1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'unicode' objects}




    2    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}


    1    0.000    0.000    0.000    0.000 syspathcontext.py:52(__init__)


    1    0.000    0.000    0.000    0.000 {method 'join' of 'unicode' objects}


    1    0.000    0.000    0.000    0.000 {method 'endswith' of 'unicode' objects}


    1    0.000    0.000    0.000    0.000 {sys.getfilesystemencoding}


    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo lo pueden encontrar en &lt;a href="https://bitbucket.org/ecrespo/ernesto-ecrespo.blogspot/src/dbfc744caa2138355d0be1811a1edbde5379f189/line_profiler/matrizinversa.py?at=default"&gt;bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="General"></category><category term="numpy"></category><category term="Python"></category><category term="Profiling"></category><category term="timeit"></category></entry><entry><title>Resolución de sistemas de ecuaciones con NumPy</title><link href="https://ecrespo.github.io/resolucion-de-sistemas-de-ecuaciones-con-numpy.html" rel="alternate"></link><published>2012-12-02T09:00:00-05:30</published><updated>2012-12-02T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-12-02:/resolucion-de-sistemas-de-ecuaciones-con-numpy.html</id><summary type="html">&lt;p&gt;Recordando un poco de resoluci&amp;oacute;n de sistemas de ecuaciones con Algebra Lineal.&lt;/p&gt;
&lt;p&gt;Se puede usar python por medio de NumPy para resolver estos sistemas de ecuaciones por medio de matrices.&lt;/p&gt;
&lt;p&gt;Las ecuaciones que se quieren resolver son:
&lt;code&gt;3x+9y-10z = 24
x-6y+4z = -4
10x-2y+8z = 20&lt;/code&gt;
Estas ecuaciones se pueden …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recordando un poco de resoluci&amp;oacute;n de sistemas de ecuaciones con Algebra Lineal.&lt;/p&gt;
&lt;p&gt;Se puede usar python por medio de NumPy para resolver estos sistemas de ecuaciones por medio de matrices.&lt;/p&gt;
&lt;p&gt;Las ecuaciones que se quieren resolver son:
&lt;code&gt;3x+9y-10z = 24
x-6y+4z = -4
10x-2y+8z = 20&lt;/code&gt;
Estas ecuaciones se pueden representar como un sistema de Matrices como &lt;code&gt;A*x=B&lt;/code&gt;, donde si se desea resolver la matr&amp;iacute;z x se aplica la inversa de A, &lt;code&gt;x = inv(A)*B&lt;/code&gt;. Donde A para nuestro caso es &lt;code&gt;[[3 9 -10][1 -6 4][10 -2 8]&lt;/code&gt; y B es &lt;code&gt;[[24][-4[[20]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para resolver el sistema de ecuaciones es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa numpy como np"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se define los valores de la matriz a"&gt;Se define los valores de la matriz A&lt;/h1&gt;
&lt;p&gt;A = np.matrix([[3,9,-10],[1,-6,4],[10,-2,8]])&lt;/p&gt;
&lt;h1 id="se definen los valores de la matriz b"&gt;Se definen los valores de la matriz B&lt;/h1&gt;
&lt;p&gt;B = np.matrix([[24],[-4],[20]])&lt;/p&gt;
&lt;h1 id="se calcula el valor de x con x=inv(a)*b"&gt;Se calcula el valor de X con X=inv(A)*B&lt;/h1&gt;
&lt;p&gt;X = A*&lt;em&gt;(-1)&lt;/em&gt;B&lt;/p&gt;
&lt;h1 id="se muestra el resultado"&gt;Se muestra el resultado&lt;/h1&gt;
&lt;p&gt;print("El resultado de X es:",X)&lt;/p&gt;
&lt;h1 id="para verificar el resultado se calcula x*a y debe dar b"&gt;Para verificar el resultado se calcula X*A y debe dar B&lt;/h1&gt;
&lt;p&gt;print("El resultado de A&lt;em&gt;X es B-&amp;gt; ",A&lt;/em&gt;X)
```&lt;/p&gt;
&lt;p&gt;El resultado de ejecutar el script se muestra a continuaci&amp;oacute;n:
&lt;code&gt;python
('El resultado de X es:', matrix([[ 2.99029126],
        [ 0.40776699],
        [-1.13592233]]))
('El resultado de A*X es B-&amp;gt; ', matrix([[ 24.],
        [ -4.],
        [ 20.]]))&lt;/code&gt;
Hay un problema a la hora de calcular la matriz inversa y es que no todas las matrices pueden ser invertidas, as&amp;iacute; que est&amp;aacute; soluci&amp;oacute;n no funciona para todos los casos. La soluci&amp;oacute;n es usar la funci&amp;oacute;n &lt;a href="docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.svd.html"&gt;numpy.linalg.svd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo siguiente en vez de usar la clase matrix usar&amp;aacute; la clase array y usar la funci&amp;oacute;n &lt;code&gt;numpy.linalg.svd&lt;/code&gt;.
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa numpy como np_1"&gt;Se importa numpy como np&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se define los valores de la matriz a_1"&gt;Se define los valores de la matriz A&lt;/h1&gt;
&lt;p&gt;A = np.array([[3,9,-10],[1,-6,4],[10,-2,8]])&lt;/p&gt;
&lt;h1 id="se definen los valores de la matriz b_1"&gt;Se definen los valores de la matriz B&lt;/h1&gt;
&lt;p&gt;B = np.array([[24],[-4],[20]])&lt;/p&gt;
&lt;h1 id="se calcula el valor de x con x=inv(a)*b_1"&gt;Se calcula el valor de X con X=inv(A)*B&lt;/h1&gt;
&lt;p&gt;X = np.linalg.inv(A).dot(B)&lt;/p&gt;
&lt;h1 id="se muestra el resultado_1"&gt;Se muestra el resultado&lt;/h1&gt;
&lt;p&gt;print("El resultado de X es:",X)
&lt;code&gt;El resultado es el siguiente:&lt;/code&gt;
('El resultado de X es:', array([[ 2.99029126],
       [ 0.40776699],
       [-1.13592233]]))
```
As&amp;iacute; pues el valor de x es 2.99, el de y es 0.407 y el de z es -1.1359, mostrado con 2 procedimientos distintos.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de estos 2 ejemplos lo pueden encontrar en el &lt;a href="https://bitbucket.org/ecrespo/ernesto-ecrespo.blogspot/src/71eb8e1fcbaf472997dbcd4d179f2423b7ee4ae6/numpy1?at=default"&gt;repositorio de bitbucket de c&amp;oacute;digos de este blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="numpy"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Tutorial de PyQt. Desarrollo con QtDesigner(2 ventanas). Parte 12</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-desarrollo-con-qtdesigner2-ventanas-parte-12.html" rel="alternate"></link><published>2012-09-16T09:00:00-05:30</published><updated>2012-09-16T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-09-16:/tutorial-de-pyqt-desarrollo-con-qtdesigner2-ventanas-parte-12.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como realizar llamadas a 2 ventanas creadas desde &lt;code&gt;qtdesigner&lt;/code&gt;.
La primera ventana tiene una entrada de datos para el nombre y un combo box donde se lista ciudades, se tiene 3 bot&amp;oacute;nes aplicar, borrar y salir; aplicar toma el nombre y la ciudad y lo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como realizar llamadas a 2 ventanas creadas desde &lt;code&gt;qtdesigner&lt;/code&gt;.
La primera ventana tiene una entrada de datos para el nombre y un combo box donde se lista ciudades, se tiene 3 bot&amp;oacute;nes aplicar, borrar y salir; aplicar toma el nombre y la ciudad y lo muestra en un par de etiquetas; adicionalmente muestra una ventana con informaci&amp;oacute;n en html sobre el nombre y la ciudad, esa ventana tiene un bot&amp;oacute;n para salir que oculta dicha ventana.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra ambas ventanas con las se&amp;ntilde;ales definidas desde el &lt;code&gt;qtdesigner&lt;/code&gt;:
Ventana principal:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner2ventanas-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ventana secundaria:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner2ventanas-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se salvan ambas ventanas con el nombre &lt;code&gt;ej1.ui&lt;/code&gt; y &lt;code&gt;ej1b.ui&lt;/code&gt;, luego se convierten ambos archivos a c&amp;oacute;digo python con los siguientes comandos:
&lt;code&gt;pyuic4 -x ej1.ui -o ej1.py
pyuic4 -x ej1b.ui -o ej1b.py&lt;/code&gt;
El c&amp;oacute;digo de &lt;code&gt;ej1.py&lt;/code&gt; y &lt;code&gt;ej1b.py&lt;/code&gt; se muestra a continuaci&amp;oacute;n:
Archivo &lt;code&gt;ej1.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="form implementation generated from reading ui file 'ej1.ui'"&gt;Form implementation generated from reading ui file 'ej1.ui'&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="created: sun sep 16 13:21:47 2012"&gt;Created: Sun Sep 16 13:21:47 2012&lt;/h1&gt;
&lt;h1 id="by: pyqt4 ui code generator 4.9.3"&gt;by: PyQt4 UI code generator 4.9.3&lt;/h1&gt;
&lt;h1 id="_2"&gt;&lt;/h1&gt;
&lt;h1 id="warning! all changes made in this file will be lost!"&gt;WARNING! All changes made in this file will be lost!&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtCore, QtGui&lt;/p&gt;
&lt;p&gt;try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s&lt;/p&gt;
&lt;p&gt;class Ui_ventana(object):
    def setupUi(self, ventana):
        ventana.setObjectName(_fromUtf8("ventana"))
        ventana.resize(348, 322)
        self.lnombre = QtGui.QLabel(ventana)
        self.lnombre.setGeometry(QtCore.QRect(10, 40, 62, 15))
        self.lnombre.setObjectName(_fromUtf8("lnombre"))
        self.lciudad = QtGui.QLabel(ventana)
        self.lciudad.setGeometry(QtCore.QRect(10, 80, 62, 15))
        self.lciudad.setObjectName(_fromUtf8("lciudad"))
        self.gboxresultados = QtGui.QGroupBox(ventana)
        self.gboxresultados.setGeometry(QtCore.QRect(20, 140, 301, 91))
        self.gboxresultados.setObjectName(_fromUtf8("gboxresultados"))
        self.lrnombre = QtGui.QLabel(self.gboxresultados)
        self.lrnombre.setGeometry(QtCore.QRect(40, 30, 91, 16))
        self.lrnombre.setObjectName(_fromUtf8("lrnombre"))
        self.lrciudad = QtGui.QLabel(self.gboxresultados)
        self.lrciudad.setGeometry(QtCore.QRect(40, 60, 81, 16))
        self.lrciudad.setObjectName(_fromUtf8("lrciudad"))
        self.nombre = QtGui.QLabel(self.gboxresultados)
        self.nombre.setGeometry(QtCore.QRect(140, 30, 111, 16))
        self.nombre.setText(_fromUtf8(""))
        self.nombre.setObjectName(_fromUtf8("nombre"))
        self.ciudad = QtGui.QLabel(self.gboxresultados)
        self.ciudad.setGeometry(QtCore.QRect(140, 60, 101, 16))
        self.ciudad.setText(_fromUtf8(""))
        self.ciudad.setObjectName(_fromUtf8("ciudad"))
        self.baplicar = QtGui.QPushButton(ventana)
        self.baplicar.setGeometry(QtCore.QRect(10, 260, 89, 27))
        self.baplicar.setObjectName(_fromUtf8("baplicar"))
        self.bsalir = QtGui.QPushButton(ventana)
        self.bsalir.setGeometry(QtCore.QRect(220, 260, 89, 27))
        self.bsalir.setObjectName(_fromUtf8("bsalir"))
        self.cciudad = QtGui.QComboBox(ventana)
        self.cciudad.setGeometry(QtCore.QRect(110, 70, 171, 27))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Liberation Sans"))
        font.setPointSize(12)
        self.cciudad.setFont(font)
        self.cciudad.setMaxVisibleItems(5)
        self.cciudad.setObjectName(_fromUtf8("cciudad"))
        self.enombre = QtGui.QLineEdit(ventana)
        self.enombre.setGeometry(QtCore.QRect(110, 30, 171, 23))
        self.enombre.setObjectName(_fromUtf8("enombre"))
        self.bborrar = QtGui.QPushButton(ventana)
        self.bborrar.setGeometry(QtCore.QRect(110, 260, 89, 27))
        self.bborrar.setObjectName(_fromUtf8("bborrar"))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    self.retranslateUi(ventana)
    QtCore.QObject.connect(self.bsalir, QtCore.SIGNAL(_fromUtf8("clicked()")), ventana.close)
    QtCore.QObject.connect(self.bborrar, QtCore.SIGNAL(_fromUtf8("clicked()")), self.ciudad.clear)
    QtCore.QObject.connect(self.bborrar, QtCore.SIGNAL(_fromUtf8("clicked()")), self.nombre.clear)
    QtCore.QObject.connect(self.bborrar, QtCore.SIGNAL(_fromUtf8("clicked()")), self.enombre.clear)
    QtCore.QMetaObject.connectSlotsByName(ventana)

def retranslateUi(self, ventana):
    ventana.setWindowTitle(QtGui.QApplication.translate("ventana", "Form", None, QtGui.QApplication.UnicodeUTF8))
    self.lnombre.setText(QtGui.QApplication.translate("ventana", "Nombre:", None, QtGui.QApplication.UnicodeUTF8))
    self.lciudad.setText(QtGui.QApplication.translate("ventana", "Ciudad:", None, QtGui.QApplication.UnicodeUTF8))
    self.gboxresultados.setTitle(QtGui.QApplication.translate("ventana", "Resultado:", None, QtGui.QApplication.UnicodeUTF8))
    self.lrnombre.setText(QtGui.QApplication.translate("ventana", "Info nombre:", None, QtGui.QApplication.UnicodeUTF8))
    self.lrciudad.setText(QtGui.QApplication.translate("ventana", "Info Ciudad:", None, QtGui.QApplication.UnicodeUTF8))
    self.baplicar.setText(QtGui.QApplication.translate("ventana", "Aplicar", None, QtGui.QApplication.UnicodeUTF8))
    self.bsalir.setText(QtGui.QApplication.translate("ventana", "Salir", None, QtGui.QApplication.UnicodeUTF8))
    self.bborrar.setText(QtGui.QApplication.translate("ventana", "Borrar", None, QtGui.QApplication.UnicodeUTF8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    import sys
    app = QtGui.QApplication(sys.argv)
    ventana = QtGui.QWidget()
    ui = Ui_ventana()
    ui.setupUi(ventana)
    ventana.show()
    sys.exit(app.exec_())
```&lt;/p&gt;
&lt;p&gt;el archivo de &lt;code&gt;ej1b.py&lt;/code&gt; se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="-- coding: utf-8 --_1"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="form implementation generated from reading ui file 'ej1b.ui'"&gt;Form implementation generated from reading ui file 'ej1b.ui'&lt;/h1&gt;
&lt;h1 id="_3"&gt;&lt;/h1&gt;
&lt;h1 id="created: sun sep 16 11:55:31 2012"&gt;Created: Sun Sep 16 11:55:31 2012&lt;/h1&gt;
&lt;h1 id="by: pyqt4 ui code generator 4.9.3_1"&gt;by: PyQt4 UI code generator 4.9.3&lt;/h1&gt;
&lt;h1 id="_4"&gt;&lt;/h1&gt;
&lt;h1 id="warning! all changes made in this file will be lost!_1"&gt;WARNING! All changes made in this file will be lost!&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtCore, QtGui&lt;/p&gt;
&lt;p&gt;try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s&lt;/p&gt;
&lt;p&gt;class Ui_ventana_web(object):
    def setupUi(self, ventana_web):
        ventana_web.setObjectName(_fromUtf8("ventana_web"))
        ventana_web.resize(458, 430)
        self.salir = QtGui.QPushButton(ventana_web)
        self.salir.setGeometry(QtCore.QRect(180, 400, 89, 27))
        self.salir.setObjectName(_fromUtf8("salir"))
        self.web = QtWebKit.QWebView(ventana_web)
        self.web.setGeometry(QtCore.QRect(0, 40, 451, 341))
        self.web.setUrl(QtCore.QUrl(_fromUtf8("about:blank")))
        self.web.setObjectName(_fromUtf8("web"))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    self.retranslateUi(ventana_web)
    QtCore.QObject.connect(self.salir, QtCore.SIGNAL(_fromUtf8("clicked()")), ventana_web.hide)
    QtCore.QMetaObject.connectSlotsByName(ventana_web)

def retranslateUi(self, ventana_web):
    ventana_web.setWindowTitle(QtGui.QApplication.translate("ventana_web", "Form", None, QtGui.QApplication.UnicodeUTF8))
    self.salir.setText(QtGui.QApplication.translate("ventana_web", "Salir", None, QtGui.QApplication.UnicodeUTF8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;from PyQt4 import QtWebKit&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    import sys
    app = QtGui.QApplication(sys.argv)
    ventana_web = QtGui.QWidget()
    ui = Ui_ventana_web()
    ui.setupUi(ventana_web)
    ventana_web.show()
    sys.exit(app.exec_())
```
Como se muestra en ambos archivos se tiene 2 clases donde se define cada ventana, sus widgets, sus se&amp;ntilde;alesy m&amp;eacute;todos.&lt;/p&gt;
&lt;p&gt;Estos 2 archivos no se modifican directamente, si se necesitan realizar cambios en la interfaz con el qtdesigner y al volver a crearlos se perder&amp;aacute; todo lo que se le haya modificado a dichos archivos.
La soluci&amp;oacute;n es crear un script en python donde se importe las clases de estos 2 archivos y se haga las modificaciones necesarias (nuevas se&amp;ntilde;ales, modificaci&amp;oacute;n de valores en los widgets, la llamada de las ventanas, etc).&lt;/p&gt;
&lt;p&gt;El archivo &lt;code&gt;run.py&lt;/code&gt; ser&amp;aacute; el que maneje las personalizaciones de las se&amp;ntilde;ales, nuevos m&amp;eacute;todos, nuevas variables y el manejo de las ventanas:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --_2"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo sys"&gt;Se importa el m&amp;oacute;dulo sys&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="se importa de pyqt4 qtcore y qtgui"&gt;Se importa de PyQt4 QtCore y QtGui&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtCore, QtGui&lt;/p&gt;
&lt;h1 id="se importa la clase ui_ventana de ej1"&gt;Se importa la clase Ui_ventana de ej1&lt;/h1&gt;
&lt;p&gt;from ej1 import Ui_ventana&lt;/p&gt;
&lt;h1 id="se importa la clase ui_ventana_web de ej1b"&gt;Se importa la clase Ui_ventana_web de ej1b&lt;/h1&gt;
&lt;p&gt;from ej1b import Ui_ventana_web&lt;/p&gt;
&lt;h1 id="se crea la clase de la ventana secundaria"&gt;Se crea la clase de la ventana secundaria&lt;/h1&gt;
&lt;h1 id="se define el archivo html que abrira el widget web"&gt;Se define el archivo html que abrir&amp;aacute; el widget web&lt;/h1&gt;
&lt;p&gt;class DialogSecundaria(QtGui.QDialog):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self, parent=None):
    QtGui.QWidget.__init__(self, parent)
    self.ui_d = Ui_ventana_web()
    self.ui_d.setupUi(self)
    self.ui_d.web.setUrl(QtCore.QUrl("file:///home/ernesto/bin/python/qtdesigner/ej1/temporal.html"))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se crea la clase principal"&gt;Se crea la clase principal&lt;/h1&gt;
&lt;h1 id="donde se define la lista de ciudades y se agregan al widget combobox"&gt;Donde se define la lista de ciudades y se agregan al widget combobox&lt;/h1&gt;
&lt;h1 id="se genera la senal del boton baplicar con el metodo abrirventana,"&gt;Se genera la se&amp;ntilde;al del bot&amp;oacute;n baplicar con el m&amp;eacute;todo AbrirVentana,&lt;/h1&gt;
&lt;h1 id="el cual hace el llamado a la clase ventana secundaria."&gt;el cual hace el llamado a la clase ventana secundaria.&lt;/h1&gt;
&lt;p&gt;class VentanaPrincipal(QtGui.QDialog):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self, parent=None):
    QtGui.QWidget.__init__(self, parent)
    self.ui = Ui_ventana()
    self.__ciudades = ["Valencia","Maracay","Barquisimeto","Merida","Caracas"]

    self.ui.setupUi(self)
    for ciudad in self.__ciudades: 
        self.ui.cciudad.addItem(ciudad)

QtCore.QObject.connect(self.ui.baplicar, QtCore.SIGNAL("clicked()"), self.AbrirVentana)


def AbrirVentana(self):
    #Se crea un archivo html donde se le pasa los datos del nombre y ciudad en formato html
    archivo = open("/home/ernesto/bin/python/qtdesigner/ej1/temporal.html","w")
mensaje = """&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Reporte de prueba&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Nombre:%s&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;Ciudad:%s&amp;lt;/h2&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;""" %(self.ui.enombre.text(),self.ui.cciudad.currentText())
lista = [mensaje]
archivo.writelines(lista)
archivo.close()
#Se publica el nombre y la ciudad en la ventana principal
self.ui.nombre.setText(self.ui.enombre.text())
self.ui.ciudad.setText(self.ui.cciudad.currentText())
    #Se muestra la ventana secundaria.
    self.w = DialogSecundaria()
    self.w.show()

def quit(self):
    sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    app = QtGui.QApplication(sys.argv)
    myapp = VentanaPrincipal()
    myapp.show()
    sys.exit(app.exec_())
```
En la siguiente figura se muestra la aplicaci&amp;oacute;n en funcionamiento:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner2ventanas-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Si est&amp;aacute;n interesados es revisar las interfaces hechas con &lt;code&gt;qtdesigner&lt;/code&gt; y el c&amp;oacute;digo python en el enlace de mi repositorio en bitbucket lo pueden &lt;a href="https://bitbucket.org/ecrespo/ernesto-ecrespo.blogspot/src/1e3cb462c42a/qtdesigner12"&gt;encontrar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quiero agradecer a Hern&amp;aacute;n Ram&amp;iacute;rez por los tips para el manejo de varias ventanas, aqu&amp;iacute; est&amp;aacute; su &lt;a href="http://blog.hernanramirez.info/"&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="PyQt"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Captura de vídeo con Python y SimpleCV. Parte 4.</title><link href="https://ecrespo.github.io/captura-de-video-con-python-y-simplecv-parte-4.html" rel="alternate"></link><published>2012-07-31T09:00:00-05:30</published><updated>2012-07-31T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-31:/captura-de-video-con-python-y-simplecv-parte-4.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se muestra como generar un v&amp;iacute;deo usando la webcam del computador con python y &lt;code&gt;SimpleCV&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El script simplemente define la captura de v&amp;iacute;deo, genera un ciclo donde se captura el v&amp;iacute;deo y se muestra en pantalla. Cuando se presiona la tecla espaciadora se hace una captura de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se muestra como generar un v&amp;iacute;deo usando la webcam del computador con python y &lt;code&gt;SimpleCV&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El script simplemente define la captura de v&amp;iacute;deo, genera un ciclo donde se captura el v&amp;iacute;deo y se muestra en pantalla. Cuando se presiona la tecla espaciadora se hace una captura de una imagen y se salva, al presionar la tecla Escape se finaliza el ciclo de captura de v&amp;iacute;deo.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa cv2."&gt;Se importa cv2.&lt;/h1&gt;
&lt;p&gt;import cv2&lt;/p&gt;
&lt;h1 id="se crea la instancia de la captura de video."&gt;se crea la instancia de la captura de Video.&lt;/h1&gt;
&lt;p&gt;video = cv2.VideoCapture(0)&lt;/p&gt;
&lt;h1 id="se define un ciclo."&gt;Se define un ciclo.&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se captura el video de la webcam

ret,im = video.read()

#Se muestra el video  donde se pasa im que es la lectura del video de la webcam.

cv2.imshow('Prueba de video',im)

#Se captura la tecla de escape del teclado

tecla = cv2.waitKey(10)

if tecla == 27:

    #Si es la tecla escape se termina el ciclo

    break

#Si la tecla es el espacio en blanco se captura una imagen del video.

if tecla == ord(' '):

    cv2.imwrite('captura_img.jpg',im)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el v&amp;iacute;deo:&lt;/p&gt;
&lt;p&gt;https://youtu.be/XF9BjxYKiEo&lt;/p&gt;
&lt;p&gt;En la siguiente imagen se muestra la captura de la foto al grabar el v&amp;iacute;deo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/capturadevideoconpythonysimplecv4-1.jpg"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Camara"></category><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Gnome"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Videos"></category><category term="SimpleCV"></category></entry><entry><title>Modificar imagen con simpleCV(binarización). Parte 3.</title><link href="https://ecrespo.github.io/modificar-imagen-con-simplecvbinarizacion-parte-3.html" rel="alternate"></link><published>2012-07-30T09:00:00-05:30</published><updated>2012-07-30T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-30:/modificar-imagen-con-simplecvbinarizacion-parte-3.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo se explicar&amp;aacute; como convertir una imagen a dos colores, osea tomar una foto normal y convertirla en blanco y negro.&lt;/p&gt;
&lt;p&gt;Se usar&amp;aacute; la funci&amp;oacute;n binarized, se puede pasar un valor entre 0 y 255 (donde cero es negro y 255 es blanco).&lt;/p&gt;
&lt;p&gt;Se toma la imagen y luego …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo se explicar&amp;aacute; como convertir una imagen a dos colores, osea tomar una foto normal y convertirla en blanco y negro.&lt;/p&gt;
&lt;p&gt;Se usar&amp;aacute; la funci&amp;oacute;n binarized, se puede pasar un valor entre 0 y 255 (donde cero es negro y 255 es blanco).&lt;/p&gt;
&lt;p&gt;Se toma la imagen y luego se pasa la funci&amp;oacute;n a la imagen.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la imagen original:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/modificarimagenconsimplecvbinarizacion-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:  &lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa image de simplecv"&gt;Se importa Image de SimpleCV&lt;/h1&gt;
&lt;p&gt;from SimpleCV import Image&lt;/p&gt;
&lt;h1 id="se crea la instancia imagen tomando la imagen"&gt;Se crea la instancia Imagen tomando la imagen&lt;/h1&gt;
&lt;h1 id="imagen1.png"&gt;imagen1.png&lt;/h1&gt;
&lt;p&gt;imagen = Image('imagen1.png')&lt;/p&gt;
&lt;h1 id="se ejecuta binarize a la imagen"&gt;Se ejecuta binarize a la imagen&lt;/h1&gt;
&lt;h1 id="sin argumentos."&gt;sin argumentos.&lt;/h1&gt;
&lt;p&gt;imgBin = imagen.binarize()&lt;/p&gt;
&lt;h1 id="se salva la imagen como resultado3.jpg"&gt;Se salva la imagen como resultado3.jpg&lt;/h1&gt;
&lt;p&gt;imgBin.save("resultado.jpg")
```&lt;/p&gt;
&lt;p&gt;La imagen generada se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/modificarimagenconsimplecvbinarizacion-2.jpg"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Camara"></category><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="gnome"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="SimpleCV"></category></entry><entry><title>Tutorial de PyQt. Desarrollo con QtDesigner. Parte 11.</title><link href="https://ecrespo.github.io/tutorial-de-pyqt-desarrollo-con-qtdesigner-parte-11.html" rel="alternate"></link><published>2012-07-29T09:00:00-05:30</published><updated>2012-07-29T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-29:/tutorial-de-pyqt-desarrollo-con-qtdesigner-parte-11.html</id><summary type="html">&lt;p&gt;Para repasar los art&amp;iacute;culos sobre &lt;code&gt;pyQt&lt;/code&gt; pueden revisar el siguiente &lt;a href="https://www.seraph.to/tag/pyqt.html"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este caso en vez de escribir todo el c&amp;oacute;digo de la intefaz gr&amp;aacute;fica se usar&amp;aacute; la herramienta &lt;code&gt;QtDesigner&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se pedir&amp;aacute; el nombre de la persona y al darle click al bot&amp;oacute;n Aplicar se mostrar&amp;aacute; el nombre colocado en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para repasar los art&amp;iacute;culos sobre &lt;code&gt;pyQt&lt;/code&gt; pueden revisar el siguiente &lt;a href="https://www.seraph.to/tag/pyqt.html"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este caso en vez de escribir todo el c&amp;oacute;digo de la intefaz gr&amp;aacute;fica se usar&amp;aacute; la herramienta &lt;code&gt;QtDesigner&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se pedir&amp;aacute; el nombre de la persona y al darle click al bot&amp;oacute;n Aplicar se mostrar&amp;aacute; el nombre colocado en la entrada de datos en la etiqueta, se tiene un segundo bot&amp;oacute;n el cual termina la ejecuci&amp;oacute;n de la aplicaci&amp;oacute;n al darle click.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el dise&amp;ntilde;o de la interfaz:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la relaci&amp;oacute;n entre los botones y se&amp;ntilde;ales:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;A cada bot&amp;oacute;n se le asocia una funci&amp;oacute;n como lo muestra las siguientes dos figuras:
Bot&amp;oacute;n Salir:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Bot&amp;oacute;n Aplicar:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Al salvar la interfaz gr&amp;aacute;fica con nombre &lt;code&gt;prueba3.ui&lt;/code&gt; lo que se har&amp;aacute; a continuaci&amp;oacute;n es generar el c&amp;oacute;digo python por medio del comando:
&lt;code&gt;pyuic4 -x prueba3.ui -o prueba3.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo generado se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="form implementation generated from reading ui file 'prueba3.ui'"&gt;Form implementation generated from reading ui file 'prueba3.ui'&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="created: sun jul 29 22:49:50 2012"&gt;Created: Sun Jul 29 22:49:50 2012&lt;/h1&gt;
&lt;h1 id="by: pyqt4 ui code generator 4.9.1"&gt;by: PyQt4 UI code generator 4.9.1&lt;/h1&gt;
&lt;h1 id="_2"&gt;&lt;/h1&gt;
&lt;h1 id="warning! all changes made in this file will be lost!"&gt;WARNING! All changes made in this file will be lost!&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtCore, QtGui&lt;/p&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_fromUtf8 = QtCore.QString.fromUtf8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except AttributeError:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_fromUtf8 = lambda s: s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;class Ui_Form(object):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def setupUi(self, Form):

    Form.setObjectName(_fromUtf8("Form"))

    Form.resize(400, 300)

    self.pushButton = QtGui.QPushButton(Form)

    self.pushButton.setGeometry(QtCore.QRect(280, 260, 102, 28))

    self.pushButton.setObjectName(_fromUtf8("pushButton"))

    self.pushButton_2 = QtGui.QPushButton(Form)

    self.pushButton_2.setGeometry(QtCore.QRect(140, 260, 102, 28))

    self.pushButton_2.setObjectName(_fromUtf8("pushButton_2"))

    self.lineEdit = QtGui.QLineEdit(Form)

    self.lineEdit.setGeometry(QtCore.QRect(140, 40, 221, 28))

    self.lineEdit.setObjectName(_fromUtf8("lineEdit"))

    self.label = QtGui.QLabel(Form)

    self.label.setGeometry(QtCore.QRect(20, 40, 69, 18))

    self.label.setObjectName(_fromUtf8("label"))

    self.label_2 = QtGui.QLabel(Form)

    self.label_2.setGeometry(QtCore.QRect(20, 160, 81, 18))

    self.label_2.setObjectName(_fromUtf8("label_2"))

    self.label_3 = QtGui.QLabel(Form)

    self.label_3.setGeometry(QtCore.QRect(140, 160, 221, 18))

    self.label_3.setObjectName(_fromUtf8("label_3"))

    self.retranslateUi(Form)

    QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8("clicked()")), Form.close)

    QtCore.QObject.connect(self.pushButton_2, QtCore.SIGNAL(_fromUtf8("clicked()")), self.label_3.update)

    QtCore.QMetaObject.connectSlotsByName(Form)

def retranslateUi(self, Form):

    Form.setWindowTitle(QtGui.QApplication.translate("Form", "Prueba", None, QtGui.QApplication.UnicodeUTF8))

    self.pushButton.setText(QtGui.QApplication.translate("Form", "Salir", None, QtGui.QApplication.UnicodeUTF8))

    self.pushButton_2.setText(QtGui.QApplication.translate("Form", "Aplicar", None, QtGui.QApplication.UnicodeUTF8))

    self.label.setText(QtGui.QApplication.translate("Form", "Nombre:", None, QtGui.QApplication.UnicodeUTF8))

    self.label_2.setText(QtGui.QApplication.translate("Form", "Resultado:", None, QtGui.QApplication.UnicodeUTF8))

    self.label_3.setText(QtGui.QApplication.translate("Form", "Texto", None, QtGui.QApplication.UnicodeUTF8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys

app = QtGui.QApplication(sys.argv)

Form = QtGui.QWidget()

ui = Ui_Form()

ui.setupUi(Form)

Form.show()

sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Se resalta en color azul la relaci&amp;oacute;n de ambos botones (Salir y Aplicar) con los eventos (Form.close y label_3.update).&lt;/p&gt;
&lt;p&gt;El cambio en el c&amp;oacute;digo que se tiene que hacer es crear un m&amp;eacute;todo en la clase creada que toma el contenido del widget lineEdit y se la pasa a label_3, se muestra en la consola por medio de print y en la etiqueta por el m&amp;eacute;todo set de la etiqueta.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo modificado con las secciones en azul que muestra lo explicado antes:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --_1"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="form implementation generated from reading ui file 'prueba3.ui'_1"&gt;Form implementation generated from reading ui file 'prueba3.ui'&lt;/h1&gt;
&lt;h1 id="_3"&gt;&lt;/h1&gt;
&lt;h1 id="created: sun jul 29 22:27:29 2012"&gt;Created: Sun Jul 29 22:27:29 2012&lt;/h1&gt;
&lt;h1 id="by: pyqt4 ui code generator 4.9.1_1"&gt;by: PyQt4 UI code generator 4.9.1&lt;/h1&gt;
&lt;h1 id="_4"&gt;&lt;/h1&gt;
&lt;h1 id="warning! all changes made in this file will be lost!_1"&gt;WARNING! All changes made in this file will be lost!&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtCore, QtGui&lt;/p&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_fromUtf8 = QtCore.QString.fromUtf8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except AttributeError:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_fromUtf8 = lambda s: s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;class Ui_Form(object):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def Actualizar(self):

    texto = self.lineEdit.text()

    print texto

    self.label_3.setText(texto)



def setupUi(self, Form):

    Form.setObjectName(_fromUtf8("Form"))

    Form.resize(400, 300)

    self.pushButton = QtGui.QPushButton(Form)

    self.pushButton.setGeometry(QtCore.QRect(280, 260, 102, 28))

    self.pushButton.setObjectName(_fromUtf8("pushButton"))

    self.pushButton_2 = QtGui.QPushButton(Form)

    self.pushButton_2.setGeometry(QtCore.QRect(140, 260, 102, 28))

    self.pushButton_2.setObjectName(_fromUtf8("pushButton_2"))

    self.lineEdit = QtGui.QLineEdit(Form)

    self.lineEdit.setGeometry(QtCore.QRect(140, 40, 221, 28))

    self.lineEdit.setObjectName(_fromUtf8("lineEdit"))

    self.label = QtGui.QLabel(Form)

    self.label.setGeometry(QtCore.QRect(20, 40, 69, 18))

    self.label.setObjectName(_fromUtf8("label"))

    self.label_2 = QtGui.QLabel(Form)

    self.label_2.setGeometry(QtCore.QRect(20, 160, 81, 18))

    self.label_2.setObjectName(_fromUtf8("label_2"))

    self.label_3 = QtGui.QLabel(Form)

    self.label_3.setGeometry(QtCore.QRect(140, 160, 221, 18))

    self.label_3.setObjectName(_fromUtf8("label_3"))

    self.retranslateUi(Form)

    QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8("clicked()")), Form.close)

    QtCore.QObject.connect(self.pushButton_2, QtCore.SIGNAL(_fromUtf8("clicked()")), self.Actualizar)

    QtCore.QMetaObject.connectSlotsByName(Form)

def retranslateUi(self, Form):

    Form.setWindowTitle(QtGui.QApplication.translate("Form", "Prueba", None, QtGui.QApplication.UnicodeUTF8))

    self.pushButton.setText(QtGui.QApplication.translate("Form", "Salir", None, QtGui.QApplication.UnicodeUTF8))

    self.pushButton_2.setText(QtGui.QApplication.translate("Form", "Aplicar", None, QtGui.QApplication.UnicodeUTF8))

    self.label.setText(QtGui.QApplication.translate("Form", "Nombre:", None, QtGui.QApplication.UnicodeUTF8))

    self.label_2.setText(QtGui.QApplication.translate("Form", "Resultado:", None, QtGui.QApplication.UnicodeUTF8))

    self.label_3.setText(QtGui.QApplication.translate("Form", "Texto", None, QtGui.QApplication.UnicodeUTF8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys

app = QtGui.QApplication(sys.argv)

Form = QtGui.QWidget()

ui = Ui_Form()

ui.setupUi(Form)

Form.show()

sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra la figura de la ejecuci&amp;oacute;n de la aplicaci&amp;oacute;n luego de capturar y mostrar la informaci&amp;oacute;n del widget &lt;code&gt;LineEdit&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdepyqtdesarrolloconqtdesigner-5.png"/&gt; &lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="General"></category><category term="gnome"></category><category term="Linux"></category><category term="PyQt"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Ejecutar una tarea en una fecha próxima (APScheduler)</title><link href="https://ecrespo.github.io/ejecutar-una-tarea-en-una-fecha-proxima-apscheduler.html" rel="alternate"></link><published>2012-07-19T09:00:00-05:30</published><updated>2012-07-19T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-19:/ejecutar-una-tarea-en-una-fecha-proxima-apscheduler.html</id><summary type="html">&lt;p&gt;En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/agendar-tareas-con-python.html#agendar-tareas-con-python"&gt;anterior&lt;/a&gt; se explican 2 formas de definir tareas de forma peri&amp;oacute;dica y al estilo &lt;code&gt;crond&lt;/code&gt;. En este caso se explicar&amp;aacute; como ejecutar una funci&amp;oacute;n en una fecha pr&amp;oacute;xima.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa date"&gt;Se importa date&lt;/h1&gt;
&lt;p&gt;from datetime import date&lt;/p&gt;
&lt;h1 id="se importa scheduler"&gt;Se importa Scheduler&lt;/h1&gt;
&lt;p&gt;from apscheduler.scheduler import …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/agendar-tareas-con-python.html#agendar-tareas-con-python"&gt;anterior&lt;/a&gt; se explican 2 formas de definir tareas de forma peri&amp;oacute;dica y al estilo &lt;code&gt;crond&lt;/code&gt;. En este caso se explicar&amp;aacute; como ejecutar una funci&amp;oacute;n en una fecha pr&amp;oacute;xima.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa date"&gt;Se importa date&lt;/h1&gt;
&lt;p&gt;from datetime import date&lt;/p&gt;
&lt;h1 id="se importa scheduler"&gt;Se importa Scheduler&lt;/h1&gt;
&lt;p&gt;from apscheduler.scheduler import Scheduler&lt;/p&gt;
&lt;h1 id="se importa sleep"&gt;Se importa sleep&lt;/h1&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="se instancia la clase scheduler"&gt;Se instancia la clase scheduler&lt;/h1&gt;
&lt;p&gt;sched = Scheduler()&lt;/p&gt;
&lt;h1 id="se inicia el scheduler"&gt;Se inicia el scheduler&lt;/h1&gt;
&lt;p&gt;sched.start()&lt;/p&gt;
&lt;h1 id="se define la funcion a ser ejecutada."&gt;Se define la funci&amp;oacute;n a ser ejecutada.&lt;/h1&gt;
&lt;h1 id="la funcion toma un texto y lo presenta en pantalla."&gt;La funci&amp;oacute;n toma un texto y lo presenta en pantalla.&lt;/h1&gt;
&lt;p&gt;def Tarea(texto):
    print texto&lt;/p&gt;
&lt;h1 id="la tarea sera ejecutada el 19 de julio de 2012."&gt;La tarea ser&amp;aacute; ejecutada el 19 de Julio de 2012.&lt;/h1&gt;
&lt;p&gt;fecha_ejecucion = date(2012, 07, 19)&lt;/p&gt;
&lt;h1 id="se alamacena la tarea en la variable tarea en caso que se quiera suspender"&gt;se alamacena la tarea en la variable tarea en caso que se quiera suspender&lt;/h1&gt;
&lt;h1 id="se le pasa la funcion tarea, la fecha a ejecutar y los argumentos solicitados de la funcion"&gt;Se le pasa la funci&amp;oacute;n Tarea, la fecha a ejecutar y los argumentos solicitados de la funci&amp;oacute;n&lt;/h1&gt;
&lt;p&gt;tarea = sched.add_date_job(Tarea, fecha_ejecucion, ['texto a escribir'])&lt;/p&gt;
&lt;h1 id="se muestra las tareas definidas."&gt;Se muestra las tareas definidas.&lt;/h1&gt;
&lt;p&gt;print sched.print_jobs()&lt;/p&gt;
&lt;h1 id="se crea un ciclo de 10 iteraciones"&gt;Se crea un ciclo de 10 iteraciones&lt;/h1&gt;
&lt;h1 id="donde se espera 60 minutos por cada iteracion"&gt;Donde se espera 60 minutos por cada iteracion&lt;/h1&gt;
&lt;h1 id="se muestra en pantalla las veces que se ejecuta."&gt;Se muestra en pantalla las veces que se ejecuta.&lt;/h1&gt;
&lt;p&gt;for i in range(10):
    print "---- %s" %i
    sleep(3600)&lt;/p&gt;
&lt;h1 id="se detiene el scheduler"&gt;Se detiene el scheduler&lt;/h1&gt;
&lt;p&gt;sched.shutdown(wait=False)
```&lt;/p&gt;
&lt;p&gt;Al ejecutar el programa se muestra lo siguiente:&lt;/p&gt;
&lt;p&gt;```
ernesto@clara:~/bin/python/procesos$ sudo ./procesos3.py&lt;/p&gt;
&lt;p&gt;Jobstore default:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tarea (trigger: date[2012-07-19 00:00:00], next run at: 2012-07-19 00:00:00)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;p&gt;---- 0&lt;/p&gt;
&lt;p&gt;---- 1&lt;/p&gt;
&lt;p&gt;text&lt;/p&gt;
&lt;p&gt;---- 2&lt;/p&gt;
&lt;p&gt;---- 3&lt;/p&gt;
&lt;p&gt;---- 4&lt;/p&gt;
&lt;p&gt;---- 5&lt;/p&gt;
&lt;p&gt;---- 6&lt;/p&gt;
&lt;p&gt;---- 7&lt;/p&gt;
&lt;p&gt;---- 8&lt;/p&gt;
&lt;p&gt;---- 9
```&lt;/p&gt;
&lt;p&gt;Con este art&amp;iacute;culo se muestran las tres formas de ejecutar procesos con &lt;code&gt;APScheduler&lt;/code&gt; (ejecuci&amp;oacute;n peri&amp;oacute;dica, estilo crond y ejecuci&amp;oacute;n en una fecha pr&amp;oacute;xima).&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Tareas"></category></entry><entry><title>Agendar tareas con python</title><link href="https://ecrespo.github.io/agendar-tareas-con-python.html" rel="alternate"></link><published>2012-07-18T09:00:00-05:30</published><updated>2012-07-18T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-18:/agendar-tareas-con-python.html</id><summary type="html">&lt;p&gt;En Linux se pueden ejecutar procesos de forma periodica gracias a &lt;code&gt;cron&lt;/code&gt; o en un momento determinado gracias a &lt;code&gt;at&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En python se tiene una librer&amp;iacute;a que permite ejecutar de forma periodica o en una fecha determinada al estilo de &lt;code&gt;cron&lt;/code&gt; o &lt;code&gt;at&lt;/code&gt;, la librer&amp;iacute;a se llama &lt;a href="https://pypi.org/project/APScheduler/"&gt;APScheduler&lt;/a&gt; (Advanced Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En Linux se pueden ejecutar procesos de forma periodica gracias a &lt;code&gt;cron&lt;/code&gt; o en un momento determinado gracias a &lt;code&gt;at&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En python se tiene una librer&amp;iacute;a que permite ejecutar de forma periodica o en una fecha determinada al estilo de &lt;code&gt;cron&lt;/code&gt; o &lt;code&gt;at&lt;/code&gt;, la librer&amp;iacute;a se llama &lt;a href="https://pypi.org/project/APScheduler/"&gt;APScheduler&lt;/a&gt; (Advanced Python Scheduler). La documentaci&amp;oacute;n de &lt;code&gt;SPScheduler&lt;/code&gt; lo pueden revisar en este &lt;a href="https://apscheduler.readthedocs.io/en/latest/"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El ejemplo a mostrar a continuaci&amp;oacute;n permite ejecutar 2 tareas, la primera tarea se ejecuta a intervalos de 1 minuto, la segunda tarea se ejecuta de lunes a viernes en una hora espec&amp;iacute;fica.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del ejemplo se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa scheduler"&gt;Se importa Scheduler&lt;/h1&gt;
&lt;p&gt;from apscheduler.scheduler import Scheduler&lt;/p&gt;
&lt;h1 id="se importa ctime y sleep"&gt;Se importa ctime y sleep&lt;/h1&gt;
&lt;p&gt;from time import ctime,sleep&lt;/p&gt;
&lt;h1 id="se crea la instancia de la clase scheduler"&gt;Se crea la instancia de la clase Scheduler&lt;/h1&gt;
&lt;p&gt;sched = Scheduler()&lt;/p&gt;
&lt;h1 id="se crea una funcion con la tarea1, pero se dfine"&gt;Se crea una funcion con la tarea1, pero se dfine&lt;/h1&gt;
&lt;h1 id="un decorador para la tarea para que sea periodica"&gt;un decorador para la tarea para que sea periodica&lt;/h1&gt;
&lt;h1 id="cada minuto se ejecutara la tarea."&gt;Cada minuto se ejecutara la tarea.&lt;/h1&gt;
&lt;p&gt;@sched.interval_schedule(minutes=1)&lt;/p&gt;
&lt;p&gt;def Tarea1():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Muestra en pantalla la fecha y hora

print "Se ejecuta cada minuto: %s" %ctime()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se crea la tarea2 al estilo cron por medio de un decorador cron"&gt;Se crea la tarea2 al estilo cron por medio de un decorador cron&lt;/h1&gt;
&lt;h1 id="que se ejecuta de lunes a viernes a las 9:40pm."&gt;que se ejecuta de lunes a viernes a las 9:40pm.&lt;/h1&gt;
&lt;p&gt;@sched.cron_schedule(day_of_week='mon-fri', hour=21,minute=30)&lt;/p&gt;
&lt;p&gt;def Tarea2():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se muestra en pantalla la hora del momento que se ejecuta la aplicacion.

print "Se ejecuto a las : %s" %ctime()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se pasa la configuracion al scheduler"&gt;Se pasa la configuracion al scheduler&lt;/h1&gt;
&lt;p&gt;sched.configure()&lt;/p&gt;
&lt;h1 id="se inicia el scheduler"&gt;Se inicia el scheduler&lt;/h1&gt;
&lt;p&gt;sched.start()&lt;/p&gt;
&lt;h1 id="se muestra las tareas definidas."&gt;Se muestra las tareas definidas.&lt;/h1&gt;
&lt;p&gt;print sched.print_jobs()&lt;/p&gt;
&lt;h1 id="se crea un ciclo de 10 iteraciones"&gt;Se crea un ciclo de 10 iteraciones&lt;/h1&gt;
&lt;h1 id="donde se espera un minuto por cada iteracion"&gt;Donde se espera un minuto por cada iteracion&lt;/h1&gt;
&lt;h1 id="se muestra en pantalla las veces que se ejecuta."&gt;Se muestra en pantalla las veces que se ejecuta.&lt;/h1&gt;
&lt;p&gt;for i in range(10):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print "---- %s" %i

sleep(60)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se detiene las tareas del scheduler al finalizar"&gt;Se detiene las tareas del scheduler al finalizar&lt;/h1&gt;
&lt;h1 id="las iteraciones"&gt;las iteraciones&lt;/h1&gt;
&lt;p&gt;sched.shutdown(wait=False)
```
La salida de la ejecuci&amp;oacute;n del programa se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```
ernesto@clara:~/bin/python/procesos$ sudo ./procesos2.py &lt;/p&gt;
&lt;p&gt;Jobstore default:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tarea1 (trigger: interval[0:01:00], next run at: 2012-07-18 21:27:59.911483)

Tarea2 (trigger: cron[day_of_week='mon-fri', hour='21', minute='30'], next run at: 2012-07-18 21:30:00)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;p&gt;---- 0&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:27:59 2012&lt;/p&gt;
&lt;p&gt;---- 1&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:28:59 2012&lt;/p&gt;
&lt;p&gt;---- 2&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:29:59 2012&lt;/p&gt;
&lt;p&gt;Se ejecuto a las : Wed Jul 18 21:30:00 2012&lt;/p&gt;
&lt;p&gt;---- 3&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:30:59 2012&lt;/p&gt;
&lt;p&gt;---- 4&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:31:59 2012&lt;/p&gt;
&lt;p&gt;---- 5&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:32:59 2012&lt;/p&gt;
&lt;p&gt;---- 6&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:33:59 2012&lt;/p&gt;
&lt;p&gt;---- 7&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:34:59 2012&lt;/p&gt;
&lt;p&gt;---- 8&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:35:59 2012&lt;/p&gt;
&lt;p&gt;---- 9&lt;/p&gt;
&lt;p&gt;Se ejecuta cada minuto: Wed Jul 18 21:36:59 2012
```
Con est&amp;aacute; librer&amp;iacute;a se puede definir la ejecuci&amp;oacute;n de procesos a ciertos d&amp;iacute;as y horas, o de forma peri&amp;oacute;dica.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="Tareas periodicas"></category></entry><entry><title>Desplegar información vía web con Django. Parte 3.</title><link href="https://ecrespo.github.io/desplegar-informacion-via-web-con-django-parte-3.html" rel="alternate"></link><published>2012-07-15T09:00:00-05:30</published><updated>2012-07-15T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-15:/desplegar-informacion-via-web-con-django-parte-3.html</id><summary type="html">&lt;p&gt;En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/hola-mundo-con-django-parte-2.html#hola-mundo-con-django-parte-2"&gt;anterior&lt;/a&gt; se explic&amp;oacute; como mostrar un resultado en una p&amp;aacute;gina web por medio de &lt;code&gt;Django&lt;/code&gt;, ahora se mostrar&amp;aacute; una serie de informaci&amp;oacute;n como p&amp;aacute;gina html normal y luego usando las plantillas de &lt;code&gt;Django&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La idea es desplegar una serie de actividades mostrando el nivel de prioridad que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el art&amp;iacute;culo &lt;a href="https://www.seraph.to/hola-mundo-con-django-parte-2.html#hola-mundo-con-django-parte-2"&gt;anterior&lt;/a&gt; se explic&amp;oacute; como mostrar un resultado en una p&amp;aacute;gina web por medio de &lt;code&gt;Django&lt;/code&gt;, ahora se mostrar&amp;aacute; una serie de informaci&amp;oacute;n como p&amp;aacute;gina html normal y luego usando las plantillas de &lt;code&gt;Django&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La idea es desplegar una serie de actividades mostrando el nivel de prioridad que tiene cada actividad.&lt;/p&gt;
&lt;p&gt;Se tiene la vista (views.py) con la funci&amp;oacute;n Actividades, esta funci&amp;oacute;n retorna un c&amp;oacute;digo html con la lista de actividades y su prioridad. Es necesario modificar el archivo &lt;code&gt;urls.py&lt;/code&gt; para cuando se coloque el url que se desea visitar (en este caso asociada a actividades), este devuelva el resultado de la funci&amp;oacute;n Actividades del archivo &lt;code&gt;views.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del archivo &lt;code&gt;views.py&lt;/code&gt; se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python
from django.http import HttpResponse&lt;/p&gt;
&lt;p&gt;def Actividades(request):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return HttpResponse("""

                    &amp;lt;html&amp;gt;

                    &amp;lt;head&amp;gt;

                    &amp;lt;title&amp;gt;Lista de actividades&amp;lt;/title&amp;gt;

                    &amp;lt;/head&amp;gt;

                    &amp;lt;body&amp;gt;

                    &amp;lt;h1&amp;gt;Actividades:&amp;lt;/h1&amp;gt;

                    &amp;lt;li&amp;gt;Comprar comida&amp;lt;/li&amp;gt;

                    &amp;lt;li&amp;gt;Preparar articulo&amp;lt;/li&amp;gt;

                    &amp;lt;li&amp;gt;Trotar&amp;lt;/li&amp;gt;

                    &amp;lt;li&amp;gt;Reunion para proyecto pysms&amp;lt;/li&amp;gt;

                    &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;""")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del archivo &lt;code&gt;urls.py&lt;/code&gt; se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python
from django.conf.urls import patterns, include, url&lt;/p&gt;
&lt;p&gt;import todo.views&lt;/p&gt;
&lt;p&gt;urlpatterns = patterns('',&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r'^actividades/',todo.views.Actividades),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;)
```
Al visitar el url http://127.0.0.1:8080/actividades se muestra la p&amp;aacute;gina como aparece en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desplegarinformacionviawebcondjango-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ahora en vez de insertar c&amp;oacute;digo html en la vista se usar&amp;aacute; plantillas, para ello se crea una funci&amp;oacute;n &lt;code&gt;Actividades1&lt;/code&gt; en la vista donde se crea una lista de diccionarios con la informaci&amp;oacute;n de la actividad y su prioridad,  se carga la plantilla &lt;code&gt;index.html&lt;/code&gt;, se crea el contexto donde se le pasa la lista de diccionarios de las actividades y se retorna la respuesta HTTP por medio de la plantilla haciendo render del contexto.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo del archivo views.py:
```python&lt;/p&gt;
&lt;h1 id="create your views here."&gt;Create your views here.&lt;/h1&gt;
&lt;p&gt;from django.http import HttpResponse&lt;/p&gt;
&lt;p&gt;from django.template import Context, loader&lt;/p&gt;
&lt;p&gt;def Actividades(request):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return HttpResponse("""

                    &amp;lt;html&amp;gt;

                    &amp;lt;head&amp;gt;

                    &amp;lt;title&amp;gt;Lista de actividades&amp;lt;/title&amp;gt;

                    &amp;lt;/head&amp;gt;

                    &amp;lt;body&amp;gt;

                    &amp;lt;h1&amp;gt;Actividades:&amp;lt;/h1&amp;gt;

                    &amp;lt;li&amp;gt;Comprar comida&amp;lt;/li&amp;gt;

                    &amp;lt;li&amp;gt;Preparar articulo&amp;lt;/li&amp;gt;

                    &amp;lt;li&amp;gt;Trotar&amp;lt;/li&amp;gt;

                    &amp;lt;li&amp;gt;Reunion para proyecto pysms&amp;lt;/li&amp;gt;

                    &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;""")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def Actividades1(request):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se genera la lista de diccionarios con las actividades y su importancia

actividades = [{'titulo':'Comprar comida','importancia':'baja'},

    {'titulo':'Preparar articulo','importancia':'media'},

    {'titulo':'Trotar','importancia':'alta'},

    {'titulo':'Reunion para proyecto Pysms','importancia':'muy alta'}]

#Se carga el archivo con la plantilla html

t = loader.get_template('index.html')

#Se carga el contexto de las actividades

c = Context({'actividades': actividades,})

#Se envia la respuesta renderizando el contexto a la plantilla

return HttpResponse(t.render(c))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Ahora se agrega una nueva l&amp;iacute;nea al archivo &lt;code&gt;urls.py&lt;/code&gt; donde aparece la redirecci&amp;oacute;n a actividades1 que usa la funci&amp;oacute;n de la vista (views.py) Actividades1:
```python
from django.conf.urls import patterns, include, url&lt;/p&gt;
&lt;p&gt;import todo.views&lt;/p&gt;
&lt;p&gt;urlpatterns = patterns('',&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r'^actividades/',todo.views.Actividades),

url(r'^actividades1/',todo.views.Actividades1),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;)
&lt;code&gt;``
Ahora se crear&amp;aacute; un directorio llamado plantillas dentro de la aplicaci&amp;oacute;n pruebas del proyecto pruebas, dentro de ese directorio se crea el archivo&lt;/code&gt;index.html` con el siguiente contenido:&lt;/p&gt;
&lt;p&gt;```
&lt;html&gt;&lt;/html&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;

    &amp;lt;title&amp;gt;Lista de actividades&amp;lt;/title&amp;gt;

    &amp;lt;style type="text/css"&amp;gt;

         body { font-family: Arial, Helvetica, sans-serif;color: black;background: #ffffff; }

    &amp;lt;/style&amp;gt;




&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;Actividades:&amp;lt;/h1&amp;gt;

        {% if actividades %}

        &amp;lt;table border="1"&amp;gt;

        {% for actividad in actividades %}

        &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;{{actividad.titulo}}&amp;lt;/td&amp;gt;

        &amp;lt;td&amp;gt;{{actividad.importancia}}&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;

        {% endfor %}

        &amp;lt;/table&amp;gt;

        {% else %}

        &amp;lt;p&amp;gt;No hay actividades que hacer!&amp;lt;/p&amp;gt;

        {% endif %}

&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
```
&lt;p&gt;Al salvar el archivo se inicia el servidor de &lt;code&gt;django&lt;/code&gt; (python manage.py runserver 8080) y aparece lo siguiente al navegar a http://localhost:8080/actividades1/ :&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desplegarinformacionviawebcondjango-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;La aplicaci&amp;oacute;n dice que la plantilla no existe, claro falt&amp;oacute; modificar el archivo &lt;code&gt;settings.py&lt;/code&gt; para que busque la plantilla en la ruta donde se encuentra:&lt;/p&gt;
&lt;p&gt;El archivo &lt;code&gt;settings.py&lt;/code&gt; debe tener la ruta donde se guardar&amp;aacute; las plantillas, la configuraci&amp;oacute;n de la secci&amp;oacute;n templates se muestra a continuaci&amp;oacute;n:
```python
TEMPLATE_DIRS = (&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".

# Always use forward slashes, even on Windows.

# Don't forget to use absolute paths, not relative paths.

'/home/ernesto/django/pruebas/pruebas/pruebas/plantillas/'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;)
```
Luego al iniciar el servidor web de Django se obtiene el resultado de la lista de actividades con sus prioridades:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/desplegarinformacionviawebcondjango-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Pueden bajar el archivo comprimido del c&amp;oacute;digo en este &lt;a href="www.debian.org.ve/varios/pruebas-django.tar.gz"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Django"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Captura de imágen desde webcam con el framework SimpleCV. Parte 2.</title><link href="https://ecrespo.github.io/captura-de-imagen-desde-webcam-con-el-framework-simplecv-parte-2.html" rel="alternate"></link><published>2012-07-08T10:00:00-05:30</published><updated>2012-07-08T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-08:/captura-de-imagen-desde-webcam-con-el-framework-simplecv-parte-2.html</id><summary type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/captura-de-imagen-desde-la-webcam-con-el-framework-simplecv-parte-1.html#captura-de-imagen-desde-la-webcam-con-el-framework-simplecv-parte-1"&gt;art&amp;iacute;culo anterior&lt;/a&gt; se explica como usar la webcam del equipo para capturar una im&amp;aacute;gen, en este caso se explicar&amp;aacute; como definir el tama&amp;ntilde;o de la im&amp;aacute;gen, ahora se muestra como manejar 2 webcam al mismo tiempo.&lt;/p&gt;
&lt;p&gt;La idea es capturar im&amp;aacute;genes de ambas webcam y luego salvarlas en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/captura-de-imagen-desde-la-webcam-con-el-framework-simplecv-parte-1.html#captura-de-imagen-desde-la-webcam-con-el-framework-simplecv-parte-1"&gt;art&amp;iacute;culo anterior&lt;/a&gt; se explica como usar la webcam del equipo para capturar una im&amp;aacute;gen, en este caso se explicar&amp;aacute; como definir el tama&amp;ntilde;o de la im&amp;aacute;gen, ahora se muestra como manejar 2 webcam al mismo tiempo.&lt;/p&gt;
&lt;p&gt;La idea es capturar im&amp;aacute;genes de ambas webcam y luego salvarlas en formato png.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n es la siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importa camera de simplecv"&gt;Importa Camera de SimpleCV&lt;/h1&gt;
&lt;p&gt;from SimpleCV import Camera&lt;/p&gt;
&lt;h1 id="se importa sleep de time"&gt;Se importa sleep de time&lt;/h1&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="se asocia la primera camara con un ancho y alto predefinido."&gt;Se asocia la primera camara con un ancho y alto predefinido.&lt;/h1&gt;
&lt;p&gt;camara1 = Camera(0,{ "width": 640, "height": 480 })&lt;/p&gt;
&lt;h1 id="se asocia la segunda camara"&gt;Se asocia la segunda camara&lt;/h1&gt;
&lt;p&gt;camara2 = Camera(1)&lt;/p&gt;
&lt;h1 id="se captura la imagen de la primera camara y segunda camara"&gt;Se captura la imagen de la primera camara y segunda camara&lt;/h1&gt;
&lt;p&gt;imagen1 = camara1.getImage()&lt;/p&gt;
&lt;p&gt;imagen2 = camara2.getImage()&lt;/p&gt;
&lt;h1 id="se escribe un texto en la primera camara con la posicion dentro de la"&gt;Se escribe un texto en la primera camara con la posicion dentro de la&lt;/h1&gt;
&lt;h1 id="imagen donde va a estar."&gt;imagen donde va a estar.&lt;/h1&gt;
&lt;p&gt;imagen1.drawText("Camara 1",160, 120)&lt;/p&gt;
&lt;h1 id="se escribe un texto en la segunda camara"&gt;Se escribe un texto en la segunda camara&lt;/h1&gt;
&lt;p&gt;imagen2.drawText("Camara 2")&lt;/p&gt;
&lt;h1 id="se muestra ambas imagenes"&gt;Se muestra ambas imagenes&lt;/h1&gt;
&lt;p&gt;imagen1.show()&lt;/p&gt;
&lt;p&gt;imagen2.show()&lt;/p&gt;
&lt;h1 id="se salva ambas imagenes"&gt;Se salva ambas imagenes&lt;/h1&gt;
&lt;p&gt;imagen1.save("imagen1.png")&lt;/p&gt;
&lt;p&gt;imagen2.save("imagen2.png")
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra las im&amp;aacute;genes capturadas por las 2 webcam: 
Webcam 1:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/capturadeimagendesdewebcamconelframeworksimplecv-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Webcam 2:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/capturadeimagendesdewebcamconelframeworksimplecv-2.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Camara"></category><category term="Canaima"></category><category term="Debian"></category><category term="gnome"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="SimpleCV"></category></entry><entry><title>Hola Mundo con Django. Parte 2.</title><link href="https://ecrespo.github.io/hola-mundo-con-django-parte-2.html" rel="alternate"></link><published>2012-07-07T09:00:00-05:30</published><updated>2012-07-07T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-07:/hola-mundo-con-django-parte-2.html</id><summary type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/framework-de-desarrollo-web-django-parte-1.html#framework-de-desarrollo-web-django-parte-1"&gt;art&amp;iacute;culo de Framework de desarrollo web con &lt;code&gt;Django&lt;/code&gt; parte 1&lt;/a&gt; se explica como instalar &lt;code&gt;Django&lt;/code&gt; 
e iniciar el servidor web que viene incorporado para realizar pruebas del desarrollo.&lt;/p&gt;
&lt;p&gt;Ahora se explicar&amp;aacute; como mostrar una p&amp;aacute;gina web con un mensaje "Hola Mundo".&lt;/p&gt;
&lt;p&gt;Dentro del directorio pruebas del proyecto pruebas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/framework-de-desarrollo-web-django-parte-1.html#framework-de-desarrollo-web-django-parte-1"&gt;art&amp;iacute;culo de Framework de desarrollo web con &lt;code&gt;Django&lt;/code&gt; parte 1&lt;/a&gt; se explica como instalar &lt;code&gt;Django&lt;/code&gt; 
e iniciar el servidor web que viene incorporado para realizar pruebas del desarrollo.&lt;/p&gt;
&lt;p&gt;Ahora se explicar&amp;aacute; como mostrar una p&amp;aacute;gina web con un mensaje "Hola Mundo".&lt;/p&gt;
&lt;p&gt;Dentro del directorio pruebas del proyecto pruebas creado en el art&amp;iacute;culo anterior se crea una aplicaci&amp;oacute;n, La aplicaci&amp;oacute;n se llamar&amp;aacute; &lt;code&gt;todo&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
python manage.py startapp todo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Este comando crea el directorio &lt;code&gt;todo&lt;/code&gt;. Dentro de ese directorio encontrar&amp;aacute;n los siguientes archivos:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;__init__.py&lt;/code&gt;: Espec&amp;iacute;fica a python que el contenido del directorio es un paquete.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;models.py&lt;/code&gt;: Modelo de datos para la base de datos usando un ORM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests.py&lt;/code&gt;: Define las pruebas unitarias.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views.py&lt;/code&gt;: Se crean las vistas de la aplicaci&amp;oacute;n por medio de funciones.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En el archivo &lt;code&gt;views.py&lt;/code&gt; se crea una funci&amp;oacute;n donde devuelve un string como respuesta para la p&amp;aacute;gina web:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="se importa httpresponse, la cual sera usado para devolver una respuesta http."&gt;Se importa HttpResponse, la cual ser&amp;aacute; usado para devolver una respuesta http.&lt;/h1&gt;
&lt;p&gt;from django.http import HttpResponse&lt;/p&gt;
&lt;h1 id="se crea la funcion holamundo, se le pasa como argumento request."&gt;Se crea la funci&amp;oacute;n HolaMundo, se le pasa como argumento request.&lt;/h1&gt;
&lt;p&gt;def HolaMundo(request):&lt;/p&gt;
&lt;h1 id="se devuelve una respuesta http pasando el string que se quiere que"&gt;Se devuelve una respuesta http pasando el string que se quiere que&lt;/h1&gt;
&lt;h1 id="aparezca en la pagina web."&gt;aparezca en la p&amp;aacute;gina web.&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;return HttpResponse("Hola Mundo!")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```
Ahora que se creo la funci&amp;oacute;n en el archivo de vistas, se hace necesario definir el URL donde se podr&amp;aacute; ver la p&amp;aacute;gina de la vista.&lt;/p&gt;
&lt;p&gt;Para visualizar la pagina se crea una l&amp;iacute;nea en el archivo &lt;code&gt;urls.py&lt;/code&gt; del proyecto donde se define la expresi&amp;oacute;n regular del url que se desea mostrar la p&amp;aacute;gina, luego se coloca la ruta de la funci&amp;oacute;n del archivo &lt;code&gt;views.py&lt;/code&gt; donde se devuelve el string que se va a mostrar en la p&amp;aacute;gina.&lt;/p&gt;
&lt;p&gt;El archivo &lt;code&gt;urls.py&lt;/code&gt; contiene lo siguiente:
```python&lt;/p&gt;
&lt;h1 id="se importa patterns y url."&gt;Se importa  patterns y url.&lt;/h1&gt;
&lt;p&gt;from django.conf.urls import patterns,  url&lt;/p&gt;
&lt;h1 id="se importa la vista de la aplicacion todo."&gt;Se importa la vista de la aplicaci&amp;oacute;n todo.&lt;/h1&gt;
&lt;p&gt;import todo.views&lt;/p&gt;
&lt;h1 id="se define la tupla de patterns donde se lista los urls a desplegar."&gt;Se define la tupla de patterns donde se lista los urls a desplegar.&lt;/h1&gt;
&lt;h1 id="se busca que el url tenga el patron /hola, y se ejecuta holamundo del archivo views.py."&gt;Se busca que el url tenga el patr&amp;oacute;n /hola, y se ejecuta HolaMundo del archivo views.py.&lt;/h1&gt;
&lt;p&gt;urlpatterns = patterns('',&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r'^hola/',todo.views.HolaMundo),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;)
```&lt;/p&gt;
&lt;p&gt;Se ejecuta el servidor de &lt;code&gt;django&lt;/code&gt;:
&lt;code&gt;python
python manage.py runserver 8080&lt;/code&gt;
La figura muestra el resultado de abrir el url http://127.0.0.1:8080/hola/&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/holamundocondjango-1.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Debian"></category><category term="Django"></category><category term="Linux"></category><category term="python"></category><category term="Ubuntu"></category></entry><entry><title>Framework de desarrollo web Django. Parte 1.</title><link href="https://ecrespo.github.io/framework-de-desarrollo-web-django-parte-1.html" rel="alternate"></link><published>2012-07-06T09:00:00-05:30</published><updated>2012-07-06T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-06:/framework-de-desarrollo-web-django-parte-1.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Django&lt;/code&gt; es un framework de desarrollo web hecho en python que usa el paradigma &lt;code&gt;MTV&lt;/code&gt;, Modelo, template (plantilla) y Vista.&lt;/p&gt;
&lt;p&gt;Para instalar django en Debian se puede hacer con &lt;code&gt;apt-get&lt;/code&gt;:
&lt;code&gt;apt-get install python-django&lt;/code&gt;
Si se desea instalar la &amp;uacute;ltima versi&amp;oacute;n de &lt;code&gt;Django&lt;/code&gt; se puede hacer con &lt;code&gt;easy_install&lt;/code&gt; o por &lt;code&gt;pip …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Django&lt;/code&gt; es un framework de desarrollo web hecho en python que usa el paradigma &lt;code&gt;MTV&lt;/code&gt;, Modelo, template (plantilla) y Vista.&lt;/p&gt;
&lt;p&gt;Para instalar django en Debian se puede hacer con &lt;code&gt;apt-get&lt;/code&gt;:
&lt;code&gt;apt-get install python-django&lt;/code&gt;
Si se desea instalar la &amp;uacute;ltima versi&amp;oacute;n de &lt;code&gt;Django&lt;/code&gt; se puede hacer con &lt;code&gt;easy_install&lt;/code&gt; o por &lt;code&gt;pip&lt;/code&gt;:
&lt;code&gt;python
easy_install django&lt;/code&gt;
&amp;oacute;
&lt;code&gt;python
pip install django&lt;/code&gt;
Luego de instalado &lt;code&gt;django&lt;/code&gt; se procede a crear un proyecto:
django-admin startproject pruebas&lt;/p&gt;
&lt;p&gt;Se crea el directorio pruebas.&lt;/p&gt;
&lt;p&gt;Dentro de dicho directorio se tiene lo siguiente:
1. &lt;code&gt;manage.py&lt;/code&gt; : Interfaz de l&amp;iacute;nea de comando para las aplicaciones.
2. &lt;code&gt;pruebas&lt;/code&gt;: Directorio del proyecto.&lt;/p&gt;
&lt;p&gt;Dentro del directorio se tiene lo siguiente:
1. &lt;code&gt;__init__.py&lt;/code&gt; : Define que es un paquete python.
2. &lt;code&gt;settings.py&lt;/code&gt; : Archivo de configuraci&amp;oacute;n espec&amp;iacute;fico del proyecto.
3. &lt;code&gt;urls.py&lt;/code&gt; : Configuraci&amp;oacute;n global de URLs.
4. &lt;code&gt;wsgi.py&lt;/code&gt; : Configuraci&amp;oacute;n de WSGI para el proyecto pruebas.&lt;/p&gt;
&lt;p&gt;El archivo &lt;code&gt;settings.py&lt;/code&gt; contiene lo siguiente:&lt;/p&gt;
&lt;p&gt;Habilita el modo debug para la aplicaci&amp;oacute;n web y la plantilla:
&lt;code&gt;DEBUG = True
TEMPLATE_DEBUG = DEBUG&lt;/code&gt;
Se define el admin del proyecto:
&lt;code&gt;ADMINS = (
    ('Ernesto Nadir Crespo Avila', 'ecrespo@gmail.com'),
)&lt;/code&gt;
Se define la base de datos a utilizar (se  puede utilizar, mysql, postgresql, sqlite3 u oracle, con alguna extensi&amp;oacute;n se puede usar mongodb ), con la configuraci&amp;oacute;n necesaria para conectarse a dicha base de datos:&lt;br/&gt;
&lt;code&gt;DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se define la zona horaria:
&lt;code&gt;TIME_ZONE = 'America/Caracas'&lt;/code&gt;
Se define el idioma de la aplicaci&amp;oacute;n:
&lt;code&gt;LANGUAGE_CODE = 'es-ve'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;En otro art&amp;iacute;culo se continuar&amp;aacute; con la explicaci&amp;oacute;n de las opciones que tiene el archivo de configuraci&amp;oacute;n del proyecto en django.&lt;/p&gt;
&lt;p&gt;Para iniciar el servidor de pruebas se ejecuta el siguiente comando:&lt;/p&gt;
&lt;p&gt;Para iniciar un servidor web local.
&lt;code&gt;python manage.py runserver 127.0.0.1&lt;/code&gt;
Si se desea usar una IP y un puerto espec&amp;iacute;fico.
&lt;code&gt;python manage.py runserver ip:puerto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;La figura muestra el servidor de pruebas de django en funcionamiento:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/frameworkdedesarrollowebdjango-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la p&amp;aacute;gina de inicio del servidor django en el navegador:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/frameworkdedesarrollowebdjango-2.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="Django"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Tutorial de ZeroMQ con Python. Parte 8.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-parte-8.html" rel="alternate"></link><published>2012-07-02T09:00:00-05:30</published><updated>2012-07-02T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-07-02:/tutorial-de-zeromq-con-python-parte-8.html</id><summary type="html">&lt;p&gt;Siguiendo con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;ejemplos sobre ZeroMQ&lt;/a&gt;. Este art&amp;iacute;culo muestra el uso del patr&amp;oacute;n PUB/SUB como en el &lt;a href="https://www.seraph.to/tutorial-de-zeromq-con-pythonpubsub-parte-4.html#tutorial-de-zeromq-con-pythonpubsub-parte-4"&gt;art&amp;iacute;culo de zeroMQ parte 4&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;La diferencia est&amp;aacute; en la definici&amp;oacute;n del transporte, en la parte 4 se usa tcp y en este caso se usar&amp;aacute; &lt;a href="api.zeromq.org/2-1:zmq-epgm"&gt;epgm&lt;/a&gt; que se usa para multicast …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siguiendo con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;ejemplos sobre ZeroMQ&lt;/a&gt;. Este art&amp;iacute;culo muestra el uso del patr&amp;oacute;n PUB/SUB como en el &lt;a href="https://www.seraph.to/tutorial-de-zeromq-con-pythonpubsub-parte-4.html#tutorial-de-zeromq-con-pythonpubsub-parte-4"&gt;art&amp;iacute;culo de zeroMQ parte 4&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;La diferencia est&amp;aacute; en la definici&amp;oacute;n del transporte, en la parte 4 se usa tcp y en este caso se usar&amp;aacute; &lt;a href="api.zeromq.org/2-1:zmq-epgm"&gt;epgm&lt;/a&gt; que se usa para multicast.&lt;/p&gt;
&lt;p&gt;El ejemplo que se mostrar&amp;aacute; se basa en el art&amp;iacute;culo de Saghul Ibarra en su blog &lt;a href="code.saghul.net/implementing-a-pubsub-based-application-with"&gt;Saghul Ibarra en su blog&lt;/a&gt;.
El productor crea una l&amp;iacute;nea de comandos donde se pasa el texto al consumidor, el consumidor recibe el texto y s&amp;oacute;lo se muestra en pantalla el texto que est&amp;aacute; definido en la subscripci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;En el productor se define unas opciones en el socket, en el sitio de ZeroMQ tiene una explicaci&amp;oacute;n de las &lt;a href="api.zeromq.org/2-1:zmq-setsockopt"&gt;opciones para crear el socket&lt;/a&gt;. LINGER con par&amp;aacute;metro cero define que se descarte mensajes que no son enviados.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del productor se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="producer"&gt;producer&lt;/h1&gt;
&lt;h1 id="se importa zeromq"&gt;Se importa ZeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia de la clase context."&gt;Se crea la instancia de la clase Context.&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se define el socket con parametro pub"&gt;Se define el socket con parametro PUB&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.PUB)&lt;/p&gt;
&lt;h1 id="se define unas opciones en el socket"&gt;Se define unas opciones en el socket&lt;/h1&gt;
&lt;h1 id="esta opcion linger con valor cero, descarta mensajes no enviados"&gt;esta opcion LINGER con valor cero, descarta mensajes no enviados&lt;/h1&gt;
&lt;p&gt;socket.setsockopt(zmq.LINGER, 0)    &lt;/p&gt;
&lt;h1 id="se conecta al socket a la ip y puerto"&gt;Se conecta al socket a la IP y puerto&lt;/h1&gt;
&lt;h1 id="por medio de multicast"&gt;por medio de multicast&lt;/h1&gt;
&lt;p&gt;socket.connect('epgm://192.168.10.96:5000')&lt;/p&gt;
&lt;h1 id="se crea un ciclo"&gt;Se crea un ciclo&lt;/h1&gt;
&lt;h1 id="si se envia el texto salir, se envia y luego finaliza el ciclo"&gt;si se envia el texto salir, se envia y luego finaliza el ciclo&lt;/h1&gt;
&lt;h1 id="si no, se envia el texto"&gt;si no, se envia el texto&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;mensaje = raw_input("-&amp;gt;")&lt;/p&gt;
&lt;p&gt;print mensaje&lt;/p&gt;
&lt;p&gt;socket.send(mensaje)&lt;/p&gt;
&lt;p&gt;if mensaje == "salir": break&lt;/p&gt;
&lt;p&gt;socket.close()
```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa consumidor es el siguiente: 
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar zeromq"&gt;Importar zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia de la clase contexto"&gt;Se crea la instancia de la clase contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se define el socket con parametro sub"&gt;Se define el socket con parametro SUB&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.SUB)&lt;/p&gt;
&lt;h1 id="se conecta el socket a la ip y puerto del productor"&gt;Se conecta el socket a la IP y puerto del productor&lt;/h1&gt;
&lt;h1 id="con el transporte epgm"&gt;con el transporte epgm&lt;/h1&gt;
&lt;p&gt;socket.connect('epgm://192.168.10.96:5000')&lt;/p&gt;
&lt;h1 id="se define los textos que se recibe la informacion."&gt;Se define los textos que se recibe la informacion.&lt;/h1&gt;
&lt;h1 id="prueba, hora y salir."&gt;prueba, hora y salir.&lt;/h1&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, 'prueba')&lt;/p&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, 'hora')&lt;/p&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, 'salir')&lt;/p&gt;
&lt;h1 id="se define un ciclo,"&gt;Se define un ciclo,&lt;/h1&gt;
&lt;h1 id="se recibe la informacion"&gt;se recibe la informacion&lt;/h1&gt;
&lt;h1 id="si el texto es salir se muestra en pantalla"&gt;Si el texto es salir se muestra en pantalla&lt;/h1&gt;
&lt;h1 id="finaliza el ciclo, si no se muestra"&gt;finaliza el ciclo, si no se muestra&lt;/h1&gt;
&lt;h1 id="el texto en pantalla"&gt;el texto en pantalla&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rcv = socket.recv()

print rcv

if rcv == "salir": break
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Las siguientes figuras muestran el resultado de la ejecuci&amp;oacute;n de ambos programas: 
Productor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython8-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Consumidor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython8-2.png"/&gt; &lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Ubuntu"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con Python( Pipelining). Parte 7.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-pipelining-parte-7.html" rel="alternate"></link><published>2012-06-30T09:00:00-05:30</published><updated>2012-06-30T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-06-30:/tutorial-de-zeromq-con-python-pipelining-parte-7.html</id><summary type="html">&lt;p&gt;Siguiendo con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;ejemplos sobre ZeroMQ&lt;/a&gt;, ahora mostrar&amp;eacute; como usar diferentes tipos de transporte (antes se mostrada a tcp, ahora se usar&amp;aacute; &lt;code&gt;tcp&lt;/code&gt; e &lt;code&gt;ipc&lt;/code&gt; el cual es un modelo de comunicaci&amp;oacute;n interprocesos y puede ser de ayuda cuando se necesita baja latencia).&lt;/p&gt;
&lt;p&gt;Luego de escoger la capa de transporte …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siguiendo con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;ejemplos sobre ZeroMQ&lt;/a&gt;, ahora mostrar&amp;eacute; como usar diferentes tipos de transporte (antes se mostrada a tcp, ahora se usar&amp;aacute; &lt;code&gt;tcp&lt;/code&gt; e &lt;code&gt;ipc&lt;/code&gt; el cual es un modelo de comunicaci&amp;oacute;n interprocesos y puede ser de ayuda cuando se necesita baja latencia).&lt;/p&gt;
&lt;p&gt;Luego de escoger la capa de transporte se selecciona un patr&amp;oacute;n de mensaje, en art&amp;iacute;culos anteriores se ha mostrado los patrones REQ/REP, PUB/SUB y Pair, s&amp;oacute;lo queda por explicar su funcionamiento el patr&amp;oacute;n UPSTREAM/DOWNSTREAM.&lt;/p&gt;
&lt;p&gt;El patr&amp;oacute;n UPSTREAM/DOWNSTREAM se parece al patr&amp;oacute;n REQ/REP, la diferencia es que en REQ/REP puede existir comunicaci&amp;oacute;n bidireccional en cambio con UPSTREAM/DOWNSTREAM se tiene una comunicaci&amp;oacute;n en un s&amp;oacute;lo sentido y permite paralelizar procesos. En la figura se muestra el flujo de trabajo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython7-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Un ejemplo de su posible uso tomado del art&amp;iacute;culo de Nicholas Pi&amp;euml;l es que se tenga un sistema de reconocimiento de im&amp;aacute;genes en tiempo real, el servidor captura las im&amp;aacute;genes y se las env&amp;iacute;a a los workers para que sean procesadas, y al terminar dicho proceso se env&amp;iacute;an las im&amp;aacute;genes al colector.&lt;/p&gt;
&lt;p&gt;El servidor simplemente tiene 2 listas una de cadenas de texto que al final env&amp;iacute;a 2 "x" para que los clientes finalicen. Se crea un socket con capa de transporte tcp para env&amp;iacute;ar la lista de n&amp;uacute;meros, luego se crea el socket para ipc y se env&amp;iacute;a las cadenas de texto.&lt;/p&gt;
&lt;p&gt;Se notar&amp;aacute; que los clientes simplemente se conectan al servidor, uno de los clientes se conecta por tcp y el otro por ipc.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del servidor se muestra a continuaci&amp;oacute;n:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq y sleep de time"&gt;Se importa zeroMQ y sleep de time&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;ctx = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con parametro downstream"&gt;Se crea el socket con parametro DOWNSTREAM&lt;/h1&gt;
&lt;p&gt;socket = ctx.socket(zmq.DOWNSTREAM)&lt;/p&gt;
&lt;h1 id="se crea una lista de textos"&gt;Se crea una lista de textos&lt;/h1&gt;
&lt;p&gt;lista1 = ("Esta es una prueba,1","Desde zeroMQ,2","Sigo probando,3","Prueba...,4","q,5","1,6","q,7","x","x")&lt;/p&gt;
&lt;h1 id="se crea una lista de un rango de numeros"&gt;Se crea una lista de un rango de numeros&lt;/h1&gt;
&lt;p&gt;lista2 = range(1,4)&lt;/p&gt;
&lt;h1 id="se asocia el socket a una ip y puerto"&gt;Se asocia el socket a una IP y puerto&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:12345")&lt;/p&gt;
&lt;h1 id="se envia la lista de numeros a los clientes"&gt;Se envia la lista de numeros a los clientes&lt;/h1&gt;
&lt;h1 id="que se conectan al servidor."&gt;que se conectan al servidor.&lt;/h1&gt;
&lt;h1 id="el envio se hace cada segundo."&gt;El envio se hace cada segundo.&lt;/h1&gt;
&lt;p&gt;for i in lista2:&lt;/p&gt;
&lt;p&gt;socket.send("%s" %i)&lt;/p&gt;
&lt;p&gt;print "Enviado %s" %i&lt;/p&gt;
&lt;p&gt;sleep(1)&lt;/p&gt;
&lt;h1 id="se asocia el socket a un archivo por"&gt;Se asocia el socket a un archivo por&lt;/h1&gt;
&lt;h1 id="medio del transporte ipc"&gt;medio del transporte ipc&lt;/h1&gt;
&lt;p&gt;socket.bind("ipc:///tmp/zmqdemo")&lt;/p&gt;
&lt;h1 id="se envia la lista de textos a los clientes conectados"&gt;Se envia la lista de textos a los clientes conectados&lt;/h1&gt;
&lt;h1 id="el envio se realiza cada segundo."&gt;el envio se realiza cada segundo.&lt;/h1&gt;
&lt;p&gt;for i in lista1:&lt;/p&gt;
&lt;p&gt;socket.send(i)&lt;/p&gt;
&lt;p&gt;print "Enviado %s" %i&lt;/p&gt;
&lt;p&gt;sleep(1)
```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del cliente que usa tcp como transporte se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa el modulo zeromq"&gt;Se importa el modulo zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_1"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;ctx = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con parametro upstream"&gt;Se crea el socket con Parametro UPSTREAM&lt;/h1&gt;
&lt;p&gt;socket = ctx.socket(zmq.UPSTREAM)&lt;/p&gt;
&lt;h1 id="se conecta el socket (tcp) al servidor y su puerto"&gt;Se conecta el socket (tcp) al servidor y su puerto&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:12345")&lt;/p&gt;
&lt;h1 id="se crea un ciclo que recibe lo que envia el"&gt;Se crea un ciclo que recibe lo que envia el&lt;/h1&gt;
&lt;h1 id="servidor y lo muestra en pantalla"&gt;servidor y lo muestra en pantalla&lt;/h1&gt;
&lt;h1 id="y se recibe la letra x finaliza la conexion del cliente"&gt;y se recibe la letra x finaliza la conexion del cliente&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;rcv =  socket.recv()&lt;/p&gt;
&lt;p&gt;if rcv == "x" :&lt;/p&gt;
&lt;p&gt;print rcv&lt;/p&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;p&gt;print rcv 
```&lt;/p&gt;
&lt;p&gt;Se muestra el c&amp;oacute;digo del cliente utilizando como transporte ipc:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_2"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa el modulo zeromq_1"&gt;Se importa el modulo zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_2"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;ctx = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con parametro upstream_1"&gt;Se crea el socket con parametro UPSTREAM&lt;/h1&gt;
&lt;p&gt;socket = ctx.socket(zmq.UPSTREAM)&lt;/p&gt;
&lt;h1 id="se conecta el socket a un archivo temporal"&gt;Se conecta el socket a un archivo temporal&lt;/h1&gt;
&lt;h1 id="por medio de ipc como transporte"&gt;por medio de ipc como transporte&lt;/h1&gt;
&lt;p&gt;socket.connect("ipc:///tmp/zmqdemo")&lt;/p&gt;
&lt;h1 id="se crea un ciclo para recibir"&gt;Se crea un ciclo para recibir&lt;/h1&gt;
&lt;h1 id="la informacion del servidor"&gt;la informacion del servidor&lt;/h1&gt;
&lt;h1 id="se muestra en pantalla"&gt;se muestra en pantalla&lt;/h1&gt;
&lt;h1 id="si se recibe la letra x"&gt;si se recibe la letra x&lt;/h1&gt;
&lt;h1 id="finaliza la conexion con el servidor"&gt;finaliza la conexion con el servidor&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;rcv = socket.recv()&lt;/p&gt;
&lt;p&gt;if rcv ==  'x':&lt;/p&gt;
&lt;p&gt;print rcv&lt;/p&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;p&gt;print rcv&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La siguientes figuras muestran el resultado en el servidor y ambos clientes:
Servidor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython7-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Cliente (tcp):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython7-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Cliente (ipc):  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython7-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Como se nota en las figuras de los clientes, la informaci&amp;oacute;n que env&amp;iacute;a el servidor a los clientes se distribuye entre ambos.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con Python( PUSH/PULL). Parte 6.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-pushpull-parte-6.html" rel="alternate"></link><published>2012-06-03T09:00:00-05:30</published><updated>2012-06-03T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-06-03:/tutorial-de-zeromq-con-python-pushpull-parte-6.html</id><summary type="html">&lt;p&gt;Siguiendo con la serie sobre &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;ZeroMQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se explica el funcionamiento de PUSH y PULL.&lt;/p&gt;
&lt;p&gt;La idea es que se tiene el emisor, quien env&amp;iacute;a a los "workers" unos string que son procesados de distinta manera o de igual manera (una forma de crear escalabilidad). Luego que los …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siguiendo con la serie sobre &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;ZeroMQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se explica el funcionamiento de PUSH y PULL.&lt;/p&gt;
&lt;p&gt;La idea es que se tiene el emisor, quien env&amp;iacute;a a los "workers" unos string que son procesados de distinta manera o de igual manera (una forma de crear escalabilidad). Luego que los "workers" procesan la informaci&amp;oacute;n recibida del emisor se la pasan a resultado quien presenta la informaci&amp;oacute;n en pantalla.&lt;/p&gt;
&lt;p&gt;La figura muestra el proceso ya explicado:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython6-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del emisor es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/python"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="se importa zeromq y random"&gt;Se importa zeroMQ y random&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;p&gt;import random&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con el argumento push"&gt;Se crea el socket con el argumento PUSH&lt;/h1&gt;
&lt;p&gt;envio =context.socket(zmq.PUSH)&lt;/p&gt;
&lt;h1 id="se asocia el socket a escuchar todas las ips y el puerto 5557"&gt;Se asocia el socket a escuchar todas las IPs y el puerto 5557&lt;/h1&gt;
&lt;p&gt;envio.bind("tcp://*:5557")&lt;/p&gt;
&lt;h1 id="se muestra que es necesario esperar que arranquen los workers"&gt;se muestra que es necesario esperar que arranquen los workers&lt;/h1&gt;
&lt;p&gt;print "Hay que esperar que los workers se inicien"&lt;/p&gt;
&lt;h1 id="al dar enter se inicia el proceso de transmision"&gt;Al dar enter se inicia el proceso de transmision&lt;/h1&gt;
&lt;p&gt;raw_input()&lt;/p&gt;
&lt;p&gt;print "Se inicia la transmision del trabajo..."&lt;/p&gt;
&lt;h1 id="tupla de strings que se van a enviar"&gt;tupla de strings que se van a enviar&lt;/h1&gt;
&lt;p&gt;cadenas = ['hola', 'aloha','hello','buenas noches','buenas tardes','buenos dias','bienvenido']&lt;/p&gt;
&lt;h1 id="se crea un ciclo para recorrer la tupla"&gt;Se crea un ciclo para recorrer la tupla&lt;/h1&gt;
&lt;p&gt;for i in range(len(cadenas)):&lt;/p&gt;
&lt;p&gt;cadena = cadenas[i]&lt;/p&gt;
&lt;p&gt;envio.send(cadena)&lt;/p&gt;
&lt;p&gt;print "Enviando: {0}".format(cadena)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del worker es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/python_1"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="se importa zeromq y sleep de time"&gt;Se importa ZeroMQ y sleep de time&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;p&gt;from time import sleep&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_1"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se define el socket con argumento pull"&gt;Se define el Socket con argumento PULL&lt;/h1&gt;
&lt;p&gt;recepcion = context.socket(zmq.PULL)&lt;/p&gt;
&lt;h1 id="se conecta el socket a localhost puerto 5557"&gt;Se conecta el socket a localhost puerto 5557&lt;/h1&gt;
&lt;h1 id="es el puerto donde origen envia con push los datos"&gt;Es el puerto donde origen envia con PUSH los datos&lt;/h1&gt;
&lt;p&gt;recepcion.connect("tcp://localhost:5557")&lt;/p&gt;
&lt;h1 id="se crea el socket de envio de los datos procesados con argumento push"&gt;Se crea el socket de envio de los datos procesados con argumento PUSH&lt;/h1&gt;
&lt;p&gt;envio = context.socket(zmq.PUSH)&lt;/p&gt;
&lt;h1 id="se conecta el socket a localhost y puerto 5558"&gt;Se conecta el socket a localhost y puerto 5558&lt;/h1&gt;
&lt;p&gt;envio.connect("tcp://localhost:5558")&lt;/p&gt;
&lt;h1 id="se genera un ciclo"&gt;Se genera un ciclo&lt;/h1&gt;
&lt;h1 id="donde se recive lo transmitido por origen"&gt;donde se recive lo transmitido por origen&lt;/h1&gt;
&lt;h1 id="se procesa (se coloca en mayusculas)"&gt;se procesa (se coloca en mayusculas)&lt;/h1&gt;
&lt;h1 id="se muestra en pantalla y se envia."&gt;se muestra en pantalla y se envia.&lt;/h1&gt;
&lt;h1 id="los ciclos tienen un retardo de 1 seg"&gt;los ciclos tienen un retardo de 1 seg&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;cadena = recepcion.recv()&lt;/p&gt;
&lt;p&gt;print "Proceso:{0}".format(cadena)&lt;/p&gt;
&lt;p&gt;envio.send(cadena.upper())&lt;/p&gt;
&lt;p&gt;sleep(1)&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de resultado es el siguiente:&lt;/p&gt;
&lt;h1 id="!/usr/bin/python_2"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="se importa zeromq"&gt;Se importa ZeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_2"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket pull que recibe los mensajes de los workers"&gt;Se crea el socket PULL que recibe los mensajes de los workers&lt;/h1&gt;
&lt;p&gt;recepcion = context.socket(zmq.PULL)&lt;/p&gt;
&lt;h1 id="se asocia el socket a escuchar todas las ips en el puerto 5558"&gt;Se asocia el socket a escuchar todas las IPs en el puerto 5558&lt;/h1&gt;
&lt;h1 id="el puerto donde los workers envian los mensajes"&gt;el puerto donde los workers envian los mensajes&lt;/h1&gt;
&lt;p&gt;recepcion.bind("tcp://*:5558")&lt;/p&gt;
&lt;h1 id="se inicia un ciclo donde se recibe los mensajes"&gt;Se inicia un ciclo donde se recibe los mensajes&lt;/h1&gt;
&lt;h1 id="de los workers y se muestra en pantalla"&gt;de los workers y se muestra en pantalla&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;mensaje = recepcion.recv()&lt;/p&gt;
&lt;p&gt;print "Recibo: {0}".format(mensaje)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Se tiene que iniciar los scripts resultado, worker (worker1 y una copia identica llamada worker2) y origen.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado de origen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython6-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado del worker1 y worker2:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython6-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython6-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se nota que los workers se distribuyen el trabajo de forma equitativa.&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra lo que despliega en pantalla resultado:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython6-5.png"/&gt; &lt;/p&gt;
&lt;p&gt;Como se ve, los workers procesan las cadenas de texto que reciben de origen, las pasan a may&amp;uacute;sculas y se la env&amp;iacute;an a resultado para que las muestre en pantalla.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Ubuntu"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con Python (REP/REQ y PUB/SUB). Parte 5.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-repreq-y-pubsub-parte-5.html" rel="alternate"></link><published>2012-06-02T09:00:00-05:30</published><updated>2012-06-02T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-06-02:/tutorial-de-zeromq-con-python-repreq-y-pubsub-parte-5.html</id><summary type="html">&lt;p&gt;Continuando con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;art&amp;iacute;culos sobre ZeroMQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la revista &lt;a href="http://www.linux-magazine.com/"&gt;Linux Magazine versi&amp;oacute;n en espa&amp;ntilde;ol&lt;/a&gt; publicaron un art&amp;iacute;culo sobre &lt;code&gt;ZeroMQ&lt;/code&gt; con Python.&lt;/p&gt;
&lt;p&gt;Explican el uso de 2 patrones en conjunto, &lt;code&gt;REP/REQ&lt;/code&gt; y &lt;code&gt;PUB/SUB&lt;/code&gt;. Colocan como ejemplo una simulaci&amp;oacute;n del proceso de env&amp;iacute;o de tweets de twitter.&lt;/p&gt;
&lt;p&gt;La siguiente figura …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;art&amp;iacute;culos sobre ZeroMQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la revista &lt;a href="http://www.linux-magazine.com/"&gt;Linux Magazine versi&amp;oacute;n en espa&amp;ntilde;ol&lt;/a&gt; publicaron un art&amp;iacute;culo sobre &lt;code&gt;ZeroMQ&lt;/code&gt; con Python.&lt;/p&gt;
&lt;p&gt;Explican el uso de 2 patrones en conjunto, &lt;code&gt;REP/REQ&lt;/code&gt; y &lt;code&gt;PUB/SUB&lt;/code&gt;. Colocan como ejemplo una simulaci&amp;oacute;n del proceso de env&amp;iacute;o de tweets de twitter.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la simulaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython5-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;El emisor genera los mensajes, el twitter los recibe y los publica, luego cada receptor se suscribe al twitter y recibe la informaci&amp;oacute;n que le interesa.&lt;/p&gt;
&lt;p&gt;EL c&amp;oacute;digo del emisor es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/python"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="se importa zeromq"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea el contexto"&gt;Se crea el contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con el parametro req"&gt;Se crea el socket con el parametro REQ&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REQ)&lt;/p&gt;
&lt;h1 id="se asocia la ip y el puerto del socket."&gt;Se asocia la IP y el puerto del socket.&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:4000")&lt;/p&gt;
&lt;h1 id="se genera los mensajes estilo tuiter y se envia al socket."&gt;Se genera los mensajes estilo tuiter y se envia al socket.&lt;/h1&gt;
&lt;p&gt;for i in ['@_seraph1 Esta es una prueba','@otro viendo el juego', '@_seraph1 otra prueba','@otro otro']:&lt;/p&gt;
&lt;p&gt;socket.send(i)&lt;/p&gt;
&lt;p&gt;msg_in = socket.recv()
&lt;code&gt;El c&amp;oacute;digo del tuiter es el siguiente:&lt;/code&gt;python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_1"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se importa choice de random"&gt;Se importa choice de random&lt;/h1&gt;
&lt;p&gt;from random import choice&lt;/p&gt;
&lt;h1 id="se crea el contexto_1"&gt;Se crea el contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se define el socket de recepcion con argumento rep"&gt;Se define el socket de recepcion con argumento REP&lt;/h1&gt;
&lt;p&gt;socket_recv = context.socket(zmq.REP)&lt;/p&gt;
&lt;h1 id="se asocia a una ip y puerto el socket de recepcion"&gt;Se asocia a una IP y puerto el socket de recepcion&lt;/h1&gt;
&lt;p&gt;socket_recv.bind("tcp://127.0.0.1:4000")&lt;/p&gt;
&lt;h1 id="se define el socket de publicacion con argumento pub"&gt;Se define el socket de publicacion con argumento PUB&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.PUB)&lt;/p&gt;
&lt;h1 id="se asocia la ip y un puerto distinto al anterio socket"&gt;Se asocia la ip y un puerto distinto al anterio socket&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se crea un ciclo"&gt;Se crea un ciclo&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;#Se recibe el mensaje del socket de recepcion&lt;/p&gt;
&lt;p&gt;msg = socket_recv.recv()&lt;/p&gt;
&lt;p&gt;#Se envia el mensaje de recepcion&lt;/p&gt;
&lt;p&gt;socket_recv.send(msg)&lt;/p&gt;
&lt;p&gt;#Se muestra el mensaje en pantalla&lt;/p&gt;
&lt;p&gt;print "Reenvio: {0}".format(msg)&lt;/p&gt;
&lt;p&gt;#Se envia  el mensaje al socket de publicacion&lt;/p&gt;
&lt;p&gt;socket.send(msg)
```
Se muestra ahora el c&amp;oacute;digo de los receptores:  &lt;/p&gt;
&lt;p&gt;Receptor 1:  &lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/python_1"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_2"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea el contexto_2"&gt;Se crea el contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket de suscripcion"&gt;Se crea el socket de suscripcion&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.SUB)&lt;/p&gt;
&lt;h1 id="se asocia ese socket a la ip y puerto donde publica tuiter"&gt;Se asocia ese socket a la IP y puerto donde publica tuiter&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se suscribe a escuchar los mensajes de @_seraph1"&gt;Se suscribe a escuchar los mensajes de @_seraph1&lt;/h1&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, "@_seraph1")&lt;/p&gt;
&lt;h1 id="se crea un ciclo donde se recibe los mensajes"&gt;se crea un ciclo donde se recibe los mensajes&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;print "-&amp;gt;",socket.recv()
```  &lt;/p&gt;
&lt;p&gt;Receptor 2:&lt;br/&gt;
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/python_2"&gt;!/usr/bin/python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_3"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea el contexto_3"&gt;Se crea el contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket de suscripcion_1"&gt;Se crea el socket de suscripcion&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.SUB)&lt;/p&gt;
&lt;h1 id="se asocia ese socket a la ip y puerto donde publica tuiter_1"&gt;Se asocia ese socket a la IP y puerto donde publica tuiter&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se suscribe a escuchar los mensajes de @otro"&gt;Se suscribe a escuchar los mensajes de @otro&lt;/h1&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, "@otro")&lt;/p&gt;
&lt;h1 id="se crea un ciclo donde se recibe los mensajes_1"&gt;se crea un ciclo donde se recibe los mensajes&lt;/h1&gt;
&lt;p&gt;while True:&lt;/p&gt;
&lt;p&gt;print "-&amp;gt;",socket.recv()
```&lt;/p&gt;
&lt;p&gt;En la figura se muestra el resultado de twitter:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython5-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra el resultado del receptor 1:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython5-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Y por &amp;uacute;ltimo el receptor 2:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython5-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;En la versi&amp;oacute;n de la revista no publicaron el c&amp;oacute;digo de los receptores.
Esto muestra el nivel de complejidad en sistema de colas que se puede lograr con &lt;code&gt;ZeroMQ&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="Ubuntu"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con Python(PUB/SUB). Parte 4.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-pythonpubsub-parte-4.html" rel="alternate"></link><published>2012-06-01T09:00:00-05:30</published><updated>2012-06-01T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-06-01:/tutorial-de-zeromq-con-pythonpubsub-parte-4.html</id><summary type="html">&lt;p&gt;Continuando con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;tutoriales sobre ZeroMQ&lt;/a&gt; ahora se muestra como usar Publicar/Suscribir (Publish/subscribe).&lt;/p&gt;
&lt;p&gt;En el patr&amp;oacute;n pub/sub los componentes son pobremente acompladas, ser&amp;aacute; de gran ayuda para escalar ya que no hay necesidad de preocuparse por los suscriptores.  Sin embargo, este acoplamiento puede conducir a un comportamiento …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los &lt;a href="https://www.seraph.to/tag/zeromq.html"&gt;tutoriales sobre ZeroMQ&lt;/a&gt; ahora se muestra como usar Publicar/Suscribir (Publish/subscribe).&lt;/p&gt;
&lt;p&gt;En el patr&amp;oacute;n pub/sub los componentes son pobremente acompladas, ser&amp;aacute; de gran ayuda para escalar ya que no hay necesidad de preocuparse por los suscriptores.  Sin embargo, este acoplamiento puede conducir a un comportamiento inesperado cuando no se entienden completamente.&lt;/p&gt;
&lt;p&gt;El ejemplo que se va a desarrollar se basa en la publicaci&amp;oacute;n sobre la &lt;a href="http://nichol.as/zeromq-an-introduction"&gt;introducci&amp;oacute;n de ZeroMQ de Nicholas Pi&amp;euml;l&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El servidor genera una serie de mensaje de pa&amp;iacute;ses y de eventos por pa&amp;iacute;s, la idea es publicar de forma aleatoria un pa&amp;iacute;s y un evento. Se crear&amp;aacute; 2 clientes donde cada uno mostrar&amp;aacute; la informaci&amp;oacute;n de 2 pa&amp;iacute;ses, eso es gracias a PUB/SUB ya que el suscriptor s&amp;oacute;lo recibe la informaci&amp;oacute;n que necesita.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo del servidor:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq"&gt;Se importa ZeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se importa choice a partir de random"&gt;Se importa choice a partir de random&lt;/h1&gt;
&lt;p&gt;from random import choice&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket pasandole argumento de publicacion pub"&gt;Se crea el socket pasandole argumento de publicacion PUB&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.PUB)&lt;/p&gt;
&lt;h1 id="se asocia la ip y el puerto que va a escuchar."&gt;Se asocia la IP y el puerto que va a escuchar.&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se importa sleep"&gt;Se importa sleep&lt;/h1&gt;
&lt;p&gt;from time import sleep &lt;/p&gt;
&lt;h1 id="se crea una lista de paises y de eventos"&gt;Se crea una lista de paises y de eventos&lt;/h1&gt;
&lt;p&gt;paises = ['holanda','brasil','alemania','portugal','argentina','italia','rusia','venezuela']
eventos = ['tarjeta amarilla','tarjeta roja','gol','corner','falta']&lt;/p&gt;
&lt;h1 id="se crea un contador con valor inicial 1"&gt;Se crea un contador con valor inicial 1&lt;/h1&gt;
&lt;p&gt;c = 1&lt;/p&gt;
&lt;h1 id="se crea un ciclo indefinido"&gt;Se crea un ciclo indefinido&lt;/h1&gt;
&lt;p&gt;while True:
    #Se define un mensaje pasando de forma aleatoria un pais y un evento
    mensaje = choice( paises) + " " + choice(eventos)
    #Se muestra en pantalla el valor del contador y el mensaje.
    print "-&amp;gt;",c , mensaje
    #Se envia el mensaje
    socket.send(mensaje)
    #Se genera un retardo de 1 seg
    sleep(1)
    #Se incrementa el contador
    c += 1
    #Si se llega a 180 se termina el ciclo si no continua.
    if c == 180:
        break
    else:
        continue
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo de los 2 clientes(suscriptores):
Cliente1:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_1"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se importa sleep a partir de time"&gt;Se importa sleep a partir de time&lt;/h1&gt;
&lt;p&gt;from time import sleep &lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto de zeromq"&gt;Se crea la instancia del contexto de zeroMQ&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket del suscriptor sub"&gt;Se crea el socket del suscriptor SUB&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.SUB)&lt;/p&gt;
&lt;h1 id="se crea la conexion a la ip y puerto del servidor"&gt;Se crea la conexion a la IP y puerto del servidor&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se define una opcion del socket del suscriptor con argentina y venezuela"&gt;Se define una opcion del socket del suscriptor con argentina y venezuela&lt;/h1&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, "argentina")
socket.setsockopt(zmq.SUBSCRIBE, "venezuela")&lt;/p&gt;
&lt;h1 id="se define el valor inicial de un contador"&gt;Se define el valor inicial de un contador&lt;/h1&gt;
&lt;p&gt;c = 1 &lt;/p&gt;
&lt;h1 id="se crea un ciclo indefinido_1"&gt;Se crea un ciclo indefinido&lt;/h1&gt;
&lt;p&gt;while True:
    #Se muestra en pantalla el valor del contador y el mensaje recibido
    print  c, "-&amp;gt;",socket.recv()
    #Se genera un retardo de 1 seg en cada ciclo
    sleep(1)
    #Se incrementa el contador en 1
    c += 1
    #Si el contador llega a 90 se termina el ciclo, si no continua
    if c == 90:
        break
    else:
        continue
&lt;code&gt;Cliente 2:&lt;/code&gt;python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_2"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_2"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se importa sleep a partir de time_1"&gt;Se importa sleep a partir de time&lt;/h1&gt;
&lt;p&gt;from time import sleep &lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto de zeromq_1"&gt;Se crea la instancia del contexto de zeroMQ&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket del suscriptor sub_1"&gt;Se crea el socket del suscriptor SUB&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.SUB)&lt;/p&gt;
&lt;h1 id="se crea la conexion a la ip y puerto del servidor_1"&gt;Se crea la conexion a la IP y puerto del servidor&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se define una opcion del socket del suscriptor con brasil y alemania"&gt;Se define una opcion del socket del suscriptor con brasil y alemania&lt;/h1&gt;
&lt;p&gt;socket.setsockopt(zmq.SUBSCRIBE, "brasil")
socket.setsockopt(zmq.SUBSCRIBE, "alemania")&lt;/p&gt;
&lt;h1 id="se define el valor inicial de un contador_1"&gt;Se define el valor inicial de un contador&lt;/h1&gt;
&lt;p&gt;c = 1 &lt;/p&gt;
&lt;h1 id="se crea un ciclo indefinido_2"&gt;Se crea un ciclo indefinido&lt;/h1&gt;
&lt;p&gt;while True:
    #Se muestra en pantalla el valor del contador y el mensaje recibido
    print  c, "-&amp;gt;",socket.recv()
    #Se genera un retardo de 1 seg en cada ciclo
    sleep(1)
    #Se incrementa el contador en 1
    c += 1
    #Si el contador llega a 90 se termina el ciclo, si no continua
    if c == 90:
        break
    else:
        continue
```&lt;/p&gt;
&lt;p&gt;Es como si el servidor estuviera narrando varios juegos de futbol y los clientes s&amp;oacute;lo muestran la informaci&amp;oacute;n del partido de futbol que les interesa.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado del servidor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython4-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra las 2 f&amp;iacute;guras de los clientes:
Cliente 1 (Venezuela, Argentina):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython4-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Cliente 2(Brasil,Alemania):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython4-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ya se va mostrando cosas m&amp;aacute;s complicadas que se pueden hacer con &lt;code&gt;ZeroMQ&lt;/code&gt;, y todav&amp;iacute;a faltan...&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con Python. Parte 3.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-parte-3.html" rel="alternate"></link><published>2012-05-28T09:00:00-05:30</published><updated>2012-05-28T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-05-28:/tutorial-de-zeromq-con-python-parte-3.html</id><summary type="html">&lt;p&gt;Tomando como base el art&amp;iacute;culo de &lt;a href="https://www.seraph.to/tutorial-de-zeromq-con-python-parte-1.html#tutorial-de-zeromq-con-python-parte-1"&gt;ZeroMQ parte 1&lt;/a&gt;, se puede crear varios servidores (como cluster de aplicaci&amp;oacute;n). &lt;/p&gt;
&lt;p&gt;Est&amp;aacute; vez se crean 3 scripts servidores, pueden estar en el mismo equipo o en equipos diferentes. Lo &amp;uacute;nico que cambi&amp;eacute; en cada script es el puerto donde escucha para el servicio …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tomando como base el art&amp;iacute;culo de &lt;a href="https://www.seraph.to/tutorial-de-zeromq-con-python-parte-1.html#tutorial-de-zeromq-con-python-parte-1"&gt;ZeroMQ parte 1&lt;/a&gt;, se puede crear varios servidores (como cluster de aplicaci&amp;oacute;n). &lt;/p&gt;
&lt;p&gt;Est&amp;aacute; vez se crean 3 scripts servidores, pueden estar en el mismo equipo o en equipos diferentes. Lo &amp;uacute;nico que cambi&amp;eacute; en cada script es el puerto donde escucha para el servicio.&lt;/p&gt;
&lt;p&gt;En el cliente, se crean 3 sockets con los puertos donde escucha los 3 servidores.&lt;/p&gt;
&lt;p&gt;La idea es pasar un mensaje por parte del cliente, los servidores los recibe y los env&amp;iacute;a de vuelta al cliente.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del script del lado del cliente es la siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar zeromq"&gt;importar zeromq&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea una instancia del contexto"&gt;Se crea una instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con parametro peticion (req)"&gt;Se crea el socket con parametro peticion (REQ)&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REQ)&lt;/p&gt;
&lt;h1 id="se crean 3 sockets con la ip y los 3 puertos donde escucha"&gt;Se crean 3 sockets con la IP y los 3 puertos donde escucha&lt;/h1&gt;
&lt;h1 id="los 3 servidores."&gt;los 3 servidores.&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5000")
socket.connect("tcp://127.0.0.1:6000")
socket.connect("tcp://127.0.0.1:7000")&lt;/p&gt;
&lt;h1 id="se crea un ciclo de 100 repeticiones"&gt;Se crea un ciclo de 100 repeticiones&lt;/h1&gt;
&lt;p&gt;for i in range(100):
    #Se crea el string del mensaje
    mensaje = "mensaje %s" % i
    #Se envia el mensaje
    socket.send(mensaje)
    #Se muestra en pantalla el mensaje enviado
    print "Enviando", mensaje
    #Se recibe el mensaje de vuelta
    msg_in = socket.recv()
```  &lt;/p&gt;
&lt;p&gt;Los scripts de los servidores se muestra a continuaci&amp;oacute;n:
Servidor 1:  &lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket pasandole como parametro respuesta (rep)"&gt;Se crea el socket pasandole como parametro respuesta (REP)&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REP)&lt;/p&gt;
&lt;h1 id="se asocia el socket a la ip y el puerto"&gt;Se asocia el socket a la IP y el puerto&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se crea un ciclo"&gt;Se crea un ciclo&lt;/h1&gt;
&lt;p&gt;while True:
    #Se recibe el mensaje
    mensaje = socket.recv()
    #Se muestra en pantalla el mensaje recibido
    print "Recibiendo", mensaje
    #Se envia el mensaje de regreso al cliente
    socket.send(mensaje)&lt;br/&gt;
```  &lt;/p&gt;
&lt;p&gt;Servidor 2:&lt;br/&gt;
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_2"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_1"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_1"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket pasandole como parametro respuesta (rep)_1"&gt;Se crea el socket pasandole como parametro respuesta (REP)&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REP)&lt;/p&gt;
&lt;h1 id="se asocia el socket a la ip y el puerto_1"&gt;Se asocia el socket a la IP y el puerto&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:6000")&lt;/p&gt;
&lt;h1 id="se crea un ciclo_1"&gt;Se crea un ciclo&lt;/h1&gt;
&lt;p&gt;while True:
    #Se recibe el mensaje
    mensaje = socket.recv()
    #Se muestra en pantalla el mensaje recibido
    print "Recibiendo", mensaje
    #Se envia el mensaje de regreso al cliente
    socket.send(mensaje)&lt;br/&gt;
```  &lt;/p&gt;
&lt;p&gt;Servidor 3:&lt;br/&gt;
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_3"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq_2"&gt;Se importa zeroMQ&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_2"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket pasandole como parametro respuesta (rep)_2"&gt;Se crea el socket pasandole como parametro respuesta (REP)&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REP)&lt;/p&gt;
&lt;h1 id="se asocia el socket a la ip y el puerto_2"&gt;Se asocia el socket a la IP y el puerto&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:7000")&lt;/p&gt;
&lt;h1 id="se crea un ciclo_2"&gt;Se crea un ciclo&lt;/h1&gt;
&lt;p&gt;while True:
    #Se recibe el mensaje
    mensaje = socket.recv()
    #Se muestra en pantalla el mensaje recibido
    print "Recibiendo", mensaje
    #Se envia el mensaje de regreso al cliente
    socket.send(mensaje)
```  &lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se inician los 3 servidores y luego el cliente:
En la siguiente figura se muestra los env&amp;iacute;os realizados por el cliente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython3-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se muestra a continuaci&amp;oacute;n las figuras de los 3 servidores:&lt;/p&gt;
&lt;p&gt;Servidor 1:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython3-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;Servidor 2:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython3-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;servidor 3:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython3-4.png"/&gt; &lt;/p&gt;
&lt;p&gt;Al ver las 3 figuras de los servidores se nota como se distribuye de forma equitativa la recepci&amp;oacute;n de los mensajes.&lt;/p&gt;
&lt;p&gt;Luego se puede complicar algo m&amp;aacute;s este esquema agregando una cola entre los clientes y los servidores. &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="Ubuntu"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con Python. Parte 2.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-parte-2.html" rel="alternate"></link><published>2012-05-27T09:00:00-05:30</published><updated>2012-05-27T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-05-27:/tutorial-de-zeromq-con-python-parte-2.html</id><summary type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre &lt;a href="https://www.seraph.to/tutorial-de-zeromq-con-python-parte-1.html#tutorial-de-zeromq-con-python-parte-1"&gt;ZeroMQ&lt;/a&gt;, en esta ocasi&amp;oacute;n se muestra el uso del patr&amp;oacute;n de mensaje PAR (comunicaci&amp;oacute;n entre compa&amp;ntilde;eros exclusivamente).&lt;/p&gt;
&lt;p&gt;Los art&amp;iacute;culos se basan en el art&amp;iacute;culo de Nicholas Pi&amp;euml;l, &lt;a href="http://nichol.as/zeromq-an-introduction"&gt;una Introducci&amp;oacute;n a ZeroMQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Socket par son muy similares a los sockets regulares. La comunicaci&amp;oacute;n es bidireccional, no …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre &lt;a href="https://www.seraph.to/tutorial-de-zeromq-con-python-parte-1.html#tutorial-de-zeromq-con-python-parte-1"&gt;ZeroMQ&lt;/a&gt;, en esta ocasi&amp;oacute;n se muestra el uso del patr&amp;oacute;n de mensaje PAR (comunicaci&amp;oacute;n entre compa&amp;ntilde;eros exclusivamente).&lt;/p&gt;
&lt;p&gt;Los art&amp;iacute;culos se basan en el art&amp;iacute;culo de Nicholas Pi&amp;euml;l, &lt;a href="http://nichol.as/zeromq-an-introduction"&gt;una Introducci&amp;oacute;n a ZeroMQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Socket par son muy similares a los sockets regulares. La comunicaci&amp;oacute;n es bidireccional, no hay un espec&amp;iacute;fico estado almacenado dentro del socket y solamente se puede conectar con un compa&amp;ntilde;ero.&lt;/p&gt;
&lt;p&gt;La figura representa la estructura de sockets pares, el servidor escucha en un puerto seguro y un cliente se conecta a el. Las l&amp;iacute;neas rojas muestran el flujo de los mensajes, en este patr&amp;oacute;n ambos extremos usan el patr&amp;oacute;n par, y los mensajes fluyen de manera bidireccional.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython2-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;Se muestra a continuaci&amp;oacute;n el c&amp;oacute;digo del servidor:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar zmq"&gt;Importar zmq&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket del tipo par"&gt;Se crea el socket del tipo PAR&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.PAIR)&lt;/p&gt;
&lt;h1 id="se asocia a una ip y puerto donde escucha el servidor."&gt;Se asocia a una IP y puerto donde escucha el servidor.&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:5555")&lt;/p&gt;
&lt;h1 id="se crea un ciclo."&gt;Se crea un ciclo.&lt;/h1&gt;
&lt;p&gt;while True:
    #Se recibe un mensaje del cliente
    mensaje = socket.recv()
    #Se muestra en pantalla
    print "Recivo", mensaje
    #Se envia de vuelta el mensaje
    socket.send(mensaje)
&lt;code&gt;El c&amp;oacute;digo del cliente es el siguiente:&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zmq"&gt;Se importa zmq&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto_1"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket con argumento del tipo de mensaje par."&gt;Se crea el socket con argumento del tipo de mensaje Par.&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.PAIR)&lt;/p&gt;
&lt;h1 id="se conecta al servidor dado la ip y puerto."&gt;Se conecta al servidor dado la IP y puerto.&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5555")&lt;/p&gt;
&lt;h1 id="se crea un cilo de 100 repeticiones."&gt;Se crea un cilo de 100 repeticiones.&lt;/h1&gt;
&lt;p&gt;for i in range(100):
    #Se define el mensaje a pasar
    mensaje = "mensaje %s" % i
    #Se pasa el mensaje al servidor
    socket.send(mensaje)
    #Se presenta en pantalla el mensaje
    print "Enviando", mensaje
    #Se recibe el mensaje de vuelta
    msg_in = socket.recv()
    #Se presenta en pantalla el mensaje de vuelta
    print "Recibido:", msg_in
```  &lt;br/&gt;
El resultado del lado del servidor se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython2-2.png"/&gt; &lt;/p&gt;
&lt;p&gt;El resultado del lado del cliente se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython2-3.png"/&gt; &lt;/p&gt;
&lt;p&gt;Al intentar ejecutar 2 clientes al mismo tiempo el servidor termina con un mensaje de error por que s&amp;oacute;lo maneja una comunicaci&amp;oacute;n bidireccional con un s&amp;oacute;lo compa&amp;ntilde;ero.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Linux"></category><category term="Python"></category><category term="ZeroMQ"></category></entry><entry><title>Tutorial de ZeroMQ con python . Parte 1.</title><link href="https://ecrespo.github.io/tutorial-de-zeromq-con-python-parte-1.html" rel="alternate"></link><published>2012-05-26T09:00:00-05:30</published><updated>2012-05-26T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2012-05-26:/tutorial-de-zeromq-con-python-parte-1.html</id><summary type="html">&lt;p&gt;&lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; es una librer&amp;iacute;a de mensajes, permite crear complejos sistemas de comunicaci&amp;oacute;n con poco esfuerzo (sistemas de cola).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZeroMQ&lt;/code&gt; es m&amp;aacute;s r&amp;aacute;pido que otros sistemas de mensajes basados en el protocolo &lt;code&gt;AMQP&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; un uso sencillo de zeroMQ al estilo cliente y servidor. Se usar&amp;aacute; el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; es una librer&amp;iacute;a de mensajes, permite crear complejos sistemas de comunicaci&amp;oacute;n con poco esfuerzo (sistemas de cola).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZeroMQ&lt;/code&gt; es m&amp;aacute;s r&amp;aacute;pido que otros sistemas de mensajes basados en el protocolo &lt;code&gt;AMQP&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; un uso sencillo de zeroMQ al estilo cliente y servidor. Se usar&amp;aacute; el puerto 5000 para la comunicaci&amp;oacute;n entre el cliente y servidor. En el cliente se genera de forma aleatoria 2 n&amp;uacute;meros que se le pasan al servidor que sacar&amp;aacute; una cuenta y devuelve el resultado al cliente quien muestra el resultado en pantalla. La generaci&amp;oacute;n de n&amp;uacute;meros se realiza 1000 veces, luego le pasa al servidor la letra q la cual es la se&amp;ntilde;al para terminar el servidor.&lt;/p&gt;
&lt;p&gt;Para instalar &lt;code&gt;zeroMQ&lt;/code&gt; para python se tiene que instalar &lt;a href="http://zeromq.org/bindings:python"&gt;python-zmq&lt;/a&gt; y/o &lt;code&gt;python3-zmq&lt;/code&gt; para python3:&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="apt-get install python3-zmq python-zmq"&gt;apt-get install python3-zmq python-zmq&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Servidor: El c&amp;oacute;digo del servidor es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq"&gt;Se importa zeromq&lt;/h1&gt;
&lt;p&gt;import zmq&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto de zmq."&gt;Se crea la instancia del contexto de zmq.&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se define el socket con parametro respuesta rep."&gt;Se define el socket con par&amp;aacute;metro respuesta REP.&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REP)&lt;/p&gt;
&lt;h1 id="se asocia la direccion ip y el puerto donde el servidor escucha las peticiones."&gt;Se asocia la direcci&amp;oacute;n IP y el puerto donde el servidor escucha las peticiones.&lt;/h1&gt;
&lt;p&gt;socket.bind("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se define un contados"&gt;Se define un contados&lt;/h1&gt;
&lt;p&gt;c = 1&lt;/p&gt;
&lt;h1 id="se genera un ciclo que solo finaliza si se recibe la letra q."&gt;Se genera un ciclo que s&amp;oacute;lo finaliza si se recibe la letra q.&lt;/h1&gt;
&lt;p&gt;while True:
    #Se recibe los mensajes.
    msg = socket.recv()
    #Se consulta si la longitud del mensaje es 1 y es la letra q se termina el ciclo
    if len(msg) == 1 and msg == "q":
        break
    #Se separa los datos que viene en un string separados por :
    datos = msg.split(":")
    #se realiza una suma con los datos recibidos.
    resultado = int(datos[0]) + int(datos[1])
    #Se muestra en pantalla el resultado
    print "Iteracion: %s ,He recibido: %s, el resultado es: %s "  %(c,msg,resultado)
    #Se env&amp;iacute;a el resultado al cliente
    socket.send(str(resultado))
    #Se incrementa el contador.
    c += 1
```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del cliente es el siguiente:
```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="se importa zeromq y random"&gt;Se importa zeromq y random&lt;/h1&gt;
&lt;p&gt;import zmq
import random&lt;/p&gt;
&lt;h1 id="se crea la instancia del contexto"&gt;Se crea la instancia del contexto&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()&lt;/p&gt;
&lt;h1 id="se crea el socket y se para el argumento de peticion req"&gt;Se crea el socket y se para el argumento de petici&amp;oacute;n REQ&lt;/h1&gt;
&lt;p&gt;socket = context.socket(zmq.REQ)&lt;/p&gt;
&lt;h1 id="se coencta a la ip y puerto donde escucha el servidor"&gt;Se coencta a la IP y puerto donde escucha el servidor&lt;/h1&gt;
&lt;p&gt;socket.connect("tcp://127.0.0.1:5000")&lt;/p&gt;
&lt;h1 id="se genera un ciclo de 1000 repeticiones"&gt;Se genera un ciclo de 1000 repeticiones&lt;/h1&gt;
&lt;p&gt;for i in range(1000):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea el string con el mensaje, se pasa 2 aargumentos aleatorios
msg = "%s:%s" %(random.randint(1, 1000),random.randint(1, 1000))


#Se envia el mensaje al servidor
socket.send(msg)


#Se recibe el mensaje del servidor
msg_in = socket.recv()


#Se muestra en patalla los datos y el resultado
print "Iteracion: %s, Enviado: %s, Recibido: %s" %(i,msg,msg_in)


#Si se llea a la iteraci&amp;oacute;n 999 se env&amp;iacute;a la letra q para finalizar
if i ==  999: socket.send("q")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```
El resultado del lado del cliente y del servidor es el siguiente:&lt;/p&gt;
&lt;p&gt;La figura muestra la ejecuci&amp;oacute;n del script servidor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython1-1.png"/&gt; &lt;/p&gt;
&lt;p&gt;La figura muestra la ejecuci&amp;oacute;n del script cliente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/tutorialdezeromqconpython1-2.png"/&gt; &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;/h2&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde la billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Canaima"></category><category term="Debian"></category><category term="General"></category><category term="Python"></category><category term="ZeroMQ"></category></entry><entry><title>Programa para el envío de SMS desde Linux con Celular Android (conexión wifi y USB)</title><link href="https://ecrespo.github.io/programa-para-el-envio-de-sms-desde-linux-con-celular-android-conexion-wifi-y-usb.html" rel="alternate"></link><published>2011-06-16T09:00:00-05:30</published><updated>2011-06-16T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-06-16:/programa-para-el-envio-de-sms-desde-linux-con-celular-android-conexion-wifi-y-usb.html</id><summary type="html">&lt;p&gt;En el art&amp;iacute;culo de ejecuci&amp;oacute;n remota de script versi&amp;oacute;n conectado por &lt;a href="https://www.seraph.to/ejecucion-remota-de-scripts-python-desde-linux-a-un-celular-con-android-version-conectado-el-celular-por-usb.html"&gt;USB&lt;/a&gt; y la versi&amp;oacute;n por &lt;a href="https://www.seraph.to/ejecucion-remota-de-scripts-python-desde-linux-a-un-celular-con-android.html"&gt;wifi&lt;/a&gt;, se  explica  en el primer caso como enviar mensajes de texto y en el segundo como ejecutar una aplicaci&amp;oacute;n remotamente en el celular.&lt;/p&gt;
&lt;p&gt;En este caso se fusionar&amp;aacute; ambos tipos de conexiones para …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el art&amp;iacute;culo de ejecuci&amp;oacute;n remota de script versi&amp;oacute;n conectado por &lt;a href="https://www.seraph.to/ejecucion-remota-de-scripts-python-desde-linux-a-un-celular-con-android-version-conectado-el-celular-por-usb.html"&gt;USB&lt;/a&gt; y la versi&amp;oacute;n por &lt;a href="https://www.seraph.to/ejecucion-remota-de-scripts-python-desde-linux-a-un-celular-con-android.html"&gt;wifi&lt;/a&gt;, se  explica  en el primer caso como enviar mensajes de texto y en el segundo como ejecutar una aplicaci&amp;oacute;n remotamente en el celular.&lt;/p&gt;
&lt;p&gt;En este caso se fusionar&amp;aacute; ambos tipos de conexiones para enviar mensajes de texto tanto por USB como por wifi.&lt;/p&gt;
&lt;p&gt;Para ello se creo un clase AndroidSMS donde se define los datos siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tipo de conexi&amp;oacute;n (wifi o usb)&lt;/li&gt;
&lt;li&gt;Puerto (Puerto del servidor de SL4A que se activa en el celular)&lt;/li&gt;
&lt;li&gt;Host (IP que tiene asignado el celular en la red wifi)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En los art&amp;iacute;culos mencionados anteriormente se explica como usar el comando adb del sdk de Android y la creaci&amp;oacute;n de variables de entorno para poder ejecutar remotamente scripts desde Linux al celular con Android. En este caso todo ese proceso se automatiza  en el script, pero es necesario para el caso USB ejecutar SL4A con la opci&amp;oacute;n de privado y en el caso wifi con la opci&amp;oacute;n de p&amp;uacute;blico. Adem&amp;aacute;s se tiene que verificar el n&amp;uacute;mero del puerto asignado en el servidor SL4A para pasarle como par&amp;aacute;metro dichos datos al programa desde la l&amp;iacute;nea de comandos.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo del programa:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="script que permite enviar mensaje de texto a un celular android desde linux."&gt;Script que permite enviar mensaje de texto a un celular android desde Linux.&lt;/h1&gt;
&lt;h1 id="autor: ernesto crespo"&gt;Autor: Ernesto Crespo&lt;/h1&gt;
&lt;h1 id="correo:ecrespo@gmail.com"&gt;Correo:ecrespo@gmail.com&lt;/h1&gt;
&lt;h1 id="licencia: gplv3"&gt;Licencia: GPLv3&lt;/h1&gt;
&lt;h1 id="version:0.4"&gt;Version:0.4&lt;/h1&gt;
&lt;h1 id="importando el modulo android,sys,re y getstatusoutput"&gt;Importando el modulo android,sys,re y getstatusoutput&lt;/h1&gt;
&lt;p&gt;import android,sys,re
from commands import getstatusoutput&lt;/p&gt;
&lt;p&gt;class AndroidSMS:
    def &lt;strong&gt;init&lt;/strong&gt;(self,conexion,puerto,host="192.168.0.100"):
        #Asignacion de la estructura de datos del Objeto
        self.__adb = "/home/ernesto/android-sdk-linux_x86/platform-tools/adb"
        self.__puerto = puerto
        self.__host = host
        self.__conexion = conexion&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __ValidarNumero__(self,numero):
    """Valida si los numeros tienen 11 digitos y que sean
    de los proveedores movilnet, digitel y movistar
    """
    if len(numero) == 11 and ((re.search("041[2|4|6]\d\d\d\d\d\d\d",numero)) or (re.search("042[4|6]\d\d\d\d\d\d\d",numero))) :
        return 1
    else:
        return 0

def __ConfigAndroid__(self):
    """__ConfigAndroid: Metodo que permite habilitar el funcionamiento
    del celular Android desde Linux tanto para wifi como para conexion USB
    """
    #Se apaga el servidor adb en el Linux
    getstatusoutput("%s kill-server" %self.__adb)
    #Se borra las variables de entorno AP_PORT y AP_HOST
    getstatusoutput("export AP_PORT=\"\"")
    getstatusoutput("export AP_HOST=\"\"")
    #Se inicia el servidor adb y se verifica que funciona correctamente
    r = getstatusoutput("%s devices" %self.__adb)
    if r[0] &amp;lt;&amp;gt; 0:
        print "Problemas con la configuracion del celular"
        sys.exit
    else:
        if self.__conexion == "usb":
            #Se verifica que el dispositivo aparece identificado
            if r[1].split("\n")[1] == "":
                print "NO hay un celular conectado"
                sys.exit
    #En este punto se tiene el dispositivo funcionando
    #Tanto por wifi como por usb.
    getstatusoutput("%s  forward tcp:9999 tcp:%s" %(self.__adb,self.__puerto))
    if self.__conexion == "wifi":
        #Se crean las variables de entorno AP_PORT y AP_HOST
        #para el caso de wifi
        getstatusoutput("export AP_PORT=%s" %self.__puerto)
        getstatusoutput("export AP_HOST=%s" %self.__host)
    elif self.__conexion == "usb":
        #Se crea la variable de entorno AP_PORT
        #para el caso conexion usb
        getstatusoutput("export AP_PORT=9999")
    print "Se configuro el celular sin problemas"


def EnviarMensaje(self,numero,mensaje):
    """EnviarMensaje: Metodo que permite enviar un mensaje de texto
    pasando el numero y el mensaje
    Maneja ambos casos conexion USB o por red wifi.
    """
    if self.__ValidarNumero__(numero) == 0:
        print "Numero invalido"
        sys.exit
    #Creando la instancia droid del objeto Android
    self.__ConfigAndroid__()
    #Se crea la instancia del objeto Android dependiendo si es conexion
    #wifi se le pasa el host y el puerto
    #Si es conexion USB simplemente se crea la instancia
    if self.__conexion == "wifi":
        droid = android.Android((self.__host,self.__puerto))
    elif self.__conexion == "usb":
        droid = android.Android()
    #Enviando el mensaje de texto
    droid.smsSend(numero,mensaje)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    """Se capturan los valores de:
    &lt;em&gt;numero
    &lt;/em&gt;mensaje
    &lt;em&gt;conexion
    &lt;/em&gt;puerto
    *host
    """
    if len(sys.argv) == 6:
        numero = sys.argv[1]
        mensaje = sys.argv[2]
        conexion = sys.argv[3]
        puerto = sys.argv[4]
        host = sys.argv[5]
    elif len(sys.argv) == 5:
        numero = sys.argv[1]
        mensaje = sys.argv[2]
        conexion = sys.argv[3]
        puerto = sys.argv[4]
        host = ""
    else:
        print "Error: No se pasaron los parametros completos"
        sys.exit
    #Se crea la instancia de la clase AndroidSM pasando conexion,puerto y host
    androidsms = AndroidSMS(conexion,puerto,host)
    #Se envie el mensaje de texto
    androidsms.EnviarMensaje(numero,mensaje)
```&lt;/p&gt;
&lt;p&gt;La ejecuci&amp;oacute;n del programa se muestra a continuaci&amp;oacute;n:
Se pasa primero el n&amp;uacute;mero de celular, luego el mensaje, luego el tipo de conexi&amp;oacute;n (usb,wifi), luego el puerto y por &amp;uacute;ltimo la IP si es el caso de wifi.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wifi: python mensaje4.py 0xxyyyzzww "Prueba3" wifi  47529 "192.168.0.100"&lt;/li&gt;
&lt;li&gt;usb: python mensaje4.py 0xxyyyzzww "Prueba4" usb  43421&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la siguiente figura se muestra los mensajes recibidos en el celular:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SMS" src="./images/smsandroidlinux.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Android"></category><category term="Debian"></category></entry><entry><title>Generando una gráfica con PyQT y matplotlib (escala semilogaritmica). Parte 13</title><link href="https://ecrespo.github.io/generando-una-grafica-con-pyqt-y-matplotlib-escala-semilogaritmica-parte-13.html" rel="alternate"></link><published>2011-06-10T09:00:00-05:30</published><updated>2011-06-10T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-06-10:/generando-una-grafica-con-pyqt-y-matplotlib-escala-semilogaritmica-parte-13.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como crear gr&amp;aacute;ficas con escala semilogaritmitca.&lt;/p&gt;
&lt;p&gt;La idea es graficar la funci&amp;oacute;n:
y = sin(pi&lt;em&gt;(x&lt;/em&gt;*(1/2)))&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica muestra la figura de la funci&amp;oacute;n con escala semilogaritmica.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica semilogaritmica 1" src="./images/matplotlib13-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para generar la gr&amp;aacute;fica mostrada simplemente usando numpy y matplotlib es la siguiente:&lt;/p&gt;
&lt;p&gt;```python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como crear gr&amp;aacute;ficas con escala semilogaritmitca.&lt;/p&gt;
&lt;p&gt;La idea es graficar la funci&amp;oacute;n:
y = sin(pi&lt;em&gt;(x&lt;/em&gt;*(1/2)))&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica muestra la figura de la funci&amp;oacute;n con escala semilogaritmica.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica semilogaritmica 1" src="./images/matplotlib13-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para generar la gr&amp;aacute;fica mostrada simplemente usando numpy y matplotlib es la siguiente:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar matplotlib"&gt;Importar matplotlib&lt;/h1&gt;
&lt;p&gt;import matplotlib as mpl&lt;/p&gt;
&lt;h1 id="definir el tamano de la fuente"&gt;Definir el tama&amp;ntilde;o de la fuente&lt;/h1&gt;
&lt;p&gt;mpl.rcParams['font.size'] = 10.&lt;/p&gt;
&lt;h1 id="importar pyplot"&gt;Importar pyplot&lt;/h1&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="importar numpy"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se crea el rango de valores de"&gt;Se crea el rango de valores de&lt;/h1&gt;
&lt;h1 id="0 a 20 con saltos de 0.01"&gt;0 a 20 con saltos de 0.01&lt;/h1&gt;
&lt;p&gt;x = np.arange(0., 20, 0.01)&lt;/p&gt;
&lt;h1 id="se instancia la figura"&gt;Se instancia la figura&lt;/h1&gt;
&lt;p&gt;fig = plt.figure()&lt;/p&gt;
&lt;h1 id="se define la grafica"&gt;Se define  la grafica&lt;/h1&gt;
&lt;p&gt;ax2 = fig.add_subplot(311)&lt;/p&gt;
&lt;h1 id="se genera el calculo de la funcion"&gt;Se genera el calculo de la funcion&lt;/h1&gt;
&lt;h1 id="con numpy"&gt;con numpy&lt;/h1&gt;
&lt;p&gt;y2 = np.sin(np.pi&lt;em&gt;(x&lt;/em&gt;*(1.0/2.0)))&lt;/p&gt;
&lt;h1 id="se define el eje x con escala"&gt;Se define el eje X con escala&lt;/h1&gt;
&lt;h1 id="logaritmica"&gt;logaritmica&lt;/h1&gt;
&lt;p&gt;ax2.semilogx(x, y2);&lt;/p&gt;
&lt;h1 id="se define el limite del eje x"&gt;Se define el limite del eje X&lt;/h1&gt;
&lt;p&gt;ax2.set_xlim([0, 20]);&lt;/p&gt;
&lt;h1 id="se define la grilla a la grafica"&gt;Se define la grilla a la grafica&lt;/h1&gt;
&lt;p&gt;ax2.grid(True)&lt;/p&gt;
&lt;h1 id="se define una etiqueta en el eje y"&gt;se define una etiqueta en el eje Y&lt;/h1&gt;
&lt;p&gt;ax2.set_ylabel('log X')&lt;/p&gt;
&lt;h1 id="se muestra la grafica"&gt;Se muestra la grafica&lt;/h1&gt;
&lt;p&gt;plt.show()
```&lt;/p&gt;
&lt;p&gt;En la siguiente figura se genera la gr&amp;aacute;fica utilizando PyQT, matplotlib y numpy:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica semilogaritmica 1" src="./images/matplotlib13-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;A la gr&amp;aacute;fica se le agrego la barra de navegaci&amp;oacute;n y se le coloco un t&amp;iacute;tulo a la ventana.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para crear la gr&amp;aacute;fica utilizando PyQT es el siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar numpy_1"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="importar el objeto figure de matplotlib"&gt;Importar el objeto Figure de matplotlib&lt;/h1&gt;
&lt;p&gt;from matplotlib.figure import Figure&lt;/p&gt;
&lt;h1 id="importar el objeto figurecanvas de qt4qgg,"&gt;Importar el Objeto FigureCanvas de Qt4Qgg,&lt;/h1&gt;
&lt;h1 id="se heredara desde qwidget."&gt;Se heredara desde QWidget.&lt;/h1&gt;
&lt;p&gt;from matplotlib.backends.backend_qt4agg \
  import FigureCanvasQTAgg as FigureCanvas&lt;/p&gt;
&lt;h1 id="importar el widget de la barra de navegacion"&gt;Importar el widget de la barra de navegacion&lt;/h1&gt;
&lt;h1 id="import the navigationtoolbar qt4agg widget"&gt;import the NavigationToolbar Qt4Agg widget&lt;/h1&gt;
&lt;p&gt;from matplotlib.backends.backend_qt4agg \
  import NavigationToolbar2QTAgg as NavigationToolbar&lt;/p&gt;
&lt;h1 id="importar qtgui de pyqt4."&gt;Importar QTGui de PyQt4.&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui&lt;/p&gt;
&lt;h1 id="se crea la clase qt4mplcanvas heredando figurecanvas"&gt;Se crea la Clase Qt4MplCanvas heredando FigureCanvas&lt;/h1&gt;
&lt;p&gt;class Lienzo(FigureCanvas):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self, parent):
    # Se instancia el objeto figure
    self.fig = Figure()
    #Se define la grafica en coordenadas polares
    self.axes = self.fig.add_subplot(111)

    #Se define el rango de 0 a 20 con saltos de 0.01

    x = np.arange(0., 20, 0.01)
    #Se calcula los valores de la funcion.
    y2 = np.sin(np.pi*(x**(1.0/2.0)))
    #Se define el eje X como logaritmico
    #y se pasan los valores de x y y2.
    self.axes.semilogx(x, y2);
    #Se define el limite del eje X
    self.axes.set_xlim([0, 20]);
    #Se define una grilla
    self.axes.grid(True)
    #Se crea una etiqueta en el eje Y
    self.axes.set_ylabel('log X')

    # se inicializa FigureCanvas
    FigureCanvas.__init__(self, self.fig)
    # se define el widget padre
    self.setParent(parent)
    # se define el widget como expandible
    FigureCanvas.setSizePolicy(self,
            QtGui.QSizePolicy.Expanding,
            QtGui.QSizePolicy.Expanding)
    # se notifica al sistema de la actualizacion
    #de la politica
    FigureCanvas.updateGeometry(self)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se crea la clase ventana que hereda qmainwindow"&gt;Se crea la clase Ventana que hereda QMainWindow&lt;/h1&gt;
&lt;p&gt;class Ventana(QtGui.QMainWindow):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self):

    #Inicializacion del widget QMainWindow
    QtGui.QMainWindow.__init__(self)
    # se define el titulo de la ventana
    self.setWindowTitle("Ventana PyQT con graficas a escala logaritmica")
    # instantiate a widget, it will be the main one
    # Se instancia el widget.
    self.main_widget = QtGui.QWidget(self)

    #Se crea una layout vbox
    vbl = QtGui.QVBoxLayout(self.main_widget)

    #Se instancia el Lienzo con la grafica de Matplotlib
    qmc = Lienzo(self.main_widget)
    # se instancia la barra de navegacion
    ntb = NavigationToolbar(qmc, self.main_widget)
    # se empaqueta el lienzo y 
    #la barra de navegacion en el vbox
    vbl.addWidget(qmc)
    vbl.addWidget(ntb)
    # se le asigna foco a la ventana
    self.main_widget.setFocus()
    #Se define el widget central
    self.setCentralWidget(self.main_widget)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    #Importar sys
    import sys
    #Importar QtGui de PyQt4
    from PyQt4 import QtGui
    #Se crea la aplicacion grafica
    qApp = QtGui.QApplication(sys.argv)
    # se instancia la ventana
    aw = Ventana()
    # se muestra el widget
    aw.show()
    #Se inicia el lazo principal de QT
    sys.exit(qApp.exec_())
```&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="pyqt"></category><category term="matplotlib"></category><category term="numpy"></category></entry><entry><title>Generando una gráfica con PyQT y matplotlib (coordenadas polares). Parte 12</title><link href="https://ecrespo.github.io/generando-una-grafica-con-pyqt-y-matplotlib-coordenadas-polares-parte-12.html" rel="alternate"></link><published>2011-06-08T09:00:00-05:30</published><updated>2011-06-08T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-06-08:/generando-una-grafica-con-pyqt-y-matplotlib-coordenadas-polares-parte-12.html</id><summary type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre matplotlib y ahora usando PyQT, se explicar&amp;aacute; como crear gr&amp;aacute;ficas con coordenadas polares.&lt;/p&gt;
&lt;p&gt;La ecuaci&amp;oacute;n que se va a graficar es la siguiente:&lt;/p&gt;
&lt;p&gt;r = 2&lt;em&gt; coseno(pi&lt;/em&gt;t) siendo 0 &amp;lt;2&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica coordenadas polares - matplotlib" src="./images/matplotlib12-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para generar dicha gr&amp;aacute;fica …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos sobre matplotlib y ahora usando PyQT, se explicar&amp;aacute; como crear gr&amp;aacute;ficas con coordenadas polares.&lt;/p&gt;
&lt;p&gt;La ecuaci&amp;oacute;n que se va a graficar es la siguiente:&lt;/p&gt;
&lt;p&gt;r = 2&lt;em&gt; coseno(pi&lt;/em&gt;t) siendo 0 &amp;lt;2&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica coordenadas polares - matplotlib" src="./images/matplotlib12-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para generar dicha gr&amp;aacute;fica es la siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar pyplot"&gt;Importar pyplot&lt;/h1&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="importar numpy"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se crea el rango de valores angulares"&gt;Se crea el rango de valores angulares&lt;/h1&gt;
&lt;p&gt;theta = np.arange(0., 2., 0.005)*np.pi&lt;/p&gt;
&lt;h1 id="se calcula el coseno del rango de valores angulares"&gt;Se calcula el coseno del rango de valores angulares&lt;/h1&gt;
&lt;p&gt;r = 2*np.abs(np.cos(theta))&lt;/p&gt;
&lt;h1 id="se crea la grafica en coordenadas polares pasando"&gt;Se crea la grafica en coordenadas polares pasando&lt;/h1&gt;
&lt;h1 id="el angulo theta y los valores de r"&gt;el angulo theta y los valores de r&lt;/h1&gt;
&lt;p&gt;plt.polar(theta, r)&lt;/p&gt;
&lt;h1 id="se crea una grilla de los angulos 45,90 y 369"&gt;Se crea una grilla de los angulos 45,90 y 369&lt;/h1&gt;
&lt;p&gt;plt.thetagrids(range(45, 360, 90))
plt.rgrids(np.arange(0.2, 3.1, .7), angle=0);&lt;/p&gt;
&lt;h1 id="se genera la grafica"&gt;Se genera la grafica&lt;/h1&gt;
&lt;p&gt;plt.show()
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se va a crear la gr&amp;aacute;fica de la misma ecuaci&amp;oacute;n utilizando pyQT.&lt;/p&gt;
&lt;p&gt;La gr&amp;aacute;fica se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica coordenadas polares - matplotlib 2 " src="./images/matplotlib12-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La figura muestra la ventana ahora con un t&amp;iacute;tulo, la barra inferior de herramienta de navegaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo para generar la gr&amp;aacute;fica:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python_1"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="importar numpy_1"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="importar el objeto figure de matplotlib"&gt;Importar el objeto Figure de matplotlib&lt;/h1&gt;
&lt;p&gt;from matplotlib.figure import Figure&lt;/p&gt;
&lt;h1 id="importar el objeto figurecanvas de qt4qgg,"&gt;Importar el Objeto FigureCanvas de Qt4Qgg,&lt;/h1&gt;
&lt;h1 id="se heredara desde qwidget."&gt;Se heredara desde QWidget.&lt;/h1&gt;
&lt;p&gt;from matplotlib.backends.backend_qt4agg \
  import FigureCanvasQTAgg as FigureCanvas&lt;/p&gt;
&lt;h1 id="importar el widget de la barra de navegacion"&gt;Importar el widget de la barra de navegacion&lt;/h1&gt;
&lt;h1 id="import the navigationtoolbar qt4agg widget"&gt;import the NavigationToolbar Qt4Agg widget&lt;/h1&gt;
&lt;p&gt;from matplotlib.backends.backend_qt4agg \
  import NavigationToolbar2QTAgg as NavigationToolbar&lt;/p&gt;
&lt;h1 id="importar qtgui de pyqt4."&gt;Importar QTGui de PyQt4.&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui&lt;/p&gt;
&lt;h1 id="se crea la clase qt4mplcanvas heredando figurecanvas"&gt;Se crea la Clase Qt4MplCanvas heredando FigureCanvas&lt;/h1&gt;
&lt;p&gt;class Lienzo(FigureCanvas):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self, parent):
    # Se instancia el objeto figure
    self.fig = Figure()
    #Se define la grafica en coordenadas polares
    self.axes = self.fig.add_subplot(111,polar=True)
    #Se crea el rango de valores angulares
    theta = np.arange(0., 2., 0.005)*np.pi
    #Se calcula el coseno del rango de valores angulares
    r = 2*np.abs(np.cos(theta))
    #Se genera la grafica pasando theta y r.
    self.axes.plot(theta, r)
    # se inicializa FigureCanvas
    FigureCanvas.__init__(self, self.fig)
    # se define el widget padre
    self.setParent(parent)
    # se define el widget como expandible
    FigureCanvas.setSizePolicy(self,
                               QtGui.QSizePolicy.Expanding,
                               QtGui.QSizePolicy.Expanding)
    # se notifica al sistema de la actualizacion de la politica
    FigureCanvas.updateGeometry(self)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se crea la clase ventana que hereda qmainwindow"&gt;Se crea la clase Ventana que hereda QMainWindow&lt;/h1&gt;
&lt;p&gt;class Ventana(QtGui.QMainWindow):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self):

    #Inicializacion del widget QMainWindow
    QtGui.QMainWindow.__init__(self)
    # se define el titulo de la ventana
    self.setWindowTitle("Ventana PyQT con una grafica de matplotlib")
    # instantiate a widget, it will be the main one
    # Se instancia el widget.
    self.main_widget = QtGui.QWidget(self)

    #Se crea una layout vbox
    vbl = QtGui.QVBoxLayout(self.main_widget)

    #Se instancia el Lienzo con la grafica de Matplotlib
    qmc = Lienzo(self.main_widget)
    # se instancia la barra de navegacion
    ntb = NavigationToolbar(qmc, self.main_widget)
    # se empaqueta el lienzo y la barra de navegacion en el vbox
    vbl.addWidget(qmc)
    vbl.addWidget(ntb)
    # se le asigna foco a la ventana
    self.main_widget.setFocus()
    #Se define el widget central
    self.setCentralWidget(self.main_widget)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    #Importar sys
    import sys
    #Importar QtGui de PyQt4
    from PyQt4 import QtGui
    #Se crea la aplicacion grafica
    qApp = QtGui.QApplication(sys.argv)
    # se instancia la ventana
    aw = Ventana()
    # se muestra el widget
    aw.show()
    #Se inicia el lazo principal de QT
    sys.exit(qApp.exec_())
```&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="pyqt"></category><category term="matplotlib"></category><category term="numpy"></category></entry><entry><title>Generando una gráfica en python con matplotlib con PyQT. Parte 11</title><link href="https://ecrespo.github.io/generando-una-grafica-en-python-con-matplotlib-con-pyqt-parte-11.html" rel="alternate"></link><published>2011-06-06T09:00:00-05:30</published><updated>2011-06-06T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-06-06:/generando-una-grafica-en-python-con-matplotlib-con-pyqt-parte-11.html</id><summary type="html">&lt;p&gt;A partir de este art&amp;iacute;culo las gr&amp;aacute;ficas con matplotlib se explicar&amp;aacute;n con la librer&amp;iacute;a gr&amp;aacute;fica PyQT. Para ello en otros art&amp;iacute;culos se reiniciar&amp;aacute; la serie sobre pyQT.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se tomar&amp;aacute; las funciones creadas en el &lt;a href="https://www.seraph.to/generando-una-grafica-en-python-con-matplotlib-parte-10.html#generando-una-grafica-en-python-con-matplotlib-parte-10"&gt;art&amp;iacute;culo anterior&lt;/a&gt; para calcular la trayectoria del lanzamiento de proyectil y se crear&amp;aacute; …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A partir de este art&amp;iacute;culo las gr&amp;aacute;ficas con matplotlib se explicar&amp;aacute;n con la librer&amp;iacute;a gr&amp;aacute;fica PyQT. Para ello en otros art&amp;iacute;culos se reiniciar&amp;aacute; la serie sobre pyQT.&lt;/p&gt;
&lt;p&gt;En este art&amp;iacute;culo se tomar&amp;aacute; las funciones creadas en el &lt;a href="https://www.seraph.to/generando-una-grafica-en-python-con-matplotlib-parte-10.html#generando-una-grafica-en-python-con-matplotlib-parte-10"&gt;art&amp;iacute;culo anterior&lt;/a&gt; para calcular la trayectoria del lanzamiento de proyectil y se crear&amp;aacute; un objeto basandose en las librer&amp;iacute;as PyQT.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="para los argumentos desde la linea de comandos"&gt;Para los argumentos desde la linea de comandos&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="importar gui de pyqt"&gt;Importar GUI de PyQT&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui&lt;/p&gt;
&lt;h1 id="importar numpy para la creacion de la imagen"&gt;Importar numpy para la creacion de la imagen&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se importa el objeto figure de matplotlib"&gt;Se importa el objeto Figure de Matplotlib&lt;/h1&gt;
&lt;p&gt;from matplotlib.figure import Figure&lt;/p&gt;
&lt;h1 id="se importa qt4agg como canvas."&gt;Se importa QT4Agg como Canvas.&lt;/h1&gt;
&lt;p&gt;from matplotlib.backends.backend_qt4agg \
  import FigureCanvasQTAgg as FigureCanvas&lt;/p&gt;
&lt;h1 id="se define la funcion x(t) de la ecuacion de posicion (movimiento horizontal)"&gt;Se define la funcion x(t) de la ecuacion de posicion (movimiento horizontal)&lt;/h1&gt;
&lt;p&gt;def fx (t):
    #Se define la posicion inicial en 0
    x0 = 0
    #Se define la velocidad inicial en 2 mts/seg
    v0x = 2
    #Se define la aceleracion en 1 mts/seg^2
    ax = 1
    #Se hace el calculo de la posicion con respecto al tiempo
    x = x0 + v0x&lt;em&gt;t + 0.5&lt;/em&gt;ax&lt;em&gt;t&lt;/em&gt;*2
    return x&lt;/p&gt;
&lt;h1 id="se define la funcion y(t) de la ecuacion de posicion altura"&gt;Se define la funcion y(t) de la ecuacion de posicion altura&lt;/h1&gt;
&lt;p&gt;def fy(t):
    #Se define la altura inicial en 100 mts
    y0 = 100
    #Se define la velocidad inicial en 10 mts/seg
    v0y = 10
    #Se define la gravedad en 9.81 mts/seg^2
    g = 9.81
    #Se realiza el calculo de l posicion en funcion del tiempo
    y = y0 + v0y&lt;em&gt;t - 0.5&lt;/em&gt;g&lt;em&gt;t&lt;/em&gt;*2
    return y&lt;/p&gt;
&lt;p&gt;class Lienzo(FigureCanvas):
    """Clase que represente a FigureCanvas"""
    def &lt;strong&gt;init&lt;/strong&gt;(self):
        # Codigo para generar la grafica
        self.figura = Figure()
        self.ejes = self.figura.add_subplot(111)
        self.tiempo = np.arange(0.0, 5.65, 0.01)
        #Calculo de la posicion en el eje X y Y
        self.x = fx(self.tiempo)
        self.y = fy(self.tiempo)
        #Se crea la grafica
        self.ejes.plot(self.x, self.y)
        # inicializar el lienzo donde se crea la grafica.
        FigureCanvas.&lt;strong&gt;init&lt;/strong&gt;(self, self.figura)&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    # Se crea el GUI de la aplicacion
    qApp = QtGui.QApplication(sys.argv)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Se crea el widget para matplotlib    
mpl = Lienzo()
# Se muestra el widget.
mpl.show()
#Se inicia el lazo de ejecucion de QT.
sys.exit(qApp.exec_())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la gr&amp;aacute;fica de la trayectoria del lanzamiento de proyectil.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica lanzamiento de proyectil - matplotlib " src="./images/matplotlib11-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="pyqt"></category><category term="matplotlib"></category></entry><entry><title>Generando una gráfica en python con matplotlib. Parte 10</title><link href="https://ecrespo.github.io/generando-una-grafica-en-python-con-matplotlib-parte-10.html" rel="alternate"></link><published>2011-06-05T09:00:00-05:30</published><updated>2011-06-05T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-06-05:/generando-una-grafica-en-python-con-matplotlib-parte-10.html</id><summary type="html">&lt;p&gt;Revisando algunos scripts que tengo en mi equipo me encontre con uno que hace  el c&amp;aacute;lculo de la f&amp;iacute;sica de un lanzamiento vertical.&lt;/p&gt;
&lt;p&gt;La precisi&amp;oacute;n del c&amp;aacute;lculo se logra con un arreglo donde se define los datos de la variable tiempo.&lt;/p&gt;
&lt;p&gt;Esto se logra gracias al modulo numpy que permite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Revisando algunos scripts que tengo en mi equipo me encontre con uno que hace  el c&amp;aacute;lculo de la f&amp;iacute;sica de un lanzamiento vertical.&lt;/p&gt;
&lt;p&gt;La precisi&amp;oacute;n del c&amp;aacute;lculo se logra con un arreglo donde se define los datos de la variable tiempo.&lt;/p&gt;
&lt;p&gt;Esto se logra gracias al modulo numpy que permite crear un arreglo de valores decimales con valores espec&amp;iacute;ficos entre cada elemento del arreglo.&lt;/p&gt;
&lt;p&gt;Si se necesita un arreglo con valores desde 0 a 5,6 con elementos entre 0,1 se ejecuta la siguiente instrucci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python2.6"&gt;!/usr/bin/env python2.6&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import numpy as np
arreglo = np.arange(0, 5.60,0.1)
print arreglo 
[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.   1.1  1.2  1.3  1.4
  1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9
  3.   3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9  4.   4.1  4.2  4.3  4.4
  4.5  4.6  4.7  4.8  4.9  5.   5.1  5.2  5.3  5.4  5.5]
```&lt;/p&gt;
&lt;p&gt;Se tiene 2 funciones una fx(t) y otra fy(t) ambas realizan los c&amp;aacute;lculos de la posici&amp;oacute;n de un cuerpo para lanzamiento vertical, se calcula se tiene el tiempo que se tarda en caer el cuerpo hasta el piso desde una altura de 100 mts con una velocidad inicial en X y Y y la aceleraci&amp;oacute;n en el eje X y la gravedad.&lt;/p&gt;
&lt;p&gt;Simplemente se usa matplotlib para generar el gr&amp;aacute;fico, en un pr&amp;oacute;ximo art&amp;iacute;culo se mostrar&amp;aacute; como usar glade+python+gtk con matplotlib para tener las dos gr&amp;aacute;ficas que se muestran en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gr&amp;aacute;fica ca&amp;iacute;da libre - matplotlib " src="./images/matplotlib10-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La primera gr&amp;aacute;fica muestra la trayectoria del cuerpo con respecto a su altura versus el tiempo que tarda en caer.
La segunda gr&amp;aacute;fica muestra la trayectoria con respecto a la altura y la distancia horizontal, ser&amp;iacute;a una descripci&amp;oacute;n de la trayectoria del lanzamiento del cuerpo.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo donde se realiza el c&amp;aacute;lculo y las gr&amp;aacute;ficas se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python &lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --_1"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="se importa el modulo numpy para generar un arreglo con los datos de la variable tiempo"&gt;Se importa el modulo numpy para generar un arreglo con los datos de la variable tiempo&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="se importa matplotlib para generar la grafica."&gt;Se importa matplotlib para generar la grafica.&lt;/h1&gt;
&lt;p&gt;import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1 id="se define la funcion x(t) de la ecuacion de posicion (movimiento horizontal)"&gt;Se define la funcion x(t) de la ecuacion de posicion (movimiento horizontal)&lt;/h1&gt;
&lt;p&gt;def fx (t):
    #Se define la posicion inicial en 0
    x0 = 0
    #Se define la velocidad inicial en 2 mts/seg
    v0x = 2
    #Se define la aceleracion en 1 mts/seg^2
    ax = 1
    #Se hace el calculo de la posicion con respecto al tiempo
    x = x0 + v0x&lt;em&gt;t + 0.5&lt;/em&gt;ax&lt;em&gt;t&lt;/em&gt;*2
    return x&lt;/p&gt;
&lt;h1 id="se define la funcion y(t) de la ecuacion de posicion altura"&gt;Se define la funcion y(t) de la ecuacion de posicion altura&lt;/h1&gt;
&lt;p&gt;def fy(t):
    #Se define la altura inicial en 100 mts
    y0 = 100
    #Se define la velocidad inicial en 10 mts/seg
    v0y = 10
    #Se define la gravedad en 9.81 mts/seg^2
    g = 9.81
    #Se realiza el calculo de l posicion en funcion del tiempo
    y = y0 + v0y&lt;em&gt;t - 0.5&lt;/em&gt;g&lt;em&gt;t&lt;/em&gt;*2
    return y&lt;/p&gt;
&lt;h1 id="programa principal"&gt;Programa principal&lt;/h1&gt;
&lt;p&gt;def main():
    #Se define un range desde 0 a 5.65 con intervalos de 0.01.
    tiempo = np.arange(0, 5.65,0.01)
    #Se define la figura
    plt.figure(1)
    #Se define la grafica.
    plt.subplot(211)
    #Se despligega la grafica de la distancia en X en funcion del tiempo
    plt.plot(tiempo, fy(tiempo),"k")
    #Se Coloca un titulo a la grafica y la informacion del eje y (tiempo) 
    plt.title("Graficas posicion")
    plt.xlabel("tiempo (seg)")
    plt.ylabel("Altura en mts")
    #Se muestra la grafica de posicion en X respecto a la altura.
    plt.subplot(212)
    #Se grafica la funcion fx vs fy
    plt.plot(fx(tiempo),fy(tiempo),'k')
    #Se muestra la info del eje X y Y
    plt.xlabel("Distancia horizontal (mts)")
    plt.ylabel("Altura  (mts)")
    #Se muestra las graficas.
    plt.show()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Como mencione antes, en un siguiente art&amp;iacute;culo se mostrar&amp;aacute; este mismo ejemplo pero usando glade.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="matplotlib"></category></entry><entry><title>Aplicación que muestra las coordenadas del Celular en google maps en el escritorio</title><link href="https://ecrespo.github.io/aplicacion-que-muestra-las-coordenadas-del-celular-en-google-maps-en-el-escritorio.html" rel="alternate"></link><published>2011-01-06T09:00:00-05:30</published><updated>2011-01-06T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-01-06:/aplicacion-que-muestra-las-coordenadas-del-celular-en-google-maps-en-el-escritorio.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se usar&amp;aacute; de base 2 art&amp;iacute;culos anteriores, el primero sobre un navegador web b&amp;aacute;sico con python+gtk+webkit y el segundo el de captura de la localizci&amp;oacute;n del celular con Android.&lt;/p&gt;
&lt;p&gt;La idea es capturar la informaci&amp;oacute;n del GPS del celular y mostrarlo en una aplicaci&amp;oacute;n gtk …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se usar&amp;aacute; de base 2 art&amp;iacute;culos anteriores, el primero sobre un navegador web b&amp;aacute;sico con python+gtk+webkit y el segundo el de captura de la localizci&amp;oacute;n del celular con Android.&lt;/p&gt;
&lt;p&gt;La idea es capturar la informaci&amp;oacute;n del GPS del celular y mostrarlo en una aplicaci&amp;oacute;n gtk gracias a webkit mostrando la ubicaci&amp;oacute;n geogr&amp;aacute;fica gracias a google maps.&lt;/p&gt;
&lt;p&gt;La interfaz en glade se muestra a continuaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Glade webkit - Navegador" src="./images/tutorialpythongtkglade12-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;En realidad es la misma aplicaci&amp;oacute;n del navegador lo &amp;uacute;nico es que se le quito la entrada de texto y el bot&amp;oacute;n de "ir".&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo de la aplicaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python2.6"&gt;!/usr/bin/env python2.6&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;"""
Nombre:Geolocalizacion
Descripci&amp;oacute;n: Programa que captura la localizaci&amp;oacute;n del GPS del Celular y lo
    muestra en google maps en el escritorio Linux.
Versi&amp;oacute;n:0.1
Licencia:GPLv3
Autor: Ernesto Crespo
correo: ecrespo@gmail.com
"""&lt;/p&gt;
&lt;h1 id="import gtk and webkit"&gt;Import gtk and webkit&lt;/h1&gt;
&lt;p&gt;import gtk
import webkit&lt;/p&gt;
&lt;h1 id="importando el modulo android"&gt;Importando el m&amp;oacute;dulo android&lt;/h1&gt;
&lt;p&gt;import android
from time import sleep&lt;/p&gt;
&lt;h1 id="class app"&gt;class App&lt;/h1&gt;
&lt;p&gt;class App:
    def &lt;strong&gt;init&lt;/strong&gt;(self):
        #Constructor
        #Se asocia el archivo glade al Builder
        self.glade_file = "geolocalizcion.glade"
        self.glade = gtk.Builder()
        self.glade.add_from_file(self.glade_file)
        #Se asocia la ventana geo
        self.window = self.glade.get_object('geo')
        #Se asocia el bot&amp;oacute;n salir
        self.exit = self.glade.get_object('salir')
        #Se asocia la ventana deslizante
        self.scrolledwindow1 = self.glade.get_object('scrolledwindow1')
        #
        #Se conecta el evento destruir
        self.window.connect("destroy",self.on_geo_destroy)
        #Se asocia el evento del bot&amp;oacute;n salir
        self.exit.connect('clicked', self.on_salir_clicked)
        #Se abre la p&amp;aacute;gina de google maps
        #Se instancia la clase webview
        self.webview = webkit.WebView()
        #Se agrega a la ventana deslizante
        self.scrolledwindow1.add(self.webview)
        #Se captura la localizaci&amp;oacute;n
        tupla = localizacion()
        #Se abre el url de google maps pasandole la longitud y latitud
        self.__go("http://maps.google.com/maps?q=%s,%s" %tupla)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se muestra la ventana principal de la aplicaci&amp;oacute;n
    self.window.show_all()


def __go(self,url):
    #Se abre el url
    self.webview.open(url)


def on_geo_destroy(self,*args):
    #Se cierra la apliaci&amp;oacute;n
    gtk.main_quit()

def on_salir_clicked(self,*args):
 #Se cierra la aplicaci&amp;oacute;n
    gtk.main_quit()


def main(self):
    #Se inicia la aplicaci&amp;oacute;n
    gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def localizacion():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se crea la instancia de la clase Android
    droid = android.Android()
    #Se inicia la localizacion
    droid.startLocating()
    #Se espera 15 segundos
    sleep(15)
    #Se presenta en la consola la informaci&amp;oacute;n de la localizaci&amp;oacute;n
    #Se maneja la informaci&amp;oacute;n de un diccionario.
    latitud = droid.readLocation().result["network"]["latitude"]
    longitud = droid.readLocation().result["network"]["longitude"]
    #Se detiene la localizaci&amp;oacute;n
    droid.stopLocating()
    #Se retorna la latitud y longitud capturada por medio del GPS del celular.
    return (latitud,longitud)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    app = App()
    app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La figura de la aplicaci&amp;oacute;n funcionando mostrando el mapa y la posici&amp;oacute;n que devuelve el GPS del celular.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navegador " src="./images/tutorialpythongtkglade12-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category><category term="webkit"></category><category term="Google maps"></category><category term="Android"></category></entry><entry><title>Crear un Navegador web básico con python+gtk+webkit</title><link href="https://ecrespo.github.io/crear-un-navegador-web-basico-con-pythongtkwebkit.html" rel="alternate"></link><published>2011-01-04T09:00:00-05:30</published><updated>2011-01-04T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2011-01-04:/crear-un-navegador-web-basico-con-pythongtkwebkit.html</id><summary type="html">&lt;p&gt;Volviendo a la programaci&amp;oacute;n con python, glade y gtk; ahora explicare como hacer un navegador sencillo usando webkit en python.&lt;/p&gt;
&lt;p&gt;Este post se basa en el art&amp;iacute;culo del &lt;a href="http://blog.marcelofernandez.info/2009/11/navegador-simple-con-pywebkitgtk/"&gt;Blog de Marcelo&lt;/a&gt;, la diferencia es que el programo sin glade la interfaz gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra la interfaz …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Volviendo a la programaci&amp;oacute;n con python, glade y gtk; ahora explicare como hacer un navegador sencillo usando webkit en python.&lt;/p&gt;
&lt;p&gt;Este post se basa en el art&amp;iacute;culo del &lt;a href="http://blog.marcelofernandez.info/2009/11/navegador-simple-con-pywebkitgtk/"&gt;Blog de Marcelo&lt;/a&gt;, la diferencia es que el programo sin glade la interfaz gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra la interfaz gr&amp;aacute;fica de la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Glade webkit - Navegador" src="./images/tutorialpythongtkglade11-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;La aplicaci&amp;oacute;n simplemente tiene una entrada de texto para el URL donde se le puede dar enter para cargar la p&amp;aacute;gina o al bot&amp;oacute;n de "ir"; la p&amp;aacute;gina se cargar&amp;aacute; en el frame con barras deslizantes en el centro de la interfaz y se tiene un bot&amp;oacute;n para salir del navegador. Por defecto se carga una p&amp;aacute;gina al iniciar la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar los modulos gtl y webkit"&gt;Importar los m&amp;oacute;dulos gtl y webkit&lt;/h1&gt;
&lt;p&gt;import gtk
import webkit&lt;/p&gt;
&lt;h1 id="la clase app hereda threading.thread"&gt;La clase App hereda threading.Thread&lt;/h1&gt;
&lt;p&gt;class App:
    def &lt;strong&gt;init&lt;/strong&gt;(self):
     #M&amp;eacute;todo constructor, asociando los widgets
        #Asociar el archivo glade al objeto Builder.
        self.glade_file = "navegador.glade"
        self.glade = gtk.Builder()
        self.glade.add_from_file(self.glade_file)
        #Asociando la ventana del navegador
        self.ventana = self.glade.get_object('navegador')
        #Asociando el boton salir
        self.bsalir = self.glade.get_object('bsalir')
        #Asociando el boton navegar
        self.navegar = self.glade.get_object('navegar')
        #Asociando la entrada de texto del url a navegar
        self.enlace = self.glade.get_object('url')
        #Asociando la ventana con las barras deslizantes
        self.scrolledwindow1 = self.glade.get_object('scrolledwindow1')
        #Conectores
        #Conectar de destruir la ventana principal
        self.ventana.connect("destroy",self.on_navegador_destroy)
        #Conectar del boton salir
        self.bsalir.connect('clicked', self.on_bsalir_clicked)
        #Conector del boton navegar
        self.navegar.connect('clicked',self.on_navegar_clicked)
        #Conector de dar enter a la entrada de texto
        self.enlace.connect('activate',self.on_url_activate)
        #Asociando p&amp;aacute;gina por defecto.
        #Instanciando la clase webview
        self.webview = webkit.WebView()
        #Agregando webview a la ventana con barras deslizantes
        self.scrolledwindow1.add(self.webview)
        #Abriendo una p&amp;aacute;gina por defecto
        self.__navegacion("http://www.debian.org")&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #Se muestra la ventana principal del programa
    self.ventana.show_all()

#Si se da enter a la entrada de texto se captura el url y se navega
def on_url_activate(self,*args):
    url = "http://" + self.enlace.get_text()
    self.__navegacion(url)


#Se abre el url con webview
def __navegacion(self,url):
    self.webview.open(url)


def on_navegador_destroy(self,*args):
    #Se cierra la aplicaci&amp;oacute;n
    gtk.main_quit()

def on_bsalir_clicked(self,*args):
 #Se cierra la aplicaci&amp;oacute;n al darle clip al boton salir.
    gtk.main_quit()

def on_navegar_clicked(self,*args):
    #Se navega el url al darle clip al boton
    url = "http://" + self.enlace.get_text()
    self.__navegacion(url)

def main(self):
 #Inicia la aplicaci&amp;oacute;n
    gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    app = App()
    app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra el navegador en funcionamiento.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navegador " src="./images/tutorialpythongtkglade11-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category><category term="webkit"></category></entry><entry><title>Actualización del programa Desarrollo de interfaz gráfica para la configuración de accesos rápidos del teclado</title><link href="https://ecrespo.github.io/actualizacion-del-programa-desarrollo-de-interfaz-grafica-para-la-configuracion-de-accesos-rapidos-del-teclado.html" rel="alternate"></link><published>2010-08-08T09:00:00-05:30</published><updated>2010-08-08T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-08-08:/actualizacion-del-programa-desarrollo-de-interfaz-grafica-para-la-configuracion-de-accesos-rapidos-del-teclado.html</id><summary type="html">&lt;p&gt;En el art&amp;iacute;culo anterior se explico la mejora del script que permite cambiar las configuraciones de las teclas r&amp;aacute;pidas en gnome, ahora se explicar&amp;aacute; la mejora del programa mencionado en este &lt;a href="https://www.seraph.to/desarrollo-de-interfaz-grafica-para-la-configuracion-de-accesos-rapidos-de-teclado-para-gconf.html"&gt;art&amp;iacute;culo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La captura de pantalla de la imagen muestra con respecto al art&amp;iacute;culo anterior un combobox que est&amp;aacute; deshabilitado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el art&amp;iacute;culo anterior se explico la mejora del script que permite cambiar las configuraciones de las teclas r&amp;aacute;pidas en gnome, ahora se explicar&amp;aacute; la mejora del programa mencionado en este &lt;a href="https://www.seraph.to/desarrollo-de-interfaz-grafica-para-la-configuracion-de-accesos-rapidos-de-teclado-para-gconf.html"&gt;art&amp;iacute;culo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La captura de pantalla de la imagen muestra con respecto al art&amp;iacute;culo anterior un combobox que est&amp;aacute; deshabilitado en este momento, dicho combobox permitir&amp;aacute; elegir entre 3 distribuciones Debian, Ubuntu o Canaima.&lt;/p&gt;
&lt;p&gt;La imagen se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GUI" src="./images/gui-gconf-gnome-2010.png"/&gt;&lt;/p&gt;
&lt;p&gt;La idea es la posibilidad de configurar los accesos r&amp;aacute;pidos de todas las aplicaciones mostradas o s&amp;oacute;lo las que se quiera.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
def on_button2_clicked(self,*args):
                #Se crea el objeto config de la clase Conf
                Config = configGconf.Conf()
                #Se crea un ciclo con la lista de las aplicaciones.
                for aplicacion in self.__aplicaciones:
                        #Se modifica las aplicaciones una por una pasando la aplicaci&amp;oacute;n.
                        Config.modificar_opcion(aplicacion,1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo completo del programa lo puedes bajar &lt;a href="http://python-config-accesskey-gnome.googlecode.com/hg/pyconfig-accessgnome-ui.py"&gt;pyconfig-accessgnome-ui.py&lt;/a&gt; la interfaz gr&amp;aacute;fica elaborada en glade se puede bajar  de &lt;a href="http://code.google.com/p/python-config-accesskey-gnome/source/browse/pyconfig-accessgnome.glade"&gt;pyconfig-accessgnome.glade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En el siguiente art&amp;iacute;culo se explicar&amp;aacute; como crear el paquete python.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="accesibilidad"></category><category term="gconf"></category><category term="glade"></category><category term="gnome"></category><category term="gtk"></category><category term="python"></category><category term="tiflotecnologia"></category></entry><entry><title>Enviar mensajes de texto desde Android con python</title><link href="https://ecrespo.github.io/enviar-mensajes-de-texto-desde-android-con-python.html" rel="alternate"></link><published>2010-06-27T15:00:00-05:30</published><updated>2010-06-27T15:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-06-27:/enviar-mensajes-de-texto-desde-android-con-python.html</id><summary type="html">&lt;p&gt;Continuando con la referencia del API de ASE para Android se explicar&amp;aacute; como enviar un mensaje de texto desde python para un celular con Android.&lt;/p&gt;
&lt;p&gt;EL API para enviar mensajes de texto es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;smsSend(String destinationAddress: typically a phone number,String text) Sends an SMS.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con la referencia del API de ASE para Android se explicar&amp;aacute; como enviar un mensaje de texto desde python para un celular con Android.&lt;/p&gt;
&lt;p&gt;EL API para enviar mensajes de texto es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;smsSend(String destinationAddress: typically a phone number,String text) Sends an SMS.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo de env&amp;iacute;o de SMS:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="importando el modulo android y el modulo time"&gt;Importando el m&amp;oacute;dulo android y el m&amp;oacute;dulo time&lt;/h1&gt;
&lt;p&gt;import android, time&lt;/p&gt;
&lt;h1 id="creando la instancia droid del objeto android"&gt;Creando la instancia droid del objeto Android&lt;/h1&gt;
&lt;p&gt;droid = android.Android()&lt;/p&gt;
&lt;h1 id="asignando el numero de telefono y mensaje"&gt;Asignando el n&amp;uacute;mero de tel&amp;eacute;fono y mensaje&lt;/h1&gt;
&lt;p&gt;telefono ="0xxxyyyyyyy"
mensaje = "Esta es una prueba de envio de sms a la hora %s" %time.ctime()&lt;/p&gt;
&lt;h1 id="enviar mensaje a la pantalla de android con la info del numero y mensaje"&gt;Enviar mensaje a la pantalla de android con la info del n&amp;uacute;mero y mensaje&lt;/h1&gt;
&lt;p&gt;droid.makeToast("enviando mensaje a %s, con el siguiente contenido: %s" %(telefono,mensaje))&lt;/p&gt;
&lt;h1 id="enviando el mensaje de texto"&gt;Enviando el mensaje de texto&lt;/h1&gt;
&lt;p&gt;droid.smsSend(telefono,mensaje)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El mensaje llego al celular del n&amp;uacute;mero asignado sin problemas.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Android"></category><category term="Linux"></category><category term="Python"></category><category term="SMS"></category></entry><entry><title>Enviar correo desde Android con python</title><link href="https://ecrespo.github.io/enviar-correo-desde-android-con-python.html" rel="alternate"></link><published>2010-06-27T14:00:00-05:30</published><updated>2010-06-27T14:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-06-27:/enviar-correo-desde-android-con-python.html</id><summary type="html">&lt;p&gt;Siguiendo con la API de ASE se tiene una funci&amp;oacute;n que permite enviar un correo pasando el correo, el asunto y el cuerpo del correo.&lt;/p&gt;
&lt;p&gt;La funci&amp;oacute;n del API de ASE que permite enviar correos se llama:
sendEmail(correo,asunto,cuerpo_correo)&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se coloca el c&amp;oacute;digo del programa en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siguiendo con la API de ASE se tiene una funci&amp;oacute;n que permite enviar un correo pasando el correo, el asunto y el cuerpo del correo.&lt;/p&gt;
&lt;p&gt;La funci&amp;oacute;n del API de ASE que permite enviar correos se llama:
sendEmail(correo,asunto,cuerpo_correo)&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se coloca el c&amp;oacute;digo del programa en python para enviar el correo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="se importa el modulo android"&gt;Se importa el m&amp;oacute;dulo android&lt;/h1&gt;
&lt;p&gt;import android&lt;/p&gt;
&lt;h1 id="se crea la instancia de la clase android"&gt;Se crea la instancia de la clase Android&lt;/h1&gt;
&lt;p&gt;droid = android.Android()&lt;/p&gt;
&lt;h1 id="se define la direccion de correo, el asunto del correo y el contenido del mismo"&gt;Se define la direcci&amp;oacute;n de correo, el asunto del correo y el contenido del mismo&lt;/h1&gt;
&lt;p&gt;asunto = "Prueba de envio de correo desde Android con un script de python"
para = "ecrespo@gmail.com"
cuerpo_correo = "Esta es una prueba de envio de correo\n El tiempo en el reloj es: %s\n ------\n Ernesto Crespo\n" %time.ctime()&lt;/p&gt;
&lt;h1 id="se llama a la funcion sendemail con los datos necesarios."&gt;Se llama a la funci&amp;oacute;n sendEmail con los datos necesarios.&lt;/h1&gt;
&lt;h1 id="esto llama a la aplicacion de envio de correo de forma grafica con la"&gt;Esto llama a la aplicaci&amp;oacute;n de env&amp;iacute;o de correo de forma gr&amp;aacute;fica con la&lt;/h1&gt;
&lt;h1 id="informacion que se pasa en la funcion."&gt;informaci&amp;oacute;n que se pasa en la funci&amp;oacute;n.&lt;/h1&gt;
&lt;p&gt;droid.sendEmail(para,asunto,cuerpo_correo)&lt;/p&gt;
&lt;h1 id="se finaliza la instancia de la clase."&gt;Se finaliza la instancia de la clase.&lt;/h1&gt;
&lt;p&gt;droid.exit()
```&lt;/p&gt;
&lt;p&gt;El resultado se puede ver en las siguientes im&amp;aacute;genes:
La primera imagen es del buz&amp;oacute;n de salida.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Email Android Python - Enviados" src="./images/enviados1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Y la siguiente imagen es del buz&amp;oacute;n de recibidos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Email Android Python - Recibidos " src="./images/recibidos1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Notar&amp;aacute; que en el correo se tiene la hora de ejecuci&amp;oacute;n del script pero el script se recibi&amp;oacute; a otra hora, el problema fue que el celular no ten&amp;iacute;a conexi&amp;oacute;n 3G y se tuvo que conectar a una red wifi para poder enviar los correos.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Android"></category><category term="Linux"></category><category term="Python"></category></entry><entry><title>Escaneado de redes inalámbricas con python desde Android</title><link href="https://ecrespo.github.io/escaneado-de-redes-inalambricas-con-python-desde-android.html" rel="alternate"></link><published>2010-06-27T13:00:00-05:30</published><updated>2010-06-27T13:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-06-27:/escaneado-de-redes-inalambricas-con-python-desde-android.html</id><summary type="html">&lt;p&gt;Revisando el API de ASE encuentro que hay una forma de escanear redes inal&amp;aacute;mbricas con python en Android.
La idea es escanear las redes inal&amp;aacute;mbricas existentes y luego guardar la informaci&amp;oacute;n en un archivo y presentarla en pantalla del celular.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se presenta el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="importar los modulos android y time"&gt;Importar los m&amp;oacute;dulos …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;Revisando el API de ASE encuentro que hay una forma de escanear redes inal&amp;aacute;mbricas con python en Android.
La idea es escanear las redes inal&amp;aacute;mbricas existentes y luego guardar la informaci&amp;oacute;n en un archivo y presentarla en pantalla del celular.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se presenta el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="importar los modulos android y time"&gt;Importar los m&amp;oacute;dulos android y time&lt;/h1&gt;
&lt;p&gt;import  android,time&lt;/p&gt;
&lt;h1 id="creando el objeto droid de la clase android"&gt;Creando el objeto droid de la clase Android&lt;/h1&gt;
&lt;p&gt;droid =  android.Android()&lt;/p&gt;
&lt;h1 id="escanear las redes inalambricas existentes y guardar en la variable redeswifi"&gt;Escanear las redes inal&amp;aacute;mbricas existentes y  guardar en la variable redeswifi&lt;/h1&gt;
&lt;p&gt;redeswifi = droid.wifiGetScanResults()&lt;/p&gt;
&lt;h1 id="se crea un archivo de texto donde se almacenara la informacion de las redes"&gt;Se crea un  archivo de texto donde se almacenar&amp;aacute; la informaci&amp;oacute;n de las redes&lt;/h1&gt;
&lt;p&gt;archivo =  open('/sdcard/redes.txt','w')&lt;/p&gt;
&lt;h1 id="se crea una lista vacia"&gt;Se crea una lista vac&amp;iacute;a&lt;/h1&gt;
&lt;p&gt;lista = []&lt;/p&gt;
&lt;h1 id="la informacion de las redes inalambricas se encuentra en el indice 1"&gt;La informaci&amp;oacute;n  de las redes inal&amp;aacute;mbricas se encuentra en el indice 1&lt;/h1&gt;
&lt;h1 id="de una lista, este indice contiene otra lista y dentro hay un diccionario"&gt;de una lista,  este indice contiene otra lista y dentro hay un diccionario&lt;/h1&gt;
&lt;p&gt;for i in  range(len(redeswifi[1])):
    #Se espera 1 segundo por cada iteraci&amp;oacute;n
    time.sleep(1)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se toma los  valores del diccionario(ssid,frequency,capabilities,level)
essid =  redeswifi[1][i]['ssid']
frecuencia = redeswifi[1][i]['frequency']
capacidad =  redeswifi[1][i]['capabilities']
level = redeswifi[1][i]['level']

#Se prepara  la informaci&amp;oacute;n para ser presentada en pantalla y en archivo
infored =  "Red inalambrica : %s, frecuencia: %s, se&amp;ntilde;al: %s, cifrado:%s" \
                                                             %(essid,frecuencia,level,capacidad)

#Se presenta  la informaci&amp;oacute;n en la pantalla del celular y se guarda tambi&amp;eacute;n
#en una lista
 droid.makeToast(infored)
lista.append("%s\n" %infored)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="se escribe en el archivo y se cierra el mismo"&gt;Se escribe en el  archivo y se cierra el mismo&lt;/h1&gt;
&lt;p&gt;archivo.writelines(lista)
archivo.close()
```&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el contenido del archivo generado en el script:&lt;/p&gt;
&lt;p&gt;```
Red inalambrica : prueba, frecuencia: 2442, se&amp;ntilde;al: -91, cifrado:
Red inalambrica : pasillo, frecuencia: 2422, se&amp;ntilde;al: -93, cifrado:[WPA2-PSK-TKIP+CCMP]&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Android"></category><category term="Linux"></category><category term="Python"></category></entry><entry><title>Lector de código de barras hecho en python para Android</title><link href="https://ecrespo.github.io/lector-de-codigo-de-barras-hecho-en-python-para-android.html" rel="alternate"></link><published>2010-06-13T13:00:00-05:30</published><updated>2010-06-13T13:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-06-13:/lector-de-codigo-de-barras-hecho-en-python-para-android.html</id><summary type="html">&lt;p&gt;Este post se basa en el art&amp;iacute;culo en ingl&amp;eacute;s de Matt Cutts donde crea el lector de c&amp;oacute;digo de barras en 6 l&amp;iacute;neas de c&amp;oacute;digo, el enlace del blog lo tienen &lt;a href="http://www.mattcutts.com/blog/android-barcode-scanner/"&gt;ac&amp;aacute;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n tienen el c&amp;oacute;digo necesario para buscar en internet un c&amp;oacute;digo de barras capturado por medio de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este post se basa en el art&amp;iacute;culo en ingl&amp;eacute;s de Matt Cutts donde crea el lector de c&amp;oacute;digo de barras en 6 l&amp;iacute;neas de c&amp;oacute;digo, el enlace del blog lo tienen &lt;a href="http://www.mattcutts.com/blog/android-barcode-scanner/"&gt;ac&amp;aacute;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n tienen el c&amp;oacute;digo necesario para buscar en internet un c&amp;oacute;digo de barras capturado por medio de la camara del celular:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="importar modulo android"&gt;Importar modulo android&lt;/h1&gt;
&lt;p&gt;import android&lt;/p&gt;
&lt;h1 id="instanciar el objeto android"&gt;Instanciar el objeto Android&lt;/h1&gt;
&lt;p&gt;droid = android.Android()&lt;/p&gt;
&lt;h1 id="llama al lector de codigo de barras del celular, se captura el codigo isbn"&gt;Llama al lector de c&amp;oacute;digo de barras del celular, se captura el c&amp;oacute;digo ISBN&lt;/h1&gt;
&lt;h1 id="y se abre un navegador en google books para buscar ese codigo"&gt;y se abre un navegador en google books para buscar ese c&amp;oacute;digo&lt;/h1&gt;
&lt;p&gt;droid.startActivity('android.intent.action.VIEW', "http://books.google.com?q=%d" %int(droid.scanBarcode()[1]['extras']['SCAN_RESULT']))&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Eliminando los comentarios al final el script contiene s&amp;oacute;lo 3 l&amp;iacute;neas de c&amp;oacute;digo para realizar la busqueda en internet libros por medio del c&amp;oacute;digo de barras capturado desde la camara.&lt;/p&gt;
&lt;p&gt;Pero lo mejor ser&amp;aacute; desglosar la &amp;uacute;ltima l&amp;iacute;nea de c&amp;oacute;digo en varias l&amp;iacute;neas para una explicaci&amp;oacute;n detallada de lo que hace la &amp;uacute;ltima l&amp;iacute;nea:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="importar modulo android_1"&gt;Importar modulo android&lt;/h1&gt;
&lt;p&gt;import android&lt;/p&gt;
&lt;h1 id="instanciar el objeto android_1"&gt;Instanciar el objeto Android&lt;/h1&gt;
&lt;p&gt;droid = android.Android()&lt;/p&gt;
&lt;h1 id="escanear el codigo de barra por medio de la camara del celular, code guarda una lista"&gt;Escanear el codigo de barra por medio de la camara del celular, code guarda una lista&lt;/h1&gt;
&lt;p&gt;code = droid.scanBarcode()&lt;/p&gt;
&lt;h1 id="capturar el isbn del diccionario que contiene la lista"&gt;Capturar el isbn del diccionario que contiene la lista&lt;/h1&gt;
&lt;h1 id="la lista tiene 3 elementos y el numero 1 contiene un diccionario."&gt;La lista tiene 3 elementos y el n&amp;uacute;mero 1 contiene un diccionario.&lt;/h1&gt;
&lt;h1 id="el diccionario contiene el formato del codigo de barras y el isbn."&gt;El diccionario contiene el formato del c&amp;oacute;digo de barras y el isbn.&lt;/h1&gt;
&lt;h1 id="luego ese codigo se convierte de utf8 a int"&gt;Luego ese c&amp;oacute;digo se convierte de utf8 a int&lt;/h1&gt;
&lt;p&gt;isbn = int(code[1]['extras']['SCAN_RESULT'])&lt;/p&gt;
&lt;h1 id="crea el url completo para realizar la busqueda del isbn"&gt;Crea el url completo para realizar la busqueda del isbn&lt;/h1&gt;
&lt;p&gt;url = "http://books.google.com?q=%d" %isbn&lt;/p&gt;
&lt;h1 id="inicia la busqueda del isbn en google abriendo un navegador"&gt;Inicia la busqueda del isbn en google abriendo un navegador&lt;/h1&gt;
&lt;p&gt;droid.startActivity('android.intent.action.VIEW', url)
```&lt;/p&gt;
&lt;p&gt;Al escanear el c&amp;oacute;digo de barra desde el celular se abre una ventana del navegador para realizar una busqueda en books.google.com del isbn capturado.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra el resultado de la busqueda.&lt;/p&gt;
&lt;p&gt;&lt;img alt="C&amp;oacute;digo barras en python desde Android" src="./images/isbn.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Android"></category><category term="Python"></category></entry><entry><title>Instalar python en Android</title><link href="https://ecrespo.github.io/instalar-python-en-android.html" rel="alternate"></link><published>2010-06-06T13:00:00-05:30</published><updated>2010-06-06T13:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-06-06:/instalar-python-en-android.html</id><summary type="html">&lt;p&gt;Este art&amp;iacute;culo explicar&amp;aacute; como instalar python en Android desde el emulador para poder mostrar las capturas de pantalla y ese procedimiento es el mismo para instalar python desde el celular.&lt;/p&gt;
&lt;p&gt;Lo primero que se necesita hacer es iniciar el emulador como se explico en el art&amp;iacute;culo de &lt;a href="https://www.seraph.to/instalacion-del-sdk-de-android-en-linux.html#instalacion-del-sdk-de-android-en-linux"&gt;instalaci&amp;oacute;n del SDK …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este art&amp;iacute;culo explicar&amp;aacute; como instalar python en Android desde el emulador para poder mostrar las capturas de pantalla y ese procedimiento es el mismo para instalar python desde el celular.&lt;/p&gt;
&lt;p&gt;Lo primero que se necesita hacer es iniciar el emulador como se explico en el art&amp;iacute;culo de &lt;a href="https://www.seraph.to/instalacion-del-sdk-de-android-en-linux.html#instalacion-del-sdk-de-android-en-linux"&gt;instalaci&amp;oacute;n del SDK de Android&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Al ejecutar adb devices encontrar&amp;aacute;n un dispositivo virtual funcionando.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ernesto@zvezda:~/android-sdk-linux_86/tools$ ./adb devices List of devices attached emulator-5554 device&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego se baja el programa ASE desde el &lt;a href="http://code.google.com/p/android-scripting/downloads/detail?name=ase_r24.apk"&gt;siguiente enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ernesto@zvezda:~/android-sdk-linux_86/tools$ ./adb install ../../Descargas/ase_r22.apk 868 KB/s (217639 bytes in 0.244s) pkg: /data/local/tmp/ase_r22.apk Success&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Esto indica que se instalo sin problemas el programa ASE.&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra el home del emulador con ASE instalado.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 1" src="./images/pythonandroid1.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al darle clip al icono de ASE aparece la una informaci&amp;oacute;n donde nos pide que se agreguen scripts o interpretes presionando el bot&amp;oacute;n men&amp;uacute; como lo muestra la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 2" src="./images/pythonandroid2.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al darle men&amp;uacute; aparecen varias opciones como lo son: Agregar, Ver, Preferencias, Ayuda, Actualizar. Siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 3" src="./images/pythonandroid3.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al darle View o Ver aparecer&amp;aacute; un men&amp;uacute; donde se tiene varias opciones para visualizar, en este caso se quiere visualizar interpretes. Siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 4" src="./images/pythonandroid4.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al darle clip a Interpretes aparecer&amp;aacute; s&amp;oacute;lo como interprete Shell y las opciones Agregar, Iniciar servidor, Preferencias y Ayuda. En este caso se va a agregar un interprete nuevo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 5" src="./images/pythonandroid5.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al darle clip a agregar aparecer&amp;aacute; una lista de interpretes que en este caso se instalar&amp;aacute; python. Siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 6" src="./images/pythonandroid6.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al seleccionar Python 2.6.2 se inicia el proceso de instalaci&amp;oacute;n del interprete y de algunos scripts como lo muestran las 2 siguientes figuras:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 7" src="./images/pythonandroid7.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 8" src="./images/pythonandroid8.png"/&gt;&lt;/p&gt;
&lt;p&gt;Ahora aparece Python aparte de Shell en la lista de interpretadores como lo muestra la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 9" src="./images/pythonandroid9.png"/&gt;&lt;/p&gt;
&lt;p&gt;Para probar que todo est&amp;aacute; funcionando se selecciona el interpretador y este se ejecutar&amp;aacute; como lo muestra la figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 10" src="./images/pythonandroid10.png"/&gt;&lt;/p&gt;
&lt;p&gt;Por &amp;uacute;ltimo se lista los scripts en python de ejemplo para trabajar con Android:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python en Android 11" src="./images/pythonandroid11.png"/&gt;&lt;/p&gt;
&lt;p&gt;En siguientes art&amp;iacute;culos se explicar&amp;aacute; el uso de los scripts para ir creando una aplicaci&amp;oacute;n para Android.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Android"></category><category term="Debian"></category><category term="Python"></category></entry><entry><title>Jugando con pygame. Parte 1</title><link href="https://ecrespo.github.io/jugando-con-pygame-parte-1.html" rel="alternate"></link><published>2010-02-21T11:00:00-05:30</published><updated>2010-02-21T11:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-02-21:/jugando-con-pygame-parte-1.html</id><summary type="html">&lt;p&gt;Hace tiempo ten&amp;iacute;a ganas de subir algunos art&amp;iacute;culos sobre pygame. EL primero que publicar&amp;eacute; es una b&amp;aacute;sico que carga una imagen en una ventana con un tama&amp;ntilde;o definido.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python
!/usr/bin/env python&lt;/p&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import pygame
import sys&lt;/p&gt;
&lt;p&gt;ANCHO = 800
ALTO = 600&lt;/p&gt;
&lt;h1 id="iniciar pygame"&gt;Iniciar pygame&lt;/h1&gt;
&lt;p&gt;pygame …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace tiempo ten&amp;iacute;a ganas de subir algunos art&amp;iacute;culos sobre pygame. EL primero que publicar&amp;eacute; es una b&amp;aacute;sico que carga una imagen en una ventana con un tama&amp;ntilde;o definido.&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python
!/usr/bin/env python&lt;/p&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import pygame
import sys&lt;/p&gt;
&lt;p&gt;ANCHO = 800
ALTO = 600&lt;/p&gt;
&lt;h1 id="iniciar pygame"&gt;Iniciar pygame&lt;/h1&gt;
&lt;p&gt;pygame.init()&lt;/p&gt;
&lt;h1 id="generar la ventana con el ancho y alto definido"&gt;Generar la ventana con el ancho y alto definido&lt;/h1&gt;
&lt;p&gt;screen = pygame.display.set_mode((WIDTH, HEIGHT))&lt;/p&gt;
&lt;h1 id="cargar el titulo de la ventana"&gt;Cargar el titulo de la ventana&lt;/h1&gt;
&lt;p&gt;pygame.display.set_caption("Un ejemplo de pygame")&lt;/p&gt;
&lt;h1 id="cargar la imagen de fondo"&gt;Cargar la imagen de fondo&lt;/h1&gt;
&lt;p&gt;fondo = pygame.image.load('dharma.jpg')&lt;/p&gt;
&lt;h1 id="se genera un ciclo que repinta la imagen de fondo hasta que se cierra la ventana."&gt;Se genera un ciclo que repinta la imagen de fondo hasta que se cierra la ventana.&lt;/h1&gt;
&lt;p&gt;while True:
    #Se captura los eventos 
    for eventos in pygame.event.get():
        #Si el evento es cerrar la ventana se sale de la aplicacion
        if eventos.type == QUIT:
            sys.exit()
    #Se dibuja la imagen de fondo.
    screen.blit(fondo, (0, 0))
    pygame.display.flip()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La imagen a continuaci&amp;oacute;n muestra la ejecuci&amp;oacute;n del programa:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 1 pygame 1" src="./images/tutorialpygame1-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="pygame"></category></entry><entry><title>Tutorial de python+qt. Parte 2</title><link href="https://ecrespo.github.io/tutorial-de-pythonqt-parte-2.html" rel="alternate"></link><published>2010-01-25T11:00:00-05:30</published><updated>2010-01-25T11:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-01-25:/tutorial-de-pythonqt-parte-2.html</id><summary type="html">&lt;p&gt;En ese tutorial se explicar&amp;aacute; como colocarle un icono a la ventana, crear un bot&amp;oacute;n para salir de la aplicaci&amp;oacute;n y todo el c&amp;oacute;digo se desarrollar&amp;aacute; orientado a objetos.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar modulo sys"&gt;Importar m&amp;oacute;dulo sys&lt;/h1&gt;
&lt;p&gt;import sys &lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui y qtcore"&gt;De PyQt4 importar QtGui y QtCore&lt;/h1&gt;
&lt;p&gt;from PyQt4 import …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En ese tutorial se explicar&amp;aacute; como colocarle un icono a la ventana, crear un bot&amp;oacute;n para salir de la aplicaci&amp;oacute;n y todo el c&amp;oacute;digo se desarrollar&amp;aacute; orientado a objetos.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar modulo sys"&gt;Importar m&amp;oacute;dulo sys&lt;/h1&gt;
&lt;p&gt;import sys &lt;/p&gt;
&lt;h1 id="de pyqt4 importar qtgui y qtcore"&gt;De PyQt4 importar QtGui y QtCore&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui, QtCore &lt;/p&gt;
&lt;h1 id="se crea la clase quitbutton que hereda de la clase qwidget."&gt;Se crea la clase QuitButton que hereda de la clase QWidget.&lt;/h1&gt;
&lt;p&gt;class QuitButton(QtGui.QWidget):
    def &lt;strong&gt;init&lt;/strong&gt;(self, parent=None):
       QtGui.QWidget.&lt;strong&gt;init&lt;/strong&gt;(self, parent)
       #Se define el tama&amp;ntilde;o de la ventana
       self.setGeometry(400, 400, 250, 150)
        #Se le coloca un t&amp;iacute;tulo a la ventana y se asocia un icono. 
       self.setWindowTitle('Prueba de boton para salir') 
       self.setWindowIcon(QtGui.QIcon('./icono.png')) &lt;br/&gt;
       #Se crea el bot&amp;oacute;n salir con su tama&amp;ntilde;o      &lt;br/&gt;
       quit = QtGui.QPushButton('Salir', self)      &lt;br/&gt;
       quit.setGeometry(10, 10, 60, 35)      &lt;br/&gt;
       #Se asocia la se&amp;ntilde;al del bot&amp;oacute;n con quit 
       self.connect(quit, QtCore.SIGNAL('clicked()'),QtGui.qApp, QtCore.SLOT('quit()'))   &lt;/p&gt;
&lt;h1 id="se ejecuta el programa principal"&gt;Se ejecuta el programa principal&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":  &lt;br/&gt;
   #Se instancia la clase QApplication  &lt;br/&gt;
   app = QtGui.QApplication(sys.argv)  &lt;br/&gt;
   #Se instancia el objeto QuitButton  &lt;br/&gt;
   qb = QuitButton()  &lt;br/&gt;
   #Se muestra la aplicaci&amp;oacute;n  &lt;br/&gt;
   qb.show()  &lt;br/&gt;
   #Se sale de la aplicaci&amp;oacute;n  &lt;br/&gt;
   sys.exit(app.exec_())&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la aplicaci&amp;oacute;n ejecutandose.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 2 pyqt 1" src="./images/tutorialpyqt2-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="qt"></category></entry><entry><title>Tutorial de python+qt. Parte 1</title><link href="https://ecrespo.github.io/tutorial-de-pythonqt-parte-1.html" rel="alternate"></link><published>2010-01-25T10:00:00-05:30</published><updated>2010-01-25T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-01-25:/tutorial-de-pythonqt-parte-1.html</id><summary type="html">&lt;p&gt;Luego de unos cuantos art&amp;iacute;culos sobre gtk empezar&amp;eacute; a publicar art&amp;iacute;culos sobre pyqt debido a que me asignaron a otro proyecto estoy evaluando desarrollar en pyqt o en wxwidget.&lt;/p&gt;
&lt;p&gt;Los primeros tutoriales se enfocar&amp;aacute;n al desarrollo de la interfaz a pie sin utilizar qtdesigner.&lt;/p&gt;
&lt;p&gt;Este ejemplo simplemente muestra una ventana …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Luego de unos cuantos art&amp;iacute;culos sobre gtk empezar&amp;eacute; a publicar art&amp;iacute;culos sobre pyqt debido a que me asignaron a otro proyecto estoy evaluando desarrollar en pyqt o en wxwidget.&lt;/p&gt;
&lt;p&gt;Los primeros tutoriales se enfocar&amp;aacute;n al desarrollo de la interfaz a pie sin utilizar qtdesigner.&lt;/p&gt;
&lt;p&gt;Este ejemplo simplemente muestra una ventana con un tama&amp;ntilde;o definido y el t&amp;iacute;tulo de la misma.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar modulo sys"&gt;Importar m&amp;oacute;dulo sys&lt;/h1&gt;
&lt;p&gt;import sys&lt;/p&gt;
&lt;h1 id="importar qtgui de pyqt4"&gt;importar QTGui de pyQt4&lt;/h1&gt;
&lt;p&gt;from PyQt4 import QtGui&lt;/p&gt;
&lt;h1 id="se instancia la clase qapplication pasandole sys.argv"&gt;Se instancia la clase QApplication pasandole sys.argv&lt;/h1&gt;
&lt;p&gt;app = QtGui.QApplication(sys.argv)&lt;/p&gt;
&lt;h1 id="se crea la instancia de qwidget."&gt;Se crea la instancia de QWidget.&lt;/h1&gt;
&lt;p&gt;widget = QtGui.QWidget()&lt;/p&gt;
&lt;h1 id="se define el tamano de la ventana"&gt;Se define el tama&amp;ntilde;o de la ventana&lt;/h1&gt;
&lt;p&gt;widget.resize(250, 150)&lt;/p&gt;
&lt;h1 id="se le coloca el titulo a la ventana"&gt;Se le coloca el t&amp;iacute;tulo a la ventana&lt;/h1&gt;
&lt;p&gt;widget.setWindowTitle('Es una prueba')&lt;/p&gt;
&lt;h1 id="se muestra la ventana"&gt;Se muestra la ventana&lt;/h1&gt;
&lt;p&gt;widget.show()&lt;/p&gt;
&lt;h1 id="se sale de la aplicacion"&gt;Se sale de la aplicaci&amp;oacute;n&lt;/h1&gt;
&lt;p&gt;sys.exit(app.exec_())&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La figura muestra la ventana que se cre&amp;oacute;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 1 pyqt 1" src="./images/tutorialpyqt1-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="qt"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 10. Generador de código de barra</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-10-generador-de-codigo-de-barra.html" rel="alternate"></link><published>2010-01-02T10:00:00-05:30</published><updated>2010-01-02T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-01-02:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-10-generador-de-codigo-de-barra.html</id><summary type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como usar los botones de radio y manejar im&amp;aacute;genes. El programa es un generador de c&amp;oacute;digos de barra.&lt;/p&gt;
&lt;p&gt;Python tiene un m&amp;oacute;dulo para crear im&amp;aacute;genes svg con c&amp;oacute;digo de barra, Este m&amp;oacute;dulo se llama pyBarcode; para poder instalar este m&amp;oacute;dulo se requiere python2.6 y …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este art&amp;iacute;culo se explicar&amp;aacute; como usar los botones de radio y manejar im&amp;aacute;genes. El programa es un generador de c&amp;oacute;digos de barra.&lt;/p&gt;
&lt;p&gt;Python tiene un m&amp;oacute;dulo para crear im&amp;aacute;genes svg con c&amp;oacute;digo de barra, Este m&amp;oacute;dulo se llama pyBarcode; para poder instalar este m&amp;oacute;dulo se requiere python2.6 y en el equipo por defecto python2.5. Se instal&amp;oacute; la versi&amp;oacute;n 2.6 y se compilo pyBarcode con esta versi&amp;oacute;n. Por esa raz&amp;oacute;n se creo un script para generar el c&amp;oacute;digo de barras que usa python 2.6 y el programa gr&amp;aacute;fico usa python2.5.&lt;/p&gt;
&lt;p&gt;En el programa gr&amp;aacute;fico se le puede pasar un n&amp;uacute;mero de 12 d&amp;iacute;gitos para generar un c&amp;oacute;digo de barras o generar el c&amp;oacute;digo de forma aleatoria.&lt;/p&gt;
&lt;p&gt;El dise&amp;ntilde;o gr&amp;aacute;fico de la aplicaci&amp;oacute;n se muestra en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 10 Glade 1" src="./images/tutorialpythongtkglade10-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del script que genera el c&amp;oacute;digo de Barras es el siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/opt/python/bin/python2.6"&gt;!/opt/python/bin/python2.6&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar barcode y sys"&gt;Importar barcode y sys&lt;/h1&gt;
&lt;p&gt;import barcode,sys&lt;/p&gt;
&lt;h1 id="funcion generar codigo se le pasa el numero para generar el codigo"&gt;Funcion generar codigo se le pasa el numero para generar el codigo&lt;/h1&gt;
&lt;p&gt;def generar_codigo(dato):
    #Se usara EAN13
    EAN = barcode.get_barcode('ean13')
    ean = EAN(u'%s' %dato)
    #Se salva el archivo en formato svg
    fullname = ean.save('ean13_barcode')
    fullname&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    #se importa el modulo commands
    import commands
    #Se borra el archivo anterior
    commands.getstatusoutput("rm ean13_barcode.svg")
    #Se toma el argumento para generar el codigo
    dato =sys.argv[1]
    #Se ejecuta la funcion
    generar_codigo(dato)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n gr&amp;aacute;fica es el siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --_1"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar modulo gtk,commands y random"&gt;Importar modulo gtk,commands y random&lt;/h1&gt;
&lt;p&gt;import gtk, commands, random&lt;/p&gt;
&lt;p&gt;class App:
    def &lt;strong&gt;init&lt;/strong&gt;(self):
       #Manejo del archivo glade por medio de gtkbuilder
       self.glade_file = "ej13.ui"
       self.glade = gtk.Builder()
       self.glade.add_from_file(self.glade_file)
       # cargar los widgets de la interfaz
       self.window = self.glade.get_object('dialog1')
       self.button1 = self.glade.get_object('button1')
       self.button2 = self.glade.get_object('button2')
       self.button3 = self.glade.get_object('button3')
       self.radiobutton1 = self.glade.get_object('radiobutton1')
       self.radiobutton2 = self.glade.get_object('radiobutton2')
       self.entrada = self.glade.get_object('entry1')
       self.imagen = self.glade.get_object('image1')
       #Valores iniciales de la aplicacion Titulo y tama?o de la ventana
       self.window.set_title("Ejemplo de generacion de codigo de barra")
       self.window.set_default_size(600, 400)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   #Asociar los eventos de los 2 botones y de la ventana
   self.window.connect("close",self.__on_dialog1_close)
   self.window.connect("destroy",self.__on_dialog1_destroy)
   self.button1.connect ("clicked",self.__on_button1_clicked)
   self.button2.connect ("clicked",self.__on_button2_clicked)
   self.button3.connect ("clicked",self.__on_button3_clicked)
   self.radiobutton1.connect("toggled",self.__on_radiobutton1_toggled)
   self.radiobutton2.connect("toggled",self.__on_radiobutton2_toggled)
   #Se muestra todos los widgets
   self.window.show_all()


def __on_radiobutton1_toggled(self,*args):
    #Si este boton se selecciona se muestra la entrada de datos
    self.entrada.show()


def __on_radiobutton2_toggled(self,*args):
    #Si este boton se selecciona se oculta la entrada de datos
    self.entrada.hide()

def __on_dialog1_close(self,*args):
    #Se cierra la aplicacion
    gtk.main_quit()

def __on_dialog1_destroy(self,*args):
    #Se cierra la aplicacion
    gtk.main_quit()

def __on_button1_clicked(self,*args):
    #Creacion del codigo de barra
    if self.radiobutton1.get_active() == True:
        #Si el boton de radio esta activo se captura la entrada de texto
        self.texto = self.entrada.get_text()
        valor = int(self.texto)
    elif self.radiobutton2.get_active() == True:
        #Se el boton de radio esta activo se oculta la entrada de texto y se genera el numero
        #de forma aleatoria
        self.entrada.hide()
        valor = int(random.random()*1000000000000)
    #Se ejecuta el generador de codigo de barra
    commands.getstatusoutput("./generador.py %s" %valor)
    #Se carga la nueva imagen del codigo de barra generado
    self.imagen.set_from_file('./ean13_barcode.svg')

def __on_button2_clicked(self,*args):
    #El boton salir, se cierra la aplicacion
    gtk.main_quit()

def __on_button3_clicked(self,*args):
    #El boton se restaurar la aplicacion, se coloca una imagen en blanco
    self.imagen.set_from_file('./1.png')


def main(self):
    #Se inicia la aplicacion
    gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    #Se crea una instancia del objeto y se ejecuta el metodo main
    app = App()
    app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La siguiente gr&amp;aacute;fica muestra la ejecuci&amp;oacute;n de la aplicaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 9 Glade 2" src="./images/tutorialpythongtkglade10-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category><category term="barcode"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 9. Matplotlib</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-9-matplotlib.html" rel="alternate"></link><published>2010-01-01T10:00:00-05:30</published><updated>2010-01-01T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2010-01-01:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-9-matplotlib.html</id><summary type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos de desarrollo de aplicaciones con python y gtk. Ahora unir&amp;eacute; los art&amp;iacute;culos relacionados con &lt;a href="https://www.seraph.to/tag/matplotlib.html"&gt;matplotlib&lt;/a&gt; y gtk.
Se dise&amp;ntilde;o una ventana de dialogo con una gr&amp;aacute;fica en el centro, 2 botones, uno para cargar la curva en la gr&amp;aacute;fica y el otro bot&amp;oacute;n para cerrar la …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los art&amp;iacute;culos de desarrollo de aplicaciones con python y gtk. Ahora unir&amp;eacute; los art&amp;iacute;culos relacionados con &lt;a href="https://www.seraph.to/tag/matplotlib.html"&gt;matplotlib&lt;/a&gt; y gtk.
Se dise&amp;ntilde;o una ventana de dialogo con una gr&amp;aacute;fica en el centro, 2 botones, uno para cargar la curva en la gr&amp;aacute;fica y el otro bot&amp;oacute;n para cerrar la aplicaci&amp;oacute;n.
La figura muestra el dise&amp;ntilde;o de la interfaz con glade.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 9 Glade 1" src="./images/tutorialpythongtkglade9-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la creaci&amp;oacute;n de la aplicaci&amp;oacute;n es el siguiente:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importar modulo gtk y matplotlib"&gt;Importar m&amp;oacute;dulo gtk y matplotlib&lt;/h1&gt;
&lt;p&gt;import gtk
import matplotlib&lt;/p&gt;
&lt;p&gt;matplotlib.use('GTK')&lt;/p&gt;
&lt;h1 id="importar la clase figure, subplot, figurecanvasgtk, figurecanvas"&gt;Importar la clase figure, subplot, figurecanvasgtk, figurecanvas&lt;/h1&gt;
&lt;p&gt;from matplotlib.figure import Figure
from matplotlib.axes import Subplot
from matplotlib.backends.backend_gtk import FigureCanvasGTK, NavigationToolbar
from matplotlib.backends.backend_gtkagg import FigureCanvasGTKAgg as FigureCanvas&lt;/p&gt;
&lt;h1 id="importar numpy"&gt;Importar numpy&lt;/h1&gt;
&lt;p&gt;import numpy as np&lt;/p&gt;
&lt;h1 id="definicion de la clase"&gt;Definici&amp;oacute;n de la clase&lt;/h1&gt;
&lt;p&gt;class App:
    def &lt;strong&gt;init&lt;/strong&gt;(self):
        #Manejo del archivo glade por medio de gtkbuilder
        self.glade_file = "ej10.ui"
        self.glade = gtk.Builder()
        self.glade.add_from_file(self.glade_file)
        # cargar los widgets de la interfaz
        self.window = self.glade.get_object('dialog1')
        self.button1 = self.glade.get_object('button1')
        self.button2 = self.glade.get_object('button2')
        #T&amp;iacute;tulo de la ventana de dialogos
        self.window.set_title("Ventana de dialogo para demostrar uso de matplotlib")
        #Tama&amp;ntilde;o de la ventana de dialogos
        self.window.set_default_size(600, 400)
        #Asociaci&amp;oacute;n de los eventos con los widgets
        self.window.connect("destroy",self.on_dialog1_destroy)
        self.window.connect("close",self.on_dialog1_close)
        self.button1.connect ("clicked",self.on_button1_clicked)
        self.button2.connect ("clicked",self.on_button2_clicked)
        #Definici&amp;oacute;n del widget que manejar&amp;aacute; la gr&amp;aacute;fica
        self.figura = Figure(figsize=(10, 8), dpi=100)
        self.ax = self.figura.add_subplot(111)
        self.ax.set_xlabel("Eje X")
        self.ax.set_ylabel("Eje Y")
        self.ax.set_title('Grafica')
        self.ax.grid(True)
        self.canvas = FigureCanvasGTK(self.figura)
        self.canvas.show()
        #Agregar la gr&amp;aacute;fica a la caja vertical
        self.vbox1 = self.glade.get_object("vbox1")
        self.vbox1.pack_start(self.canvas, True, True)
        #Mostrar la ventana
        self.window.show_all()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def on_dialog1_destroy(self,*args):
    #Cerrar la ventana de dialogo
    gtk.main_quit()

def on_button1_clicked(self,*args):
    #Carga la curva en la gr&amp;aacute;fica
    #Se oculta el canvas creado al inicio
    self.canvas.hide()
    #Generaci&amp;oacute;n de los valores X y Y
    self.x = np.arange(0,2*np.pi, .01)
    self.y = np.sin(self.x**2)*np.exp(-self.x)
    #Dibuja la curva
    self.ax.plot(self.x, self.y)
    #Se agrega la curva al canvas
    self.canvas = FigureCanvas(self.figura)
    #Se muestra el canvas
    self.canvas.show()
    #Se agrega el canvas a la caja vertical
    self.vbox1.pack_start(self.canvas, True, True)


def on_button2_clicked(self,*args):
    #Cerrar la ventana de dialogo
    gtk.main_quit()

def on_dialog1_close(self,*args):
    #Cerrar la ventana de dialogo
    gtk.main_quit()

def main(self):
    #Ejecutar la aplicaci&amp;oacute;n gr&amp;aacute;fica
    gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    #Creaci&amp;oacute;n de la instancia y ejecuci&amp;oacute;n del m&amp;eacute;todo main
    app = App()
    app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La siguiente gr&amp;aacute;fica muestra la ejecuci&amp;oacute;n de la aplicaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 9 Glade 2" src="./images/tutorialpythongtkglade9-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;La siguiente gr&amp;aacute;fica muestra la aplicaci&amp;oacute;n luego de presionar el bot&amp;oacute;n aplicar y cargar la curva:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 9 Glade 2" src="./images/tutorialpythongtkglade9-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category><category term="matplotlib"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 8. Calendario</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-8-calendario.html" rel="alternate"></link><published>2009-12-31T10:00:00-05:30</published><updated>2009-12-31T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-12-31:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-8-calendario.html</id><summary type="html">&lt;p&gt;Este tutorial trata sobre el uso del widget calendario, como capturar la fecha al dar clip y mostrarla en la misma ventana.&lt;/p&gt;
&lt;p&gt;La figura muestra el dise&amp;ntilde;o de la aplicaci&amp;oacute;n&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 8 Glade 1" src="./images/tutorialpythongtkglade8-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import gtk, time&lt;/p&gt;
&lt;p&gt;class App:
 def &lt;strong&gt;init …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este tutorial trata sobre el uso del widget calendario, como capturar la fecha al dar clip y mostrarla en la misma ventana.&lt;/p&gt;
&lt;p&gt;La figura muestra el dise&amp;ntilde;o de la aplicaci&amp;oacute;n&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 8 Glade 1" src="./images/tutorialpythongtkglade8-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import gtk, time&lt;/p&gt;
&lt;p&gt;class App:
 def &lt;strong&gt;init&lt;/strong&gt;(self):
  #Manejo del archivo glade por medio de gtkbuilder
  self.glade_file = "ej8.ui"
  self.glade = gtk.Builder()
  self.glade.add_from_file(self.glade_file)
  # cargar los widgets de la interfaz
  self.window = self.glade.get_object('window1')
  self.button1 = self.glade.get_object('button1')
  self.button2 = self.glade.get_object('button2')
  self.calendario = self.glade.get_object('calendar1')
  self.label1 = self.glade.get_object('label1')
  self.label2 = self.glade.get_object('label2')
  self.label3 = self.glade.get_object('label3')
  self.label4 = self.glade.get_object('label4')
  #Asociar los eventos de los 2 botones y de la ventana
  self.window.connect("destroy",self.on_window1_destroy)
  self.button1.connect ("clicked",self.on_button1_clicked)
  self.button2.connect ("clicked",self.on_button2_clicked)
  #Tupla que maneja los meses del a&amp;ntilde;o
  self.meses = ('Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre')
  #Se muestra todos los widgets
  self.window.show_all()&lt;/p&gt;
&lt;p&gt;def on_window1_destroy(self,*args):
  #Cerrar aplicaci&amp;oacute;n
  gtk.main_quit()&lt;/p&gt;
&lt;p&gt;def on_button1_clicked(self,*args):
  #Cerrar Aplicaci&amp;oacute;n
  gtk.main_quit()&lt;/p&gt;
&lt;p&gt;def on_button2_clicked(self,*args):
  #Capturar los datos del calendario y presentarlos en las etiquetas
  agno, mes, dia = self.calendario.get_date()
  texto_agno = "A&amp;ntilde;o:  %s" %agno
  texto_mes = "Mes: %s" %self.meses[mes]
  texto_dia = "Dia: %s" %dia
  self.label2.set_text(texto_agno)
  self.label3.set_text(texto_mes)
  self.label4.set_text(texto_dia)&lt;/p&gt;
&lt;p&gt;def main(self):
  gtk.main()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
 app = App()
 app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra la aplicaci&amp;oacute;n en funcionamiento:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 8 Glade 2" src="./images/tutorialpythongtkglade8-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 7. Barra de progreso y boton biestado</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-7-barra-de-progreso-y-boton-biestado.html" rel="alternate"></link><published>2009-12-25T10:00:00-05:30</published><updated>2009-12-25T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-12-25:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-7-barra-de-progreso-y-boton-biestado.html</id><summary type="html">&lt;p&gt;Continuando con la serie de tutoriales sobre pygtk. Este trata del desarrollo de una sencilla aplicaci&amp;oacute;n que contiene una barra de progreso que avanzar&amp;aacute; cada segundo mostrando el tiempo el cual trancurre la barra de progreso. En este tutorial como se ejecuta un proceso que puede congelar la ventana se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con la serie de tutoriales sobre pygtk. Este trata del desarrollo de una sencilla aplicaci&amp;oacute;n que contiene una barra de progreso que avanzar&amp;aacute; cada segundo mostrando el tiempo el cual trancurre la barra de progreso. En este tutorial como se ejecuta un proceso que puede congelar la ventana se usar&amp;aacute; hilos para evitarlo, adicionalmente se muestra el uso de botones biestado para controlar la barra de progreso.&lt;/p&gt;
&lt;p&gt;En la figura se muestra el dise&amp;ntilde;o de la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 7 Glade 1" src="./images/tutorialpythongtkglade7-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo se muestra a continuaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="sin ej6.py"&gt;sin ej6.py&lt;/h1&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="copyright 2009 ernesto nadir crespo avila"&gt;Copyright 2009 Ernesto Nadir Crespo Avila&lt;/h1&gt;
&lt;h1 id="_2"&gt;&lt;/h1&gt;
&lt;h1 id="this program is free software; you can redistribute it and/or modify"&gt;This program is free software; you can redistribute it and/or modify&lt;/h1&gt;
&lt;h1 id="it under the terms of the gnu general public license as published by"&gt;it under the terms of the GNU General Public License as published by&lt;/h1&gt;
&lt;h1 id="the free software foundation; either version 2 of the license, or"&gt;the Free Software Foundation; either version 2 of the License, or&lt;/h1&gt;
&lt;h1 id="(at your option) any later version."&gt;(at your option) any later version.&lt;/h1&gt;
&lt;h1 id="_3"&gt;&lt;/h1&gt;
&lt;h1 id="this program is distributed in the hope that it will be useful,"&gt;This program is distributed in the hope that it will be useful,&lt;/h1&gt;
&lt;h1 id="but without any warranty; without even the implied warranty of"&gt;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/h1&gt;
&lt;h1 id="merchantability or fitness for a particular purpose. see the"&gt;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/h1&gt;
&lt;h1 id="gnu general public license for more details."&gt;GNU General Public License for more details.&lt;/h1&gt;
&lt;h1 id="_4"&gt;&lt;/h1&gt;
&lt;h1 id="you should have received a copy of the gnu general public license"&gt;You should have received a copy of the GNU General Public License&lt;/h1&gt;
&lt;h1 id="along with this program; if not, write to the free software"&gt;along with this program; if not, write to the Free Software&lt;/h1&gt;
&lt;h1 id="foundation, inc., 51 franklin street, fifth floor, boston,"&gt;Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,&lt;/h1&gt;
&lt;h1 id="ma 02110-1301, usa."&gt;MA 02110-1301, USA.&lt;/h1&gt;
&lt;h1 id="importar los modulos gtk, time, threading, thread, gobject"&gt;Importar los m&amp;oacute;dulos gtk, time, threading, thread, gobject&lt;/h1&gt;
&lt;p&gt;import gtk, time
import threading
import thread
import gobject&lt;/p&gt;
&lt;h1 id="iniciando el hilo sin usarlo"&gt;Iniciando el hilo sin usarlo&lt;/h1&gt;
&lt;p&gt;gtk.gdk.threads_init()&lt;/p&gt;
&lt;h1 id="la clase app hereda threading.thread"&gt;La clase App hereda threading.Thread&lt;/h1&gt;
&lt;p&gt;class App(threading.Thread):
    def &lt;strong&gt;init&lt;/strong&gt;(self):
     #M&amp;eacute;todo constructor, asociando los widgets
        self.glade_file = "ej6.ui"
        self.glade = gtk.Builder()
        self.glade.add_from_file(self.glade_file)
        self.window1 = self.glade.get_object('window1')
        self.togglebutton1 = self.glade.get_object('togglebutton1')
        self.button1 = self.glade.get_object('button1')
        self.progressbar1 = self.glade.get_object('progressbar1')
        self.new_val = 0.0
        self.rango =60
     #Definiendo el valor inicial de la barra de proceso, definiendo los saltos en 0.1
        self.progressbar1.set_fraction(self.new_val)
        self.progressbar1.set_pulse_step(0.1)
        self.window1.connect("destroy",self.on_window1_destroy)
        self.button1.connect('clicked', self.on_button1_clicked)
        self.togglebutton1.connect('toggled',self.on_togglebutton1_toggled)
        #Iniciando el hilo en el constructor
     threading.Thread.&lt;strong&gt;init&lt;/strong&gt;(self)
        self.window1.show_all()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __iteracion__(self):
 #Iteraci&amp;oacute;n en segundos cambiando el valor en la barra de progreso.
    for i in range(self.rango):
        if self.togglebutton1.get_active() == True:
            self.new_val = self.progressbar1.get_fraction() + 0.01
            if self.new_val &amp;gt; 1.0:
                self.new_val = 0.0
                self.togglebutton1.set_active(False)
                break
            else:
                time.sleep(1)
                self.x = self.new_val*100
                self.progressbar1.set_text("%s" %self.x)
                self.progressbar1.set_fraction(self.new_val)
        else:
            return





def on_togglebutton1_toggled(self,*args):
 #Si cambia el evento en el boton biestado se inicia la iteraci&amp;oacute;n entre los hilos.
    variable = self.togglebutton1.get_active()
    self.rango = 100
    if variable == True:
        lock =  thread.allocate_lock()
        lock.acquire()
        thread.start_new_thread( self.__iteracion__, ()) 
        lock.release()
    else:
     #Se detiene la barra de progreso
        self.progressbar1.set_fraction(self.new_val)
        self.progressbar1.set_text("%s" %self.x)
        return




def on_window1_destroy(self,*args):
 #Se cierra la aplicaci&amp;oacute;n
    gtk.main_quit()

def on_button1_clicked(self,*args):
 #Se cierra la aplicaci&amp;oacute;n al darle clip al boton salir.
    gtk.main_quit()


def main(self):
 #Inicia la aplicaci&amp;oacute;n
    gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    app = App()
    app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra la aplicaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 7 Glade 2" src="./images/tutorialpythongtkglade7-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Desarrollo de interfaz gráfica para la configuración de accesos rápidos de teclado para gconf</title><link href="https://ecrespo.github.io/desarrollo-de-interfaz-grafica-para-la-configuracion-de-accesos-rapidos-de-teclado-para-gconf.html" rel="alternate"></link><published>2009-12-21T19:00:00-05:30</published><updated>2009-12-21T19:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-12-21:/desarrollo-de-interfaz-grafica-para-la-configuracion-de-accesos-rapidos-de-teclado-para-gconf.html</id><summary type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/script-en-python-que-configura-los-accesos-rapidos-de-teclado-a-aplicaciones-en-gnome-con-gconf.html#script-en-python-que-configura-los-accesos-rapidos-de-teclado-a-aplicaciones-en-gnome-con-gconf"&gt;anterior art&amp;iacute;culo&lt;/a&gt; se mostr&amp;oacute; el desarrollo de una aplicaci&amp;oacute;n en python que configura v&amp;iacute;a l&amp;iacute;nea de comandos los accesos r&amp;aacute;pidos de teclado para gnome por medio de gconf.&lt;/p&gt;
&lt;p&gt;La interf&amp;aacute;z gr&amp;aacute;fica de la aplicaci&amp;oacute;n la pueden bajar del siguiente &lt;a href="http://python-config-accesskey-gnome.googlecode.com/hg/ui.glade"&gt;enlace&lt;/a&gt; , el c&amp;oacute;digo python de la aplicaci&amp;oacute;n lo pueden …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el &lt;a href="https://www.seraph.to/script-en-python-que-configura-los-accesos-rapidos-de-teclado-a-aplicaciones-en-gnome-con-gconf.html#script-en-python-que-configura-los-accesos-rapidos-de-teclado-a-aplicaciones-en-gnome-con-gconf"&gt;anterior art&amp;iacute;culo&lt;/a&gt; se mostr&amp;oacute; el desarrollo de una aplicaci&amp;oacute;n en python que configura v&amp;iacute;a l&amp;iacute;nea de comandos los accesos r&amp;aacute;pidos de teclado para gnome por medio de gconf.&lt;/p&gt;
&lt;p&gt;La interf&amp;aacute;z gr&amp;aacute;fica de la aplicaci&amp;oacute;n la pueden bajar del siguiente &lt;a href="http://python-config-accesskey-gnome.googlecode.com/hg/ui.glade"&gt;enlace&lt;/a&gt; , el c&amp;oacute;digo python de la aplicaci&amp;oacute;n lo pueden bajar &lt;a href="http://python-config-accesskey-gnome.googlecode.com/hg/pyconfig-accessgnome-ui.py"&gt;ac&amp;aacute;&lt;/a&gt; y el m&amp;oacute;dulo &lt;a href="http://python-config-accesskey-gnome.googlecode.com/hg/configGconf.py"&gt;configGconf.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La interfaz gr&amp;aacute;fica fue creada con glade usando gtkbuilder en vez de libglade, esa es una de las diferencias principales con otros desarrollos gr&amp;aacute;ficos mostrados en este blog. La interfaz tiene varios botones de verificaci&amp;oacute;n para seleccionar cuales opciones de teclas r&amp;aacute;pidas se quieren configurar.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la interfaz desarrollada con glade.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GUI" src="./images/gui-gconf-gnome.png"/&gt;&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n el c&amp;oacute;digo fuente de la aplicaci&amp;oacute;n:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;"""
Name: pyconfig-accessgnome-uy
Description: Aplicaci&amp;oacute;n gr&amp;aacute;fica que permite configurar los accesos r&amp;aacute;pidos de teclado a gconf
Version:0.1
License: GPLv3
Copyright: Copyright (C) 2009  Libre Accesibilidad
Author: Ernesto Nadir Crespo Avila
Email: ecrespo@gmail.com&lt;/p&gt;
&lt;p&gt;"""&lt;/p&gt;
&lt;h1 id="importar modulo gtk y el modulo de cambios de opciones de teclado"&gt;Importar m&amp;oacute;dulo gtk y el m&amp;oacute;dulo de cambios de opciones de teclado&lt;/h1&gt;
&lt;p&gt;import gtk,configGconf&lt;/p&gt;
&lt;h1 id="clse accessgnomeconfig"&gt;Clse AccessGnomeCOnfig&lt;/h1&gt;
&lt;p&gt;class AccessGnomeConfig:
 def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            #Uso de la interfaz desarrollada con gtkbuilder y llamado del mismo.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;self.glade_file = "ui.glade"
  self.glade = gtk.Builder()
  self.glade.add_from_file(self.glade_file)
  # Asociaci&amp;oacute;n de todos los widgets
  self.window = self.glade.get_object('dialog1')
  self.button1 = self.glade.get_object('button1')
  self.button2 = self.glade.get_object('button2')
  self.checkbutton1 = self.glade.get_object('checkbutton1')
  self.checkbutton2 = self.glade.get_object('checkbutton2')
  self.checkbutton3 = self.glade.get_object('checkbutton3')
  self.checkbutton4 = self.glade.get_object('checkbutton4')
  self.checkbutton5 = self.glade.get_object('checkbutton5')
  self.checkbutton6 = self.glade.get_object('checkbutton6')
  self.checkbutton7 = self.glade.get_object('checkbutton7')
  self.checkbutton8 = self.glade.get_object('checkbutton8')
  self.checkbutton9 = self.glade.get_object('checkbutton9')
  self.checkbutton10 = self.glade.get_object('checkbutton10')
  self.checkbutton11 = self.glade.get_object('checkbutton11')
  self.checkbutton12 = self.glade.get_object('checkbutton12')
  self.checkbutton13 = self.glade.get_object('checkbutton13')
  self.aplicaciones = []&lt;/p&gt;
&lt;p&gt;# asociar las se&amp;ntilde;ales de los widgets con los m&amp;eacute;todos de la clase
  self.window.connect ("close",self.on_dialog1_close)
  self.window.connect("destroy",self.on_dialog1_destroy)
  self.button1.connect ("clicked",self.on_button1_clicked)
  self.button2.connect ("clicked",self.on_button2_clicked)
  self.checkbutton1.connect("toggled",self.on_checkbutton1_toggled)
  self.checkbutton2.connect("toggled",self.on_checkbutton2_toggled)
  self.checkbutton3.connect("toggled",self.on_checkbutton3_toggled)
  self.checkbutton4.connect("toggled",self.on_checkbutton4_toggled)
  self.checkbutton5.connect("toggled",self.on_checkbutton5_toggled)
  self.checkbutton6.connect("toggled",self.on_checkbutton6_toggled)
  self.checkbutton7.connect("toggled",self.on_checkbutton7_toggled)
  self.checkbutton8.connect("toggled",self.on_checkbutton8_toggled)
  self.checkbutton9.connect("toggled",self.on_checkbutton9_toggled)
  self.checkbutton10.connect("toggled",self.on_checkbutton10_toggled)
  self.checkbutton11.connect("toggled",self.on_checkbutton11_toggled)
  self.checkbutton12.connect("toggled",self.on_checkbutton12_toggled)
  self.checkbutton13.connect("toggled",self.on_checkbutton13_toggled)
  #Configuraci&amp;oacute;n del  widget ventana, agregandole un t&amp;iacute;tulo.
  self.window.set_title("Configuraci&amp;oacute;n de accesos rapidos de Aplicaciones en Gnome")
  self.window.show_all()
 #M&amp;eacute;todos de utilizaci&amp;oacute;n de los botones de verificaci&amp;oacute;n cuando se selecciona o no.
        #Cuando se selecciona se agrega el elemento a una lista
        #Cuando se deselecciona se elimina el elemento de la lista.
 def on_checkbutton1_toggled(self,*args):
  variable = self.checkbutton1.get_active()
  if variable == True:
   self.aplicaciones.append("orca")
  else:
   self.__eliminacion("orca")&lt;/p&gt;
&lt;p&gt;def on_checkbutton2_toggled(self,*args):
  variable = self.checkbutton2.get_active()
  if variable == True:
   self.aplicaciones.append("nautilus")
  else:
   self.__eliminacion("nautilus")&lt;/p&gt;
&lt;p&gt;def on_checkbutton3_toggled(self,*args):
  variable = self.checkbutton3.get_active()
  if  variable == True:
   self.aplicaciones.append("oowriter")
  else:
   self.__eliminacion("oowriter")&lt;/p&gt;
&lt;p&gt;def on_checkbutton4_toggled(self,*args):
  variable = self.checkbutton4.get_active()
  if  variable == True:
   self.aplicaciones.append("iceweasel")
  else:
   self.__eliminacion("iceweasel")&lt;/p&gt;
&lt;p&gt;def on_checkbutton5_toggled(self,*args):
  variable = self.checkbutton5.get_active()
  if  variable == True:
   self.aplicaciones.append("pidgin")
  else:
   self.__eliminacion("pidgin")&lt;/p&gt;
&lt;p&gt;def on_checkbutton6_toggled(self,*args):
  variable = self.checkbutton6.get_active()
  if  variable == True:
   self.aplicaciones.append("gedit")
  else:
   self.__eliminacion("gedit")&lt;/p&gt;
&lt;p&gt;def on_checkbutton7_toggled(self,*args):
  variable = self.checkbutton7.get_active()
  if  variable == True:
   self.aplicaciones.append("ooimpress")
  else:
   self.__eliminacion("ooimpress")&lt;/p&gt;
&lt;p&gt;def on_checkbutton8_toggled(self,*args):
  variable = self.checkbutton8.get_active()
  if  variable == True:
   self.aplicaciones.append("gnome-calculator")
  else:
   self.__eliminacion("gnome-calculator")&lt;/p&gt;
&lt;p&gt;def on_checkbutton9_toggled(self,*args):
  variable = self.checkbutton9.get_active()
  if  variable == True:
   self.aplicaciones.append("oocalc")
  else:
   self.__eliminacion("oocalc")&lt;/p&gt;
&lt;p&gt;def on_checkbutton10_toggled(self,*args):
  variable = self.checkbutton10.get_active()
  if  variable == True:
   self.aplicaciones.append("rhythmbox")
  else:
   self.__eliminacion("rhythmbox")&lt;/p&gt;
&lt;p&gt;def on_checkbutton11_toggled(self,*args):
  variable = self.checkbutton11.get_active()
  if  variable == True:
   self.aplicaciones.append("gnome-terminal")
  else:
   self.__eliminacion("gnome-terminal")&lt;/p&gt;
&lt;p&gt;def on_checkbutton12_toggled(self,*args):
  pass
  """
  variable = self.checkbutton12.get_active()
  if  variable == True:
   print "daltonicos"
  else:
   print "nada de daltonicos"
  """
 def __eliminacion(self,aplicacion):
                #Elimina un elemento de la lista
  if len(self.aplicaciones) &amp;gt;= 2:
   for i in range(len(self.aplicaciones)):
    if self.aplicaciones[i] == aplicacion:
     self.aplicaciones[i:i+1] = []
     break
    else:
     continue
  elif len(self.aplicaciones) == 1:
   if self.aplicaciones[0] == aplicacion:
    self.aplicaciones = []
   else:
    pass
  else:
   pass&lt;/p&gt;
&lt;p&gt;def on_checkbutton13_toggled(self,*args):
                #Selecciona todos los botones de verificaci&amp;oacute;n o los deselecciona a todos.
  variable = self.checkbutton13.get_active()
  if  variable == True:
   self.checkbutton1.set_active(1)
   self.checkbutton2.set_active(1)
   self.checkbutton3.set_active(1)
   self.checkbutton4.set_active(1)
   self.checkbutton5.set_active(1)
   self.checkbutton6.set_active(1)
   self.checkbutton7.set_active(1)
   self.checkbutton8.set_active(1)
   self.checkbutton9.set_active(1)
   self.checkbutton10.set_active(1)
   self.checkbutton11.set_active(1)
   #self.checkbutton12.set_active(1)
  else:
   self.checkbutton1.set_active(0)
   self.checkbutton2.set_active(0)
   self.checkbutton3.set_active(0)
   self.checkbutton4.set_active(0)
   self.checkbutton5.set_active(0)
   self.checkbutton6.set_active(0)
   self.checkbutton7.set_active(0)
   self.checkbutton8.set_active(0)
   self.checkbutton9.set_active(0)
   self.checkbutton10.set_active(0)
   self.checkbutton11.set_active(0)
   #self.checkbutton12.set_active(0)&lt;/p&gt;
&lt;p&gt;def on_dialog1_close(self,*args):
                #Cierra la ventana de dialogo
  gtk.main_quit()&lt;/p&gt;
&lt;p&gt;def on_dialog1_destroy(self,*args):
                #Cierra la ventana de dialogo
  gtk.main_quit()&lt;/p&gt;
&lt;p&gt;def on_button1_clicked(self,*args):
                #Cierra la ventana de dialogo
  gtk.main_quit()&lt;/p&gt;
&lt;p&gt;def on_button2_clicked(self,*args):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            #Llama al m&amp;oacute;dulo configGconf para aplicar los cambios con gconf

            Config = configGconf.Conf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Config.modificar_opcion(self.aplicaciones)&lt;/p&gt;
&lt;p&gt;def main(self): #M&amp;eacute;todo que ejecuta el programa
  gtk.main()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
       Instancia del objeto AccessGnomeConfig y ejecuci&amp;oacute;n del programa
 app = AccessGnomeConfig()
 app.main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;La opci&amp;oacute;n de applet para dalt&amp;oacute;nicos no est&amp;aacute; habilitada en este momento ya que se est&amp;aacute; trabajando en agregar el applet automaticamente a la barra superior de gnome por medio de gconf. La pr&amp;oacute;xima mejora ser&amp;aacute; eliminar configuraciones del gconf.&lt;/p&gt;
&lt;p&gt;En pr&amp;oacute;ximo art&amp;iacute;culo se crear&amp;aacute; el paquete .tar.gz de python para subirlo al repositorio oficial de python y luego crear un paquete para debian.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="accesibilidad"></category><category term="gconf"></category><category term="glade"></category><category term="gnome"></category><category term="gtk"></category><category term="python"></category><category term="tiflotecnologia"></category></entry><entry><title>Script en python que configura los accesos rápidos de teclado a aplicaciones en gnome con gconf</title><link href="https://ecrespo.github.io/script-en-python-que-configura-los-accesos-rapidos-de-teclado-a-aplicaciones-en-gnome-con-gconf.html" rel="alternate"></link><published>2009-12-12T19:00:00-05:30</published><updated>2009-12-12T19:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-12-12:/script-en-python-que-configura-los-accesos-rapidos-de-teclado-a-aplicaciones-en-gnome-con-gconf.html</id><summary type="html">&lt;p&gt;El script lo pueden bajar de &lt;a href="http://code.google.com/p/python-config-accesskey-gnome/source/browse/pyconfig-accessgnome.py"&gt;googlecode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este programa tiene su ayuda:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./pyconfig-accessgnome.py --help
pyconfig-orca options
option : --help : Print this help
option : --list : List gconf for gnome-orca
option : --all : add all config access key in gconf
option : --nautilus : add gconf access key to nautilus
option : --gnome-terminal : add gconf access …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El script lo pueden bajar de &lt;a href="http://code.google.com/p/python-config-accesskey-gnome/source/browse/pyconfig-accessgnome.py"&gt;googlecode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este programa tiene su ayuda:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./pyconfig-accessgnome.py --help
pyconfig-orca options
option : --help : Print this help
option : --list : List gconf for gnome-orca
option : --all : add all config access key in gconf
option : --nautilus : add gconf access key to nautilus
option : --gnome-terminal : add gconf access key to gnome-terminal
option : --oowriter : add gconf access key to oowriter
option : --pidgin : add gconf access key to pidgin
option : --gedit : add gconf access key to gedit
option : --gnome-calculator : add gconf access key to gnome-calculator
option : --ooimpress : add gconf access key to ooimpress
option : --oocalc : add gconf access key to oocalc
option : --rhythmbox : add gconf access key to rhythmbox
option : --orca : add gconf access key to orca
option : --iceweasel : add gconf access key to iceweasel&lt;/code&gt;
La opci&amp;oacute;n --all permite configurar todas las opciones de una vez, tambi&amp;eacute;n se puede configurar unas aplicaciones nada m&amp;aacute;s.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./pyconfig-accessgnome.py --all
./pyconfig-accessgnome.py --pidgin --orca --iceweasel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;"""
Name: pyconfig-accessgnome
Description: Aplicaci&amp;oacute;n y m&amp;oacute;dulo que permite modificar los accesos r&amp;aacute;pido de teclas a programas
Version:0.2
License: GPLv3
Copyright: Copyright (C) 2009  Libre Accesibilidad
Author: Ernesto Nadir Crespo Avila
Email: ecrespo@gmail.com
Changelog:
 * Agregada multiples opciones de configuraci&amp;oacute;n&lt;/p&gt;
&lt;p&gt;"""&lt;/p&gt;
&lt;p&gt;import gconf&lt;/p&gt;
&lt;p&gt;class Conf:
    def &lt;strong&gt;init&lt;/strong&gt;(self):
        self.gconfClient = gconf.client_get_default()
        self.aplicaciones = ("orca", "gnome-terminal","oowriter","iceweasel","nautilus","ooimpress","pidgin","oocalc","gedit","gnome-calculator","rhythmbox")
        self.comando = "/apps/metacity/keybinding_commands/command_"
        self.asignacion_teclado = "/apps/metacity/global_keybindings/run_command_"
        self.teclas = {"orca":"o","gnome-terminal":"t","oowriter":"w","iceweasel":"n","nautilus":"h","ooimpress":"i","pidgin":"p","oocalc":"x","gedit":"e","gnome-calculator":"c","rhythmbox":"m"}
        self.colorblind = {}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def modificar(self):
    cont = 1
    for aplicacion in self.aplicaciones:
        ruta1 =  "%s%s" %(self.comando,cont)
        ruta2 = "%s%s"  %(self.asignacion_teclado,cont)
        self.gconfClient.set_string(ruta1, "%s" %aplicacion)
        self.gconfClient.set_string(ruta2, "%s" %self.teclas[aplicacion])
        cont = cont +1

def modificar_opcion(self,opciones_validas):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cont = 1
 for aplicacion in opciones_validas:
     if aplicacion in self.aplicaciones:
  ruta1 = "%s%s" %(self.comando,cont)
  ruta2 = "%s%s" %(self.asignacion_teclado,cont)
  self.gconfClient.set_string(ruta1, "%s" %aplicacion)
  self.gconfClient.set_string(ruta2, "%s" %self.teclas[aplicacion])
  cont = cont +1
     else:
  print "please change this option: %s" %aplicacion&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def listar(self):
    cont = 1
    for aplicacion in self.aplicaciones:
        ruta1 =  "%s%s" %(self.comando,cont)
        ruta2 = "%s%s"  %(self.asignacion_teclado,cont)
        print self.gconfClient.get_string(ruta1),self.gconfClient.get_string(ruta2)
        cont = cont +1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    import sys
    config = Conf()
    global opciones
    opciones = config.teclas.keys()
    def mensaje():
        print "pyconfig-orca options " 
        print "option : --help    : Print this help"
        print "option : --list    : List gconf for gnome-orca"
        print "option : --all     : add all config access key in gconf"
        for opcion in opciones:
   print "option : --%s   : add gconf access key to %s" %(opcion,opcion)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if len(sys.argv) == 1 :
    mensaje()
elif len(sys.argv) == 2:
    if sys.argv[1] == "--list" :
        config.listar()
    elif sys.argv[1] == "--all":
        config.modificar()
    elif sys.argv[1] == "--help" :
        mensaje()
    else:
 for opcion in opciones:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if sys.argv[1] =="--%s" %opcion:
      config.modificar_opcion(opcion)
    elif len(sys.argv) &amp;gt; 2:
 bandera = 0
 opciones_validas = []
 for opcion in sys.argv[1:]:
     if opcion == "--list" :
  bandera = 1
  continue
     elif opcion == "--all":
  bandera = 1
  continue
     elif opcion == "--help":
  bandera == 1
  continue
     else:
  opciones_validas.append(opcion[2:])
 if bandera == 1:
     mensaje()
     print "If you have a two option or more, please don\'t use --list,--all or --help."
 else:
     config.modificar_opcion(opciones_validas)
     print "all change do it"&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;En pr&amp;oacute;ximo post se mostrar&amp;aacute; la interfaz gr&amp;aacute;fica para la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="accesibilidad"></category><category term="gconf"></category><category term="gnome"></category><category term="python"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 6. Editor de Texto</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-6-editor-de-texto.html" rel="alternate"></link><published>2009-10-08T19:00:00-05:30</published><updated>2009-10-08T19:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-10-08:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-6-editor-de-texto.html</id><summary type="html">&lt;p&gt;En el tutorial anterior se mostr&amp;oacute; como abrir un archivo, mostrar el contenido en el widget textview, ahora se agrega la posibilidad de editar y guardar el archivo.&lt;/p&gt;
&lt;p&gt;En la figura se muestra el dise&amp;ntilde;o en glade.
&lt;img alt="Tutorial 6 Glade 1" src="./images/tutorialpythongtkglade6-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importacion de modulos"&gt;Importaci&amp;oacute;n de m&amp;oacute;dulos&lt;/h1&gt;
&lt;p&gt;import pygtk
pygtk …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el tutorial anterior se mostr&amp;oacute; como abrir un archivo, mostrar el contenido en el widget textview, ahora se agrega la posibilidad de editar y guardar el archivo.&lt;/p&gt;
&lt;p&gt;En la figura se muestra el dise&amp;ntilde;o en glade.
&lt;img alt="Tutorial 6 Glade 1" src="./images/tutorialpythongtkglade6-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importacion de modulos"&gt;Importaci&amp;oacute;n de m&amp;oacute;dulos&lt;/h1&gt;
&lt;p&gt;import pygtk
pygtk.require('2.0')
import gtk, gtk.glade, inspect, sys
import string&lt;/p&gt;
&lt;h1 id="creacion de la clase ej1"&gt;Creaci&amp;oacute;n de la clase ej1&lt;/h1&gt;
&lt;p&gt;class Editor:
 #Creaci&amp;oacute;n del m&amp;eacute;todo constructor de la clase.
 def &lt;strong&gt;init&lt;/strong&gt;(self):
     #Se captura el archivo xml de la interfaz
     self.w_tree = gtk.glade.XML('ej1.glade')
     #Se asocia la ventana1
     self.ventana1 = self.w_tree.get_widget('ventana1')
     #Se asocia el widget textview1
     self.textview1 = self.w_tree.get_widget('editortexto')
     #Se asocia el widget de la selecci&amp;oacute;n de archivo
     self.seleccionararchivo = self.w_tree.get_widget('filechooserbutton1')
     #Se asocia el widget de la selecci&amp;oacute;n de archivo
     self.seleccionararchivo2 = self.w_tree.get_widget('filechooserbutton2')
     #Se asocia el boton salir
     self.botonsalir = self.w_tree.get_widget('bsalir')
     #Se asocia los eventos con las se&amp;ntilde;ales
     self.w_tree.signal_autoconnect(dict(inspect.getmembers(self)))
     #Se asocia el objeto buffer de texto
     self.buffertexto = gtk.TextBuffer()
     #Se crea una lista vac&amp;iacute;a
     self.lista = []
     #Se crea la variable que contendr&amp;aacute; el nombre del archivo seleccionado
     self.archivo_name = ""
     #Se asigna un t&amp;iacute;tulo a la ventana
     self.ventana1.set_title("Editor de texto")&lt;/p&gt;
&lt;p&gt;#Se crea el m&amp;eacute;todo de selecci&amp;oacute;n de archivo
 def on_filechooserbutton1_file_set(self,*args):
     #Se captura el nombre del archivo en la variable
     self.archivo_name = self.seleccionararchivo.get_filename()
     #Se abre el archivo colocando su contenido en una lista
     self.lista = open(self.archivo_name,"r").readlines()
     #Se recorre la lista y se coloca el contenido en el buffer de texto
     for i in range(len(self.lista)):
         self.buffertexto.insert_at_cursor(self.lista[i])
     #Se coloca el contenido del buffer en el textview
     self.textview1.set_buffer(self.buffertexto)
     #Se oculta la ventana de selecci&amp;oacute;n de archivo
     self.seleccionararchivo.hide()
     #Se crea el m&amp;eacute;todo para el boton salir&lt;/p&gt;
&lt;p&gt;def on_filechooserbutton2_file_set(self,*args):
     #Se captura el nombre del archivo en la variable
     self.archivo_name2 = self.seleccionararchivo2.get_filename()
     #Se captura el inicio y fin del buffer del textview
     startiter, enditer = self.buffertexto.get_bounds()
     #Se abre el archivo en modo escritura
     archivo = open(self.archivo_name2,"w")
     #Se escribe la informaci&amp;oacute;n en el objeto archivo , tomando el texto del buffer
     archivo.writelines(self.buffertexto.get_text(startiter,enditer))
     #Se cierra el archivo
     archivo.close()&lt;/p&gt;
&lt;p&gt;#Salir
 def on_bsalir_clicked(self,*args):
     gtk.main_quit()&lt;/p&gt;
&lt;p&gt;#Se crea el m&amp;eacute;todo para cerrar la aplicaci&amp;oacute;n
 def on_ventana1_destroy(self,&lt;em&gt;args):
     gtk.main_quit()
 #Se crea el m&amp;eacute;todo main que muestra la ventana
 def main(self,&lt;/em&gt;args):
     self.ventana1.show()
     gtk.main()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
app = Editor()
app.main()&lt;/p&gt;
&lt;p&gt;```
La siguiente figura muestra la aplicaci&amp;oacute;n ejecutandose:
&lt;img alt="Tutorial 6 Glade 2" src="./images/tutorialpythongtkglade6-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;En la siguiente figura se muestra el contenido del archivo en el editor con posibiliad de editar:
&lt;img alt="Tutorial 6 Glade 3" src="./images/tutorialpythongtkglade6-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 5</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-5.html" rel="alternate"></link><published>2009-07-05T10:00:00-05:30</published><updated>2009-07-05T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-07-05:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-5.html</id><summary type="html">&lt;p&gt;Utilizar el widget textview.
El siguiente ejemplo se explicar&amp;aacute; el uso del widget textview. Se crear&amp;aacute; una ventana
con 4 widgets, una etiqueta que menciona la lectura de archivos, luego el textview donde
se mostrar&amp;aacute; el contenido de un archivo, el boton de selecci&amp;oacute;n de archivo y el boton de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Utilizar el widget textview.
El siguiente ejemplo se explicar&amp;aacute; el uso del widget textview. Se crear&amp;aacute; una ventana
con 4 widgets, una etiqueta que menciona la lectura de archivos, luego el textview donde
se mostrar&amp;aacute; el contenido de un archivo, el boton de selecci&amp;oacute;n de archivo y el boton de salir.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se explica el c&amp;oacute;digo del desarrollo:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="!/usr/bin/env python"&gt;!/usr/bin/env python&lt;/h1&gt;
&lt;h1 id="-- coding: utf-8 --"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;h1 id="importacion de modulos"&gt;Importaci&amp;oacute;n de m&amp;oacute;dulos&lt;/h1&gt;
&lt;p&gt;import pygtk
pygtk.require('2.0')
import gtk, gtk.glade, inspect, sys&lt;/p&gt;
&lt;h1 id="creacion de la clase ej8"&gt;Creaci&amp;oacute;n de la clase ej8&lt;/h1&gt;
&lt;p&gt;class ej8:
    #Creaci&amp;oacute;n del m&amp;eacute;todo constructor de la clase.
    def &lt;strong&gt;init&lt;/strong&gt;(self):
        #Se captura el archivo xml de la interfaz
        self.w_tree = gtk.glade.XML('ej8.glade')
        #Se asocia la ventana1
        self.ventana1 = self.w_tree.get_widget('ventana1')
        #Se asocia el widget textview1
        self.textview1 = self.w_tree.get_widget('textview1')
        #Se asocia el widget de la selecci&amp;oacute;n de archivo
        self.seleccionararchivo = self.w_tree.get_widget('seleccionararchivo')
        #Se asocia el boton salir
        self.botonsalir = self.w_tree.get_widget('botonsalir')
        #Se asocia los eventos con las se&amp;ntilde;ales
        self.w_tree.signal_autoconnect(dict(inspect.getmembers(self)))
        #Se asocia el objeto buffer de texto
        self.buffertexto = gtk.TextBuffer()
        #Se crea una lista vac&amp;iacute;a
        self.lista = []
        #Se crea la variable que contendr&amp;aacute; el nombre del archivo seleccionado
        self.archivo_name = ""
    #Se crea el m&amp;eacute;todo de selecci&amp;oacute;n de archivo
    def on_seleccionararchivo_file_set(self,*args):
        #Se captura el nombre del archivo en la variable
        self.archivo_name = self.seleccionararchivo.get_filename()
        #Se abre el archivo colocando su contenido en una lista
        self.lista = open(self.archivo_name,"r").readlines()
        #Se recorre la lista y se coloca el contenido en el buffer de texto
        for i in range(len(self.lista)):
            self.buffertexto.insert_at_cursor(self.lista[i])
        #Se coloca el contenido del buffer en el textview
        self.textview1.set_buffer(self.buffertexto)
        #Se oculta la ventana de selecci&amp;oacute;n de archivo
        self.seleccionararchivo.hide()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Se crea el m&amp;eacute;todo para el boton salir
def on_botonsalir_clicked(self,*args):
    gtk.main_quit()

#Se crea el m&amp;eacute;todo para cerrar la aplicaci&amp;oacute;n
def on_ventana1_destroy(self,*args):
    gtk.main_quit()

#Se crea el m&amp;eacute;todo main que muestra la ventana
def main(self,*args):
    self.ventana1.show()
    gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    app = ej8()
    app.main()
```&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n lo pueden descargar de github en el siguiente
&lt;a href="https://github.com/ecrespo/ecrespo.github.io/blob/master/content/code/2009/tutorialgtkglade5.py"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 4</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-4.html" rel="alternate"></link><published>2009-06-17T10:00:00-05:30</published><updated>2009-06-17T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-17:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-4.html</id><summary type="html">&lt;p&gt;El siguiente ejemplo explicar&amp;aacute; como manejar 2 ventanas en una aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;La primera venta muestra 2 etiquetas una con un texto y la otra en blanco, luego
una entrada de datos solicitando el nombre, 2 botones uno de capturar texto y otra
de salir. Al darle al bot&amp;oacute;n de capturar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El siguiente ejemplo explicar&amp;aacute; como manejar 2 ventanas en una aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;La primera venta muestra 2 etiquetas una con un texto y la otra en blanco, luego
una entrada de datos solicitando el nombre, 2 botones uno de capturar texto y otra
de salir. Al darle al bot&amp;oacute;n de capturar texto se abre otra ventana preguntando si est&amp;aacute;
seguro de lo que desea hacer, si se le da aceptar presenta el texto en la etiqueta.&lt;/p&gt;
&lt;p&gt;La siguiente figura muestra la interfaz desarrollado con glade.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 4 Glade 1" src="./images/tutorialglade4-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="C&amp;oacute;digo" src="./images/tutorialpythongtkglade4-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al ejecutar el programa se muestra la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 4 Glade 2" src="./images/tutorialglade4-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;Se escribe el nombre y se presiona capturar texto:
&lt;img alt="Tutorial 4 Glade 3" src="./images/tutorialglade4-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al presiona capturar texto y se abre una ventana con la pregunta si se desea
aceptar o salir de la aplicaci&amp;oacute;n.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 4 Glade 4" src="./images/tutorialglade4-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;Para finalizar se muestra la captura de texto en la etiqueta.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 4 Glade 5" src="./images/tutorialglade4-5.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n lo pueden descargar de github en el siguiente
&lt;a href="https://github.com/ecrespo/ecrespo.github.io/blob/master/content/code/2009/tutorialgtkglade4.py"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 3</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-3.html" rel="alternate"></link><published>2009-06-17T08:00:00-05:30</published><updated>2009-06-17T08:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-17:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-3.html</id><summary type="html">&lt;p&gt;Ahora se mostrar&amp;aacute; como usar el widget combobox. La idea es mostrar una lista de pa&amp;iacute;ses
en el primer combo y cuando este cambie, se cambie la lista de ciudades con respecto a los pa&amp;iacute;ses.&lt;/p&gt;
&lt;p&gt;La interfaz desarrollada con glade se colocan 2 combobox, 1 etiqueta y 2 botones. El …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ahora se mostrar&amp;aacute; como usar el widget combobox. La idea es mostrar una lista de pa&amp;iacute;ses
en el primer combo y cuando este cambie, se cambie la lista de ciudades con respecto a los pa&amp;iacute;ses.&lt;/p&gt;
&lt;p&gt;La interfaz desarrollada con glade se colocan 2 combobox, 1 etiqueta y 2 botones. El
primer combobox contiene los pa&amp;iacute;ses y se agrega desde el glade, el 2do combobox se
deja en blanco manejandose v&amp;iacute;a python. En la siguiente figura se muestra la interfaz en glade.&lt;/p&gt;
&lt;p&gt;Se muestra la interfaz creada con glade en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 3 Glade 1" src="./images/tutorialglade3-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="C&amp;oacute;digo" src="./images/tutorialpythongtkglade3-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al ejecutar el programa se muestra lo siguiente:
&lt;img alt="Tutorial 3 Glade 2" src="./images/tutorialglade3-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;Luego se selecciona el pa&amp;iacute;s que se tiene Venezuela, Argentina y Escocia. Se cambia cada
vez el pa&amp;iacute;s y se selecciona la ciudad, luego se le da clip al boton aceptar apareciendo en
la etiqueta el pa&amp;iacute;s y la ciudad.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 2 Glade 3" src="./images/tutorialglade3-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 2 Glade 3" src="./images/tutorialglade3-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 2 Glade 3" src="./images/tutorialglade3-5.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n lo pueden descargar de github en el siguiente
&lt;a href="https://github.com/ecrespo/ecrespo.github.io/blob/master/content/code/2009/tutorialgtkglade3.py"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 2</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-2.html" rel="alternate"></link><published>2009-06-17T07:30:00-05:30</published><updated>2009-06-17T07:30:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-17:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-2.html</id><summary type="html">&lt;p&gt;En el siguiente ejemplo de desarrollo de aplicaciones gr&amp;aacute;ficas con glade se muestra
como capturar texto en una entrada de texto, como modificar la informaci&amp;oacute;n en
una etiqueta usando botones.&lt;/p&gt;
&lt;p&gt;Se muestra la interfaz creada con glade en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 2 Glade 1" src="./images/tutorialglade2-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="C&amp;oacute;digo" src="./imagenes/tutorialpythongtkglade2-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al ejecutar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el siguiente ejemplo de desarrollo de aplicaciones gr&amp;aacute;ficas con glade se muestra
como capturar texto en una entrada de texto, como modificar la informaci&amp;oacute;n en
una etiqueta usando botones.&lt;/p&gt;
&lt;p&gt;Se muestra la interfaz creada con glade en la siguiente figura:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial 2 Glade 1" src="./images/tutorialglade2-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="C&amp;oacute;digo" src="./imagenes/tutorialpythongtkglade2-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Al ejecutar el programa se muestra la figura:
&lt;img alt="Tutorial 2 Glade 2" src="./images/tutorialglade2-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;Luego de colocar el dato que se pide y darle clip al boton capturar texto:
&lt;img alt="Tutorial 2 Glade 3" src="./images/tutorialglade2-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n lo pueden descargar de github en el siguiente
&lt;a href="https://github.com/ecrespo/ecrespo.github.io/blob/master/content/code/2009/tutorialgtkglade2.py"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Tutoriales de matplotlib con python. Parte 6</title><link href="https://ecrespo.github.io/tutoriales-de-matplotlib-con-python-parte-6.html" rel="alternate"></link><published>2009-06-17T07:00:00-05:30</published><updated>2009-06-17T07:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-17:/tutoriales-de-matplotlib-con-python-parte-6.html</id><summary type="html">&lt;p&gt;Continuando con los tutoriales de matplotlib, ahora se mostrar&amp;aacute; como colocar 2 gr&amp;aacute;ficas separadas.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Matplotlib6 c&amp;oacute;digo" src="./images/matplotlib6-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Se importan los m&amp;oacute;dulos necesarios, se define una funci&amp;oacute;n que devuelve el resultado
de un c&amp;aacute;lculo matem&amp;aacute;tico, luego se define los rangos de tiempo1 y tiempo2.&lt;/p&gt;
&lt;p&gt;Se define la figura …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuando con los tutoriales de matplotlib, ahora se mostrar&amp;aacute; como colocar 2 gr&amp;aacute;ficas separadas.&lt;/p&gt;
&lt;p&gt;A continuaci&amp;oacute;n se muestra el c&amp;oacute;digo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Matplotlib6 c&amp;oacute;digo" src="./images/matplotlib6-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Se importan los m&amp;oacute;dulos necesarios, se define una funci&amp;oacute;n que devuelve el resultado
de un c&amp;aacute;lculo matem&amp;aacute;tico, luego se define los rangos de tiempo1 y tiempo2.&lt;/p&gt;
&lt;p&gt;Se define la figura, luego la subgr&amp;aacute;fica, se le pasa los datos para construir la primera
gr&amp;aacute;fica (tiempo1, la funci&amp;oacute;n, identificaci&amp;oacute;n de la gr&amp;aacute;fica, tiempo2, la funci&amp;oacute;n y la
  identificaci&amp;oacute;n de la gr&amp;aacute;fica).&lt;/p&gt;
&lt;p&gt;Se le coloca el t&amp;iacute;tulo a la gr&amp;aacute;fica, las identificaciones de los ejes para ambas gr&amp;aacute;ficas,
se construye la segunda gr&amp;aacute;fica y se muestra las mismas.&lt;/p&gt;
&lt;p&gt;La figura muestra las 2 gr&amp;aacute;ficas:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Matplotlib6 c&amp;oacute;digo" src="./images/matplotlib6-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n lo pueden descargar de github en el siguiente
&lt;a href="https://github.com/ecrespo/ecrespo.github.io/blob/master/content/code/2009/tutorialmaplotlib6.py"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Matplotlib"></category></entry><entry><title>Desarrollo de aplicaciones gráficas con python+gtk+glade. Parte 1</title><link href="https://ecrespo.github.io/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-1.html" rel="alternate"></link><published>2009-06-16T10:30:00-05:30</published><updated>2009-06-16T10:30:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-16:/desarrollo-de-aplicaciones-graficas-con-pythongtkglade-parte-1.html</id><summary type="html">&lt;p&gt;Tengo guardado un material que he preparado para un curso de python con gtk y glade;
desde hace alg&amp;uacute;n tiempo he intentado dictar ese curso pero siempre hab&amp;iacute;a contratiempos
as&amp;iacute; que mejor publico lo que tengo en el blog.&lt;/p&gt;
&lt;p&gt;Empezare con hacer una simple interfaz que tenga informaci&amp;oacute;n en una …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tengo guardado un material que he preparado para un curso de python con gtk y glade;
desde hace alg&amp;uacute;n tiempo he intentado dictar ese curso pero siempre hab&amp;iacute;a contratiempos
as&amp;iacute; que mejor publico lo que tengo en el blog.&lt;/p&gt;
&lt;p&gt;Empezare con hacer una simple interfaz que tenga informaci&amp;oacute;n en una etiqueta.&lt;/p&gt;
&lt;p&gt;En la figura se muestra la ventana creada y el widget etiqueta con el mensaje. La interfaz
se guarda con extensi&amp;oacute;n .glade el cual contiene un archivo XML.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tutorial Glade 1" src="./images/tutorialglade1-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo del programa es el siguiente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="C&amp;oacute;digo" src="./images/tutorialpythongtkglade1-codigo.png"/&gt;&lt;/p&gt;
&lt;p&gt;La primera l&amp;iacute;nea define el interpretador de comandos a utilizar, en este caso python.
La segunda l&amp;iacute;nea define que se usar&amp;aacute; UTF-8 en el formato de texto.
Las l&amp;iacute;neas 3,4 y 5 se importan m&amp;oacute;dulos y se define el requerimiento de versi&amp;oacute;n de gtk.
L&amp;iacute;nea 6 se define la clase ej1.
L&amp;iacute;nea 7 a la 13 se define el m&amp;eacute;todo init, que se ejecuta cuando el objeto se crea.
L&amp;iacute;nea 8 se captura el archivo XML de glade.
L&amp;iacute;nea 9 y 10 se capturan los widgets ventana y etiqueta1 tal como se llama en el archivo glade.
L&amp;iacute;nea 11 se imprime lo que tiene la etiqueta1, se toma el valor con get().
L&amp;iacute;nea 12 se cambia el valor de lo que contiene la etiqueta1 con set_text("hola mundo").
L&amp;iacute;nea 13. Esta l&amp;iacute;nea es la que relaciona los widgets con las se&amp;ntilde;ales y los m&amp;eacute;todos de la clase ej1.
L&amp;iacute;nea 14. define el m&amp;eacute;todo on_ventana_destroy. Est&amp;eacute; m&amp;eacute;todo se usa para cuando se le da clip a la ventana para cerrarla.
L&amp;iacute;nea 15. Llama a la funci&amp;oacute;n quit de gtk.
L&amp;iacute;nea 16. Define el m&amp;eacute;todo main.
L&amp;iacute;nea 17.Muestra la ventana.
L&amp;iacute;nea 18. Llama a main para la presentaci&amp;oacute;n de la ventana en pantalla.
L&amp;iacute;nea 19. Si se ejecuta el script se ejecutar&amp;aacute; las siguientes l&amp;iacute;neas:
L&amp;iacute;nea 20. Se crea el objeto.
L&amp;iacute;nea 21. Se ejecuta el m&amp;eacute;todo main del objeto.&lt;/p&gt;
&lt;p&gt;El resultado lo muestra la figura.
&lt;img alt="Tutorial Glade 2" src="./images/tutorialglade1-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;El c&amp;oacute;digo de la aplicaci&amp;oacute;n lo pueden descargar de github en el siguiente
&lt;a href="https://github.com/ecrespo/ecrespo.github.io/blob/master/content/code/2009/ej1.py"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="gtk"></category><category term="glade"></category></entry><entry><title>Tutoriales de matplotlib con python. Parte 5</title><link href="https://ecrespo.github.io/tutoriales-de-matplotlib-con-python-parte-5.html" rel="alternate"></link><published>2009-06-16T10:20:00-05:30</published><updated>2009-06-16T10:20:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-16:/tutoriales-de-matplotlib-con-python-parte-5.html</id><summary type="html">&lt;p&gt;El siguiente ejemplo se muestra como colocar varias curvas en una misma gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pylab import *
t=arange(0.,2.*pi,0.1)
s=cos(t)
x=sqrt(t)
y = sin(t)
p1=plot(t,s, 'g-o',linewidth=2)
p2=plot(t,x, 'r--',linewidth=3)
p3=plot(t,y …&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;El siguiente ejemplo se muestra como colocar varias curvas en una misma gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pylab import *
t=arange(0.,2.*pi,0.1)
s=cos(t)
x=sqrt(t)
y = sin(t)
p1=plot(t,s, 'g-o',linewidth=2)
p2=plot(t,x, 'r--',linewidth=3)
p3=plot(t,y, 'b--d')
show()
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se importa el m&amp;oacute;dulo pylab, luego se define el rango del eje del tiempo, se
calcula el coseno, la ra&amp;iacute;z cuadrada y el seno, luego se muestra cada calculo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matplotlib5-1" src="./images/matplotlib5-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Matplotlib"></category></entry><entry><title>Tutoriales de matplotlib con python. Parte 4</title><link href="https://ecrespo.github.io/tutoriales-de-matplotlib-con-python-parte-4.html" rel="alternate"></link><published>2009-06-16T10:10:00-05:30</published><updated>2009-06-16T10:10:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-16:/tutoriales-de-matplotlib-con-python-parte-4.html</id><summary type="html">&lt;p&gt;El siguiente ejemplo se graficar&amp;aacute; una curva senosoidal definiendo un rango de tiempo.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import numpy
import pylab
t = numpy.arange(0.0, 1.0+0.01, 0.01)
s = numpy.cos(2&lt;em&gt;2&lt;/em&gt;numpy.pi*t)
pylab.plot(t, s)
[]
pylab.xlabel('tiempo (seg)')
pylab.ylabel('Tension (mV)')
pylab.title …&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;El siguiente ejemplo se graficar&amp;aacute; una curva senosoidal definiendo un rango de tiempo.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import numpy
import pylab
t = numpy.arange(0.0, 1.0+0.01, 0.01)
s = numpy.cos(2&lt;em&gt;2&lt;/em&gt;numpy.pi*t)
pylab.plot(t, s)
[]
pylab.xlabel('tiempo (seg)')
pylab.ylabel('Tension (mV)')
pylab.title('Grafica de tension versus tiempo')
pylab.axis([0,1, -2,2])
pylab.grid(True)
pylab.annotate('tension maxima', xy=(0, 1), xytext=(0.2, 1.5),arrowprops=dict(facecolor='black', shrink=0.05),)&lt;/p&gt;
&lt;p&gt;pylab.savefig('grafica.png')
pylab.show()
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se importa el m&amp;oacute;dulo numpy y pylab, luego se define el rango del eje del tiempo con
una funci&amp;oacute;n de numpy, luego se define el eje de la tensi&amp;oacute;n con la funci&amp;oacute;n coseno, se
gr&amp;aacute;fica tanto el tiempo como la tensi&amp;oacute;n, se coloca etiqueta a ambos ejes, t&amp;iacute;tulo a la
gr&amp;aacute;fica, se define los ejes de la gr&amp;aacute;fica,se define cuadricula, se define una anotaci&amp;oacute;n,
colocando el texto de la anotaci&amp;oacute;n, luego la posici&amp;oacute;n de a flacha, la posici&amp;oacute;n del
texto y las caracter&amp;iacute;sticas de la flecha; se guarda la gr&amp;aacute;fica y se muestra.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matplotlib4-1" src="./images/matplotlib4-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Matplotlib"></category></entry><entry><title>Tutoriales de matplotlib con python. Parte 3 Histograma</title><link href="https://ecrespo.github.io/tutoriales-de-matplotlib-con-python-parte-3-histograma.html" rel="alternate"></link><published>2009-06-16T10:00:00-05:30</published><updated>2009-06-16T10:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-16:/tutoriales-de-matplotlib-con-python-parte-3-histograma.html</id><summary type="html">&lt;p&gt;Ahora se demostrar&amp;aacute; como graficar un histograma. El ejemplo que se usar&amp;aacute; es el de graficar
una gaussiana.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pylab import randn, hist
import matplotlib.pyplot as plt
plt.title("Ejemplo de graficar una gaussiana")
x = randn(10000)
plt.hist(x)
(array([ 26, 182, 846, 2061, 2876, 2449, 1194, 312 …&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Ahora se demostrar&amp;aacute; como graficar un histograma. El ejemplo que se usar&amp;aacute; es el de graficar
una gaussiana.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from pylab import randn, hist
import matplotlib.pyplot as plt
plt.title("Ejemplo de graficar una gaussiana")
x = randn(10000)
plt.hist(x)
(array([ 26, 182, 846, 2061, 2876, 2449, 1194, 312, 46, 8]), array([-3.56266387, -2.79960319, -2.03654252, -1.27348184, -0.51042117, 0.25263951, 1.01570018, 1.77876086, 2.54182153, 3.30488221, 4.06794288]), )
plt.axis([-5, 5, 0, 4000]) [-5, 5, 0, 4000]
plt.grid(True)
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se importa random e histograma, luego matplotlib. Se define el t&amp;iacute;tulo de la gr&amp;aacute;fica,
se generan los n&amp;uacute;meros aleatorios entre 0 y 10000, se le pasan los datos a matplotlib,
se definen los ejes de la gr&amp;aacute;fica y para finalizar se define cuadros a la gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matplotlib3-1" src="./images/matplotlib3-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Matplotlib"></category></entry><entry><title>Tutoriales de matplotlib con python. Parte 2</title><link href="https://ecrespo.github.io/tutoriales-de-matplotlib-con-python-parte-2.html" rel="alternate"></link><published>2009-06-16T09:00:00-05:30</published><updated>2009-06-16T09:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-16:/tutoriales-de-matplotlib-con-python-parte-2.html</id><summary type="html">&lt;p&gt;Ahora se mostrar&amp;aacute; como se definen unos puntos en el gr&amp;aacute;fico, se define el rango de los ejes.&lt;/p&gt;
&lt;p&gt;```
ernesto@zvezda:~/bin$ python2.5
Python 2.5.4 (r254:67916, Feb 17 2009, 20:16:45)
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ahora se mostrar&amp;aacute; como se definen unos puntos en el gr&amp;aacute;fico, se define el rango de los ejes.&lt;/p&gt;
&lt;p&gt;```
ernesto@zvezda:~/bin$ python2.5
Python 2.5.4 (r254:67916, Feb 17 2009, 20:16:45)
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
[]
plt.axis([0, 6, 0, 20])
[0, 6, 0, 20]
plt.show()
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;La diferencia con el anterior es que se definen las coordenadas y se pasa el par&amp;aacute;metro 'ro',
 este hace que s&amp;oacute;lo se muestre los puntos en vez de una curva en el gr&amp;aacute;fico; luego se
 define los ejes de 0 a 6 y de 0 a 20.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matplotlib2-1" src="./images/matplotlib2-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;El siguiente ejemplo es uniendo los puntos, para ello se le quita el par&amp;aacute;metro 'ro' al
pasar las coordenadas:&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16])
[]
plt.axis([0, 6, 0, 20])
[0, 6, 0, 20]
plt.show()
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="matplotlib2-2" src="./images/matplotlib2-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Matplotlib"></category></entry><entry><title>Tutoriales de matplotlib con python. Parte 1</title><link href="https://ecrespo.github.io/tutoriales-de-matplotlib-con-python-parte-1.html" rel="alternate"></link><published>2009-06-16T08:00:00-05:30</published><updated>2009-06-16T08:00:00-05:30</updated><author><name>Ernesto Crespo</name></author><id>tag:ecrespo.github.io,2009-06-16:/tutoriales-de-matplotlib-con-python-parte-1.html</id><summary type="html">&lt;p&gt;Luego de un tiempo dedicado a otros asuntos y debido a mi reposo voy a empezar una
serie de tutoriales cortos sobre matplotlib.&lt;/p&gt;
&lt;p&gt;Lo primero que se necesita tener es matplotlib instalado:
Como root:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aptitude install python-matplotlib python-matplotlib-data python-matplotlib-doc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego desde la l&amp;iacute;nea de comandos se ejecuta python
```
ernesto@zvezda …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Luego de un tiempo dedicado a otros asuntos y debido a mi reposo voy a empezar una
serie de tutoriales cortos sobre matplotlib.&lt;/p&gt;
&lt;p&gt;Lo primero que se necesita tener es matplotlib instalado:
Como root:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aptitude install python-matplotlib python-matplotlib-data python-matplotlib-doc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego desde la l&amp;iacute;nea de comandos se ejecuta python
```
ernesto@zvezda:~/bin$ python2.5
Python 2.5.4 (r254:67916, Feb 17 2009, 20:16:45)
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import matplotlib.pyplot as plt
plt.plot([1,2,3],[5,7,9])
[]
plt.ylabel('Eje Y')&lt;/p&gt;
&lt;p&gt;plt.xlabel('Eje X')
plt.show()
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;El primer comando importa la librer&amp;iacute;a matplotlib, luego se le pasan los puntos
a graficar, los del eje X y del eje Y; luego se colocan etiquetas a los ejes
cartesianos y se presenta la gr&amp;aacute;fica.&lt;/p&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&amp;iexcl;Haz tu donativo!
Si te gust&amp;oacute; el art&amp;iacute;culo puedes realizar un donativo con Bitcoin (BTC)
usando la billetera digital de tu preferencia a la siguiente
direcci&amp;oacute;n: 17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV&lt;/p&gt;
&lt;p&gt;O Escaneando el c&amp;oacute;digo QR desde billetera:&lt;/p&gt;
&lt;p&gt;&lt;img alt="17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV" src="./images/17MtNybhdkA9GV3UNS6BTwPcuhjXoPrSzV.png"/&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="Python"></category><category term="Matplotlib"></category></entry></feed>